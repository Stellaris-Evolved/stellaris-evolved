# events\zz_evolved_leader_events.txt

namespace = tec_leaders

# ------------------------------------------------- MISC
# New Leaders Get custom traits
country_event = {
	id = tec_leaders.1
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			tec_leader_cannot_take_species_traits = no
		}
	}

	immediate = {
		from = {
			remove_leader_traits_after_modification = yes
		}
	}

	after = {
		from = {
			add_leader_traits_after_modification = yes
		}
	}
}

#on_game_start_country
country_event = {	# Handle all starting leader effects
	id = tec_leaders.2
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		always = yes
	}

	immediate = {
		tec_country_leaders_handle_starting_modifiers = yes
	}
}

# from: leader
# scope: country
country_event = {
	id = tec_leaders.3
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		always = yes
	}

	immediate = {
		from = {
			tec_leader_handle_starting_modifiers = {
				from = root
			}
		}
	}
}

country_event = {
	id = tec_leaders.4
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		# moved to in immediate effect
		exists = owner
		tec_is_default_country = yes
		FROM = {
			tec_leader_gets_starting_actions = { flag = tec_leader_triggered_initial_skill }
		}
	}

	immediate = {
		FROM = {
			set_leader_flag = tec_leader_triggered_initial_skill
			if = {
				limit = {
					species = {
						tec_is_cyborg_species = yes
					}
				}
				add_skill_without_trait_selection = modifier:tec_leader_cyborg_initial_skill
			}
		}
	}
}


country_event = { 
	id = tec_leaders.5
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		# moved to in immediate effect
		exists = owner
		tec_is_default_country = yes
	}

	immediate = {
		FROM = {
			if = {
				limit = {
					# on consecutive iterations, aka when an empire might get new things from civics, etc
					is_variable_set = tec_leader_starting_traits_modifier 
					check_variable = {
						which = tec_leader_starting_traits_modifier
						value < value:tec_leader_starting_traits_add
					}
				}
				set_variable = {
					which = tec_difference
					value = value:tec_leader_starting_traits_add
				}
				subtract_variable = {
					which = tec_difference
					value = tec_leader_starting_traits_modifier
				}
				while = {
					count = tec_difference
					add_trait_no_notify = "random_common"
				}
				clear_variable = tec_difference
			}
			else_if = {
				limit = {
					NOT = { is_variable_set = tec_leader_starting_traits_modifier }
					tec_leader_gets_starting_actions = yes
					root = { 
						tec_country_leader_gets_starting_actions = { flag = tec_no_starting_traits_modification } 
					}
				}
				while = {
					count = value:tec_leader_starting_traits_add
					add_trait_no_notify = "random_common"
				}
			}
			set_variable = {
				which = tec_leader_starting_traits_modifier 
				value = value:tec_leader_starting_traits_add
			}
		}
	}
}

# ------------------------------------------------- AUTH - 100XX
country_event = { 
	id = tec_leaders.100
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			has_ethic = ethic_gestalt_consciousness
			is_pluralist = yes
		}
	}

	immediate = {
		# Note: 400(2) 1500(3) 3600(4) 7000(5) 12000(6) 18900(7) 27000(8) 37600(9) 51000(10)
		if = {
			limit = {
				has_ethic = ethic_gestalt_consciousness
			}
			ruler = {
				save_event_target_as = tec_gestalt_ruler
			}
			# Ruler level = xp base
			every_owned_leader = {
				limit = { is_ruler = no }
				add_experience = value:tec_gestalt_xp_gain
			}
		}
		if = {
			limit = {
				is_pluralist = yes
			}
			every_owned_leader = {
				limit = {
					tec_is_aiauth_node = no
				}
				add_experience = value:tec_pluralist_xp_gain
			}
		}
	}
}

# ------------------------------------------------- CIVICS - 200XX
# --------- tec_leaders.205 - SHARED
# Patronage, Cerebrate and machine leader handling - 33% chance of leader having it
# this = country, from = leader
country_event = {
	id = tec_leaders.205
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		OR = {
			has_valid_civic = civic_tec_regular_patronage
			has_valid_civic = civic_tec_hive_cerebrates
			has_valid_civic = civic_tec_hive_cerebrates_cyborg
			has_valid_civic = civic_machine_delegated_functions
		}
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_patronage_traits } 
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		if = {
			limit = {
				has_valid_civic = civic_tec_regular_patronage
			}
			random_list = {
				33 = {
					from = {
						if = {
							limit = {
								leader_class = commander
							}
							random_list = {
								1 = {
									modifier = {
										factor = 0
										OR = {
											is_councilor = yes
											is_ruler = yes
										}
									}
									add_trait_no_notify = leader_trait_tec_prodigy_movement
								}
								1 = {
									modifier = {
										factor = 0
										is_councilor = yes
										is_ruler = no
									}
									modifier = { # this is best ruler trait, we wanna encourage it at start
										add = 5
										is_ruler = yes
									}
									add_trait_no_notify = leader_trait_tec_prodigy_emulators
								}
								1 = {
									modifier = {
										factor = 0
										OR = {
											is_councilor = yes
											is_ruler = yes
										}
									}
									add_trait_no_notify = leader_trait_tec_prodigy_tactical
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_arts
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_research
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_materials
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_industry
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_unity
								}
							}
						}
						else_if = {
							limit = {
								leader_class = scientist
							}
							random_list = {
								3 = {
									modifier = {
										factor = 0
										is_councilor = yes
									}
									add_trait_no_notify = leader_trait_tec_prodigy_movement
								}
								3 = {
									modifier = {
										factor = 0
										is_councilor = yes
										is_ruler = no
									}
									modifier = { # this is best ruler trait, we wanna encourage it at start
										add = 5
										is_ruler = yes
									}
									add_trait_no_notify = leader_trait_tec_prodigy_emulators
								}
								2 = {
									add_trait_no_notify = leader_trait_tec_prodigy_arts
								}
								2 = {
									add_trait_no_notify = leader_trait_tec_prodigy_research
								}
								2 = {
									add_trait_no_notify = leader_trait_tec_prodigy_materials
								}
								2 = {
									add_trait_no_notify = leader_trait_tec_prodigy_industry
								}
								2 = {
									add_trait_no_notify = leader_trait_tec_prodigy_unity
								}
							}
						}
						else_if = {
							limit = {
								leader_class = official
							}
							random_list = {
								3 = {
									modifier = {
										factor = 0
										is_councilor = yes
										is_ruler = no
									}
									modifier = { # this is best ruler trait, we wanna encourage it at start
										add = 5
										is_ruler = yes
									}
									add_trait_no_notify = leader_trait_tec_prodigy_emulators
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_arts
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_research
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_materials
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_industry
								}
								1 = {
									add_trait_no_notify = leader_trait_tec_prodigy_unity
								}
							}
						}
						else = {	# No traits for special classes yet
							break = yes
						}
					}
				}
				66 = {
					modifier = {
						factor = 0
						from = {
							is_pool_leader = no
						}
					}
				}
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_tec_hive_cerebrates
			}
			random_list = {
				33 = {
					from = {
						if = {
							limit = {
								is_ruler = no
							}
							add_trait_no_notify = leader_trait_tec_hive_cerebrate
							tec_roll_cerebrate_leader_trait_flags = yes
						}
					}
				}
				66 = {
					modifier = {
						factor = 0
						from = {
							is_pool_leader = no
						}
					}
				}
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_tec_hive_cerebrates_cyborg
			}
			random_list = {
				33 = {
					from = {
						if = {
							limit = {
								is_ruler = no
							}
							add_trait_no_notify = leader_trait_tec_hive_matrix
							tec_roll_cerebrate_leader_trait_flags = yes
						}
					}
				}
				66 = {
					modifier = {
						factor = 0
						from = {
							is_pool_leader = no
						}
					}
				}
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_machine_delegated_functions
			}
			random_list = {
				33 = {
					from = {
						if = {
							limit = {
								is_ruler = no
							}
							add_trait_no_notify = leader_trait_tec_machine_delegated
							tec_roll_cerebrate_leader_trait_flags = yes
						}
					}
				}
				66 = {
					modifier = {
						factor = 0
						from = {
							is_pool_leader = no
						}
					}
				}
			}
		}
		from = {
			set_leader_flag = tec_patronage_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

# --------- tec_leaders.210 - PATRONAGE
country_event = { # New Leaders are younger for the patronage civic
	id = tec_leaders.210
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		owner = {
			has_valid_civic = civic_tec_regular_patronage
		}
		from = {
			is_immortal = no
			species = {
				OR = {
					is_archetype = MACHINE
					is_archetype = ROBOT
				}
			}
			tec_leader_gets_starting_actions = { flag = tec_patronage_age }
		}
	}

	immediate = {
		from = {
			random_list = {
				1 = { set_age = 24 }
				1 = { set_age = 25 }
				1 = { set_age = 26 }
				1 = { set_age = 27 }
				1 = { set_age = 28 }
				1 = { set_age = 29 }
				1 = { set_age = 30 }
				1 = { set_age = 31 }
				1 = { set_age = 32 }
				1 = { set_age = 33 }
				1 = { set_age = 34 }
				1 = { set_age = 35 }
			}
			set_leader_flag = tec_patronage_age
		}
	}
}

country_event = { # New Leaders get Prospector trait
	id = tec_leaders.215
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		owner = {
			has_valid_civic = civic_private_prospectors
		}
		from = {
			leader_class = scientist
			tec_leader_gets_starting_actions = { flag = tec_private_prospector_traits }
			tec_leader_first_staring_actions_done = no
		}
	}

	immediate = {
		from = {
			add_trait_no_notify = leader_trait_prospector
			set_leader_flag = tec_private_prospector_traits
		}
	}
}

# Reference event from progenitor hive
country_event = {
	id = tec_leaders.3200
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_progenitor_hive
	}

	immediate = {
		every_owned_leader = {
			limit = { is_idle = no }
			#This approximates a function to level up every 1.5(n+1) years so that you can expect to get a level 10 leader after 80 years.
			export_trigger_value_to_variable = {
				trigger = has_skill
				variable = experience_bonus
			}
			multiply_variable = {
				which = experience_bonus
				value = 2.5
			}
			floor_variable = experience_bonus

			change_variable = {
				which = experience_bonus
				value = 4
			}
			random_list = { #We want some randomness
				1 = {
					set_variable = {
						which = random_factor
						value = -3
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = -2
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = -1
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 0
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 1
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 2
					}
				}
				1 = {
					set_variable = {
						which = random_factor
						value = 3
					}
				}
			}
			change_variable = {
				which = experience_bonus
				value = random_factor
			}
			add_experience = experience_bonus

			clear_variable = experience_bonus
			clear_variable = random_factor
		}
	}
}

# -------------------------------------------------
namespace = tec_leaders_replace

# ------------------------------------------------- Replaces from leader_events_2.txt
# This = country
# From = leader
# NOTE: Removed due to redundancy with elitist mechanics
#country_event = { # Aristocratic Elite # 20% Chance for a random positive trait and a random negative trait
#	id = tec_leaders_replace.101
#	hide_window = yes
#
#	is_triggered_only = yes
#
#	trigger = {
#		tec_country_leader_gets_starting_actions = yes
#		from = {
#			tec_leader_gets_starting_actions = { flag = tec_aristo_traits }
#			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
#		}
#		exists = owner
#		# VALID EMPIRE
#		has_valid_civic = civic_aristocratic_elite
#	}
#
#	immediate = {
#		set_country_flag = tec_force_allow_all_traits
#		FROM = {
#			random_list = {
#				80 = { }
#				20 = {
#					add_trait_no_notify = "random_common"
#					add_trait_no_notify = "random_negative"
#					# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Check made in paragon_2.2200.
#					change_background_job = noble
#				}
#			}
#			set_leader_flag = tec_aristo_traits
#		}
#
#		remove_country_flag = tec_force_allow_all_traits
#	}
#}

country_event = { # Technocracy Civic Giving Traits / FROM = Leader
	id = tec_leaders_replace.102
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_directorate_traits }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		OR = {
			has_valid_civic = civic_tec_regular_science_directorate
			has_valid_civic = civic_tec_corporate_innovative
			AND = {
				has_valid_civic = civic_machine_predictive_analysis
				from = {
					tec_is_head_researcher = yes
				}
			}
		}
		FROM = { leader_class = scientist }
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		FROM = {
			add_random_expertise_trait_effect = yes
			set_leader_flag = tec_directorate_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = { # Crusader Spirit Civic Giving Traits / FROM = Leader
	id = tec_leaders_replace.103
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_crusader_traits }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_valid_civic = civic_crusader_spirit
		FROM = {
			leader_class = commander
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		FROM = {
			if = {
				limit = {
					leader_class = commander
				}
				add_trait_no_notify = leader_trait_crusader
			}
			set_leader_flag = tec_crusader_traits
		}

		remove_country_flag = tec_force_allow_all_traits
	}
}

## replace_scopes = { from = leader }
country_event = { # Letters of Marque Civic Giving Traits / FROM = Leader
	id = tec_leaders_replace.104
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_marque_traits } 
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_valid_civic = civic_crusader_spirit_corporate
		FROM = {
			leader_class = commander
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		FROM = {
			if = {
				limit = {
					leader_class = commander
				}
				add_trait_no_notify = leader_trait_corsair
			}
			set_leader_flag = tec_marque_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = { # Remnants - Adds a Archaeostudies Expertise trait / FROM = Leader
	id = tec_leaders_replace.105
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = {
			tec_leader_gets_starting_actions = { flag = tec_remnant_traits }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_ancrel = yes
		has_origin = origin_remnants
		days_passed < 3
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		#FROM = {
		#	add_trait_no_notify = leader_trait_expertise_archaeostudies
		#	set_leader_flag = tec_remnant_traits
		#}
		every_owned_leader = {
			limit = {
				OR = {
					is_councilor_type = councilor_research
					is_councilor_type = councilor_gestalt_cognitive
					is_councilor_type = councilor_tec_aiauth_development
					AND = { # AIAUTH Fallback
						is_ruler = no
						has_trait = leader_trait_tec_aiauth_node
						leader_class = scientist
					}
				}
			}
			add_trait_no_notify = leader_trait_expertise_archaeostudies
			set_leader_flag = tec_remnant_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = {	# Champions of the Empire - Adds a random common trait / FROM = Leader
	id = tec_leaders_replace.106
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = {
			tec_leader_gets_starting_actions = { flag = tec_A_CotE_traits }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_tradition = tr_aptitude_champions_of_the_empire
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		FROM = {
			add_trait_no_notify = "random_common"
			set_leader_flag = tec_A_CotE_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = {	# Tactical Algorithms - Adds the Tactical Algorithms trait
	id = tec_leaders_replace.107
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_tactical_algorythm_traits } 
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_valid_civic = civic_machine_tactical_algorithms
		FROM = {
			leader_class = commander
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		FROM = {
			if = {
				limit = {
					leader_class = commander
				}
				add_trait_no_notify = leader_trait_tactical_algorithms
			}
			set_leader_flag = tec_tactical_algorythm_traits
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = {	# Storm Chasers - Adds the Storm Rider trait
	id = tec_leaders_replace.108
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = { 
			tec_leader_gets_starting_actions = { flag = tec_storm_chasers_traits } 
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		exists = owner
		# VALID EMPIRE
		has_origin = origin_storm_chasers
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		from = {
			switch = {
				trigger = leader_class
				commander = {
					add_trait_no_notify = leader_trait_storm_rider_commander
					}
				scientist = {
					add_trait_no_notify = leader_trait_storm_rider_scientist
				}
				official = {
					add_trait_no_notify = leader_trait_storm_rider_official
				}
			}
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}


# New Leaders Get Cyborg Trait (Cybernetic Creed)
# this: country
# from: leader
country_event = {
	id = tec_leaders_replace.machine_age_2235
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = {
			tec_leader_gets_starting_actions = { flag = tec_ritualistic_implants_cyborg_trait }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		has_origin = origin_cybernetic_creed
		from = {
			OR = {
				has_ethic = ethic_spiritualist
				has_trait = leader_trait_tec_aiauth_ruler
			}
			NOT = { has_trait = leader_trait_tec_aiauth_node }
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		from = {
			change_background_ethic = ethic_spiritualist
			remove_trait = leader_trait_ritualistic_implants_cyborg
			remove_trait = leader_trait_tec_aiauth_ritualistic_implants_cyborg
			if = {
				limit = {
					tec_is_aiauth_node = yes
				}
				add_trait_no_notify = leader_trait_tec_aiauth_ritualistic_implants_cyborg
			}
			else = {
				add_trait_no_notify = leader_trait_ritualistic_implants_cyborg

			}
			set_leader_flag = tec_ritualistic_implants_cyborg_trait
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}

country_event = {
	id = tec_leaders_replace.cyber_22
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		tec_country_leader_gets_starting_actions = yes
		from = {
			tec_leader_gets_starting_actions = { flag = tec_leader_trait_limited_cyborg_trait }
			tec_leader_first_staring_actions_done = no # called once, and only on new leaders
		}
		has_policy_flag = cyberization_standards_limited
		from = {
			has_ethic = ethic_spiritualist
			has_trait = leader_trait_cyborg
		}
	}

	immediate = {
		set_country_flag = tec_force_allow_all_traits
		from = {
			remove_trait = leader_trait_cyborg
			remove_trait = leader_trait_tec_superior_cybernetics_main
			add_trait_no_notify = leader_trait_limited_cyborg
			set_leader_flag = tec_leader_trait_limited_cyborg_trait
		}
		remove_country_flag = tec_force_allow_all_traits
	}
}


# Deprecated
# ========================================================
	#country_event = {	# Now handled by vanilla
	#	id = tec_leaders.4
	#	hide_window = yes
	#	is_triggered_only = yes
	#	trigger = {
	#		always = no
	#		# moved to in immediate effect
	#		exists = owner
	#		tec_is_default_country = yes
	#	}
	#	immediate = {
	#		FROM = {
	#			if = {
	#				limit = {
	#					# on consecutive iterations, aka when an empire might get new things from civics, etc
	#					is_variable_set = tec_leader_starting_level_modifier
	#					check_variable = {
	#						which = tec_leader_starting_level_modifier
	#						value < value:tec_leader_starting_skill_add
	#					}
	#				}
	#				set_variable = {
	#					which = tec_difference
	#					value = value:tec_leader_starting_skill_add
	#				}
	#				subtract_variable = {
	#					which = tec_difference
	#					value = tec_leader_starting_level_modifier
	#				}
	#				if = {
	#					limit = {
	#						is_pool_leader = yes
	#					}
	#					# add difference levels
	#					add_skill = tec_difference
	#				}
	#				else = {
	#					# add 200 xp x difference of starting level
	#					multiply_variable = {
	#						which = tec_difference
	#						value = 200
	#					}
	#					add_experience = tec_difference
	#				}
	#				clear_variable = tec_difference
	#			}
	#			else_if = {
	#				limit = {
	#					NOT = { is_variable_set = tec_leader_starting_level_modifier}
	#					tec_leader_gets_starting_actions = yes
	#					root = {
	#						tec_country_leader_gets_starting_actions = { flag = tec_no_starting_skill_modification }
	#					}
	#				}
	#				while = {
	#					count = value:tec_leader_starting_skill_add
	#					if = {
	#						limit = {
	#							is_pool_leader = yes
	#							has_skill < 3 # block from spawning with veteran trait automatically
	#						}
	#						add_skill = 1
	#					}
	#					else = {
	#						add_skill_without_trait_selection = 1
	#					}
	#				}
	#			}
	#			set_variable = {
	#				which = tec_leader_starting_level_modifier
	#				value = value:tec_leader_starting_skill_add
	#			}
	#		}
	#	}
	#}
# /