namespace = paragon

####################
### THE BEHOLDER ###
####################

# Abort Beholder chain if pre-sapient planet is colonized by another - fired from on_colonized
# Or add Beholder building if colonized by chain owner
# Scope = Planet
# paragon.100


# Abort Beholder chain if pre-sapients get uplifted - fired from on_uplift_completion
# Scope = planet_event
# From = uplifted species (pre-modification)
# This = planet scope
# paragon.101


# Abort Beholder chain
# paragon.102

#Anomaly researched, opt out or send down a ship - fired from anomaly research (paragon_beholder_category)
# paragon.3

#Temple of Whispers found 
# paragon.4

##BEFRIENDING
#Trust Within Sight
# paragon.5

##PROCLAIMING DIVINITY
#Success
# paragon.10
#Failure
# paragon.11

##MAKE THEM MOVE
# paragon.15

#WHISPER_TEMPLE_STUDY finished
# paragon.20

##THE WHISPERING 1
# paragon.25
#THE WHISPERING 2
# paragon.26

#The Beholder
# paragon.30

#Energy given
#Create and add The Beholder Leader
# paragon.31

# Beholder Planetfall
# Moves Beholder Ship to targeted planet
# paragon.99

# Destroy Beholder's ship if Beholder dies
# Fired from on_actions: on_leader_death and on_leader_fired
# paragon.2

# Beholder Spawn
# paragon.1

planet_event = {
	id = paragon.50
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_building = building_the_beholder
		has_planet_flag = psi_inoculating_pops
		exists = event_target:beholder_leader
	}

	immediate = {
		set_saved_date = {
			key = beholder_psi_pops_timer
			days_from_present = 180
			expires = 180
		}
		random_owned_pop = {
			limit = {
				is_organic_species = yes
				is_being_assimilated = no
				is_being_purged = no
				tec_is_total_psionic_species = no
				tec_is_cyborg_species = no
				NOR = {
					has_trait = trait_hive_mind
				}
			}
			modify_species = {
				remove_trait = trait_latent_psionic
				add_trait = trait_psionic
			}
		}
		create_message = {
			type = MESSAGE_POPS_INOCULATED
			localization = MESSAGE_POPS_INOCULATED_DESC
			days = 20
			target = root
			variable = {
				type = name
				localization = PLANET
				scope = root
			}
		}
		if = {
			limit = {
				count_owned_pop = {
					count = 0
					limit = {
						is_organic_species = yes
						is_being_assimilated = no
						is_being_purged = no
						tec_is_total_psionic_species = no
						tec_is_cyborg_species = no
						NOR = {
							has_trait = trait_hive_mind
						}
					}
				}
			}
			remove_planet_flag = psi_inoculating_pops
			remove_planet_flag = beholder_psi_pops_timer
			set_saved_date = {
				key = beholder_psi_pops_cooldown_timer
				days_from_present = 180
				expires = 180
			}
		}
		else = {
			planet_event = {
				id = paragon.50
				days = 180
			}
		}
	}
}


###########################
### ASTROCREATOR AZARYN ###
###########################

# On_five_year_pulse_country
# Chance to start Azaryn chain
# paragon.200

# Dead comms 1
# paragon.202

# Dead comms 2
# paragon.204

# Unknown comms source found.
# paragon.206

# Open comms. Warm greetings.
# paragon.208

# Response to answer.
#  paragon.210

# Azaryn info. What is Azathea/Astrocreation/Your ship?
# paragon.212
# Bacteria project done.
# paragon.214

# Open comms.
# To escape death, would you take the life of another?
# paragon.216

# Response to answer. Get Rafflesia project
# paragon.218

# Rafflesia project done.
# paragon.220

# GJ with rafflesia. Sacrifice your people to save lives on a massive scale?
# paragon.222
# [...]
# Can hesitation be merited?
# paragon.224

# [...]
# Quiz done
# paragon.226

# [...]
# Azaryn: HIRE/DISMISS
# paragon.228

# [...]
# Azaryn sets a course for your capital world.
# paragon.230

# First terraformation nucleus expended
# Azaryn withers
# paragon.232

# Second terraformation nucleus expended
# Azaryn's health deteriorates further
# paragon.235

# Last terraformation nucleus expended
# Azaryn dies and the dome ship withers
# paragon.240

# Comms close
# Give Contained Ecosphere
# paragon.241

# Astrocreator Azaryn Terraforming
# Begin transfixing terraform nucleus
# paragon.250

# Astrocreator Azaryn Terraforming Cancel Order
# paragon.251

# Astrocreator Azaryn
# Terraforming begins
# paragon.252

# Terraformation completed
# Fires from on_terraforming_complete in 00_on_actions
# This = Planet
# From = Terraforming country
# paragon.253

# Nucleus sample stolen
# paragon.260

# Sample returned
# paragon.261

# Sample researched
# paragon.265

# Facility overrun
# paragon.270

# Azaryn informed - sooner
# paragon.272
# paragon.273

# Green Terror
# paragon.275

# paragon.280

#country_event = { #UTILITY - kill leader when the dome dies
# paragon.285

#country_event = { #UTILITY EVENT - destroy dome ship if you dismiss the sadtoid
# paragon.290

#country_event = { #UTILITY EVENT - destroy dome ship if you dismiss the sadtoid
# paragon.295


########################
## AGENDAS and TRADITIONS

# on_agenda_finished, award XP to all leaders if country has "tr_statecraft_amongst_peers".
# id = paragon.402

# on_colonized, give boost modifier if "Superior Colonies" Agenda is active.
# id = paragon.403

# on_agenda_finished "Superior Colonies", check for young Colonies that should get the boost modifier.
# paragon.404

# on_tradition_picked "tr_statecraft_inspiring_agendas", show a notification that they're available.
country_event = {
	id = paragon.405
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_country_flag = has_picked_tr_statecraft_inspiring_agendas }
		has_tradition = tr_statecraft_inspiring_agendas
	}

	immediate = {
		# Makes sure this is only triggered ONCE and only when tr_statecraft_inspiring_agendas was unlocked.
		set_country_flag = has_picked_tr_statecraft_inspiring_agendas

		create_message = {
			type = COUNCIL_AGENDA_AVAILABLE
			localization = MESSAGE_COUNCIL_AGENDA_AVAILABLE_UNLOCKED_INSPIRING_AGENDAS
			days = 30
			# Unfortunately can't set message type to: _MESSAGE_TYPE_COUNCIL_AGENDA_READY_, which would enable Left-click to open Council.
		}
	}
}


########################
## TOASTS

#leader_event = { # Leader Hired Toast Message
# paragon.450


########################
## ELECTIONS

# On Election start, set flags for rulers and councilors.
# paragon.500

# On Election end, clean up paragon.500 flags and reset cooldowns for democracies.
#country_event = {
#	id = paragon.501


########################
## LEADER DEATH

# Launch correct death event for certain leaders
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.549
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_paragon_dlc = yes
		is_country_type = default
		exists = from
		from = {
			is_pool_leader = no
			NOT = { leader_class = envoy }
			leader_years_of_service >= 2
			NOT = {
				has_leader_flag = leader_death_events_blocked
			}
			or = {
				has_skill >= 4
				is_ruler = yes
				has_leader_flag = renowned_leader
				has_leader_flag = legendary_leader
			}
		}
	}

	immediate = {
		random_list = {
			80 = { # Do nothing
				# Rulers should almost always get a funeral
				modifier = {
					factor = 0
					from = { is_ruler = yes }
				}
				# Make repeated funerals less likely
				modifier = {
					factor = 5
					has_country_flag = recently_had_leader_funeral
				}
			}
			0 = { # Funeral event
				# Rulers should almost always get a funeral
				modifier = {
					add = 1000
					from = { is_ruler = yes }
				}

				# Slightly increase odds for more interesting leaders
				modifier = {
					add = 10
					from = { is_councilor = yes }
				}
				modifier = {
					add = 10
					from = { has_leader_flag = renowned_leader }
				}
				modifier = {
					add = 20
					from = { has_leader_flag = legendary_leader }
				}

				# Increase chance for leaders of higher level
				modifier = {
					add = 10
					from = { has_skill >= 4 }
				}
				modifier = {
					add = 20
					from = { has_skill >= 6 }
				}
				modifier = {
					add = 30
					from = { has_skill >= 8 }
				}
				modifier = {
					add = 40
					from = { has_skill >= 10 }
				}

				# Increase chance for leaders that have served the country for a long time
				modifier = {
					add = 10
					from = { leader_years_of_service >= 10 }
				}
				modifier = {
					add = 50
					from = { leader_years_of_service >= 25 }
				}
				modifier = {
					add = 100
					from = { leader_years_of_service >= 50 }
				}
				modifier = {
					add = 300
					from = { leader_years_of_service >= 100 }
				}

				set_timed_country_flag = {
					flag = recently_had_leader_funeral
					years = 5
				}

				# Make a clone since the original is going to be deleted before any followup event is triggered.
				create_country = {
					name = "NAME_dead_leader_country"
					type = faction
					auto_delete = yes
				}
				last_created_country = {
					clone_leader = {
						target = from
						effect = {
							set_immortal = yes
							save_event_target_as = dead_leader_clone
						}
					}
				}
				last_created_leader = {
					set_owner = root
					# This is a hack to make the leader not be added to player country.
					# We must kill the leader once the event chain is done
					exile_leader_as = dead_leader_clone_exile
					set_years_served = from # Copy years served from the original
					if = {
						limit = {
							from = { is_ruler = yes }
						}
						set_leader_flag = was_ruler_before_death
					}
				}

				if = {
					limit = {
						is_gestalt = no
					}
					from = { set_leader_flag = use_unspecific_death_reason }
					country_event = { id = paragon.550 scopes = { from = event_target:dead_leader_clone } }
				}
				else_if = {
					limit = {
						is_hive_empire = yes
					}
					from = { set_leader_flag = use_unspecific_death_reason }
					country_event = { id = paragon.571 scopes = { from = event_target:dead_leader_clone } }
				}
				else_if = {
					limit = {
						from = {
							species = {
								or = {
									is_species_class = ROBOT
									is_species_class = MACHINE
								}
							}
						}
					}
					from = { set_leader_flag = use_unspecific_death_reason }
					country_event = { id = paragon.570 scopes = { from = event_target:dead_leader_clone } }
				}
				else = {
					# Clean up the clone since we aren't using it.
					event_target:dead_leader_clone = {
						kill_leader = { show_notification = no }
					}
				}
			}
		}
	}
}

# Death of great leader
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.550
	title = "paragon.550.name"
	desc = "paragon.550.desc"
	picture = GFX_evt_news_room
	show_sound = event_life_support_fail
	is_triggered_only = yes

	immediate = {
		from = {
			# Private funeral should always be available
			set_leader_flag = funeral_option_private
			set_variable = { which = num_funeral_options_added value = 1 }

			# Rulers should always have the public funeral option
			if = {
				limit = {
					has_leader_flag = was_ruler_before_death
				}
				set_leader_flag = funeral_option_public
				change_variable = { which = num_funeral_options_added value = 1 }
			}

			# Randomize additional options until we have 4 options in total
			while = {
				count = 3 # fail safe in case the limit somehow fails
				limit = {
					check_variable = {
						which = num_funeral_options_added
						value < 3
					}
				}

				change_variable = { which = num_funeral_options_added value = 1 }

				random_list = {
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_public
						}
						set_leader_flag = funeral_option_public
					}
					30 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_negative_traits
						}
						modifier = {
							factor = 0
							num_leader_traits = {
								value < 3
								negative = yes
								count_tiers = yes
							}
						}
						set_leader_flag = funeral_option_negative_traits
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_materialist
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_materialist
								root = { is_materialist = yes }
							}
						}
						modifier = {
							factor = 0
							species = {
								OR = {
									is_species_class = ROBOT
									is_species_class = MACHINE
								}
							}
						}
						set_leader_flag = funeral_option_materialist
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_spiritualist
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_spiritualist
								root = { is_spiritualist = yes }
							}
						}
						set_leader_flag = funeral_option_spiritualist
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_militarist
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_militarist
								root = { is_militarist = yes }
							}
						}
						set_leader_flag = funeral_option_militarist
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_pacifist
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_pacifist
								root = { is_pacifist = yes }
							}
						}
						set_leader_flag = funeral_option_pacifist
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_xenophobe
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_xenophobe
								root = { is_xenophobe = yes }
							}
						}
						set_leader_flag = funeral_option_xenophobe
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_xenophile
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_xenophile
								root = { is_xenophile = yes }
							}
						}
						set_leader_flag = funeral_option_xenophile
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_authoritarian
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_authoritarian
								root = { is_authoritarian = yes }
							}
						}
						set_leader_flag = funeral_option_authoritarian
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_egalitarian
						}
						modifier = {
							factor = 0
							NOR = {
								has_ethic = ethic_egalitarian
								root = { is_egalitarian = yes }
							}
						}
						set_leader_flag = funeral_option_egalitarian
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_megacorp
						}
						modifier = {
							factor = 0
							root = { is_megacorp = no }
						}
						set_leader_flag = funeral_option_megacorp
					}
					10 = {
						modifier = {
							factor = 0
							has_leader_flag = funeral_option_plantoid_fungoid
						}
						modifier = {
							factor = 0
							species = {
								NOR = {
									is_species_class = PLANT
									is_species_class = FUN
									is_species_class = PRE_PLANT
									is_species_class = PRE_FUN
								}
							}
						}
						modifier = {
							factor = 0
							root = {
								NOT = {
									any_owned_planet = {
										is_colony = yes
									}
								}
							}
						}
						set_leader_flag = funeral_option_plantoid_fungoid
					}
				}
			}
		}
	}

	# A private funeral
	option = {
		name = paragon.550.b
		trigger = {
			from = { has_leader_flag = funeral_option_private }
		}
		hidden_effect = {
			country_event = { id = paragon.552 scopes = { from = from } }
		}
	}

	# A public funeral
	option = {
		name = paragon.550.a
		trigger = {
			from = { has_leader_flag = funeral_option_public }
		}

		inline_script = {
			script = "events/resource_cost_with_allow"
			RESOURCE = energy
			AMOUNT = value:funeral_cost_high
		}

		hidden_effect = {
			country_event = { id = paragon.551 scopes = { from = from } }
		}
	}

	# Negative traits
	option = {
		name = paragon.550.c
		trigger = {
			from = { has_leader_flag = funeral_option_negative_traits }
		}
		hidden_effect = {
			country_event = { id = paragon.553 scopes = { from = from } }
		}
	}

	# Materialist
	option = {
		name = paragon.550.d
		trigger = {
			from = { has_leader_flag = funeral_option_materialist }
		}
		icon = {
			icon = GFX_ethics_materialist
			text = ethic_materialist
		}
		hidden_effect = {
			country_event = { id = paragon.554 scopes = { from = from } }
		}
	}

	# Spiritualist
	option = {
		name = paragon.550.e
		trigger = {
			from = { has_leader_flag = funeral_option_spiritualist }
		}
		icon = {
			icon = GFX_ethics_spiritualist
			text = ethic_spiritualist
		}
		hidden_effect = {
			country_event = { id = paragon.555 scopes = { from = from } }
		}
	}

	# Militarist
	option = {
		name = paragon.550.f
		trigger = {
			from = { has_leader_flag = funeral_option_militarist }
		}
		icon = {
			icon = GFX_ethics_militarist
			text = ethic_militarist
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_medium
		}

		hidden_effect = {
			country_event = { id = paragon.556 scopes = { from = from } }
		}
	}

	# Pacifist
	option = {
		name = paragon.550.g
		trigger = {
			from = { has_leader_flag = funeral_option_pacifist }
		}
		icon = {
			icon = GFX_ethics_pacifist
			text = ethic_pacifist
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_medium
		}

		hidden_effect = {
			country_event = { id = paragon.557 scopes = { from = from } }
		}
	}

	# Xenophobe
	option = {
		name = paragon.550.h
		trigger = {
			from = { has_leader_flag = funeral_option_xenophobe }
		}
		icon = {
			icon = GFX_ethics_xenophobe
			text = ethic_xenophobe
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_low
		}

		hidden_effect = {
			country_event = { id = paragon.558 scopes = { from = from } }
		}
	}

	# Xenophile
	option = {
		name = paragon.550.i
		trigger = {
			from = { has_leader_flag = funeral_option_xenophile }
		}
		icon = {
			icon = GFX_ethics_xenophile
			text = ethic_xenophile
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_low
		}

		hidden_effect = {
			country_event = { id = paragon.559 scopes = { from = from } }
		}
	}

	# Authoritarian
	option = {
		name = paragon.550.j
		trigger = {
			from = { has_leader_flag = funeral_option_authoritarian }
		}
		icon = {
			icon = GFX_ethics_authoritarian
			text = ethic_authoritarian
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_medium
		}

		hidden_effect = {
			country_event = { id = paragon.560 scopes = { from = from } }
		}
	}

	# Egalitarian
	option = {
		name = paragon.550.k
		trigger = {
			from = { has_leader_flag = funeral_option_egalitarian }
		}
		icon = {
			icon = GFX_ethics_egalitarian
			text = ethic_egalitarian
		}
		hidden_effect = {
			country_event = { id = paragon.561 scopes = { from = from } }
		}
	}

	# Megacorporation
	option = {
		name = paragon.550.l
		trigger = {
			is_megacorp = yes
		}

		inline_script = {
			script = events/resource_cost_with_allow
			RESOURCE = energy
			AMOUNT = value:funeral_cost_medium
		}

		hidden_effect = {
			country_event = { id = paragon.562 scopes = { from = from } }
		}
	}

	# Plantoid/Fungoid
	option = {
		name = paragon.550.m
		trigger = {
			from = { has_leader_flag = funeral_option_plantoid_fungoid }
		}
		hidden_effect = {
			country_event = { id = paragon.563 scopes = { from = from } }
		}
	}
}

# Death of great leader - A public funeral
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.551
	title = "paragon.551.name"
	desc = "paragon.551.desc"
	picture = GFX_evt_coronation
	show_sound = event_factions
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.551.a
		add_modifier = {
			modifier = paragon_death_public_funeral
			years = 5
		}
	}
}

# Death of great leader - A private funeral
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.552
	title = "paragon.552.name"
	desc = "paragon.552.desc"
	picture = GFX_evt_metropolis
	show_sound = event_conversation
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.552.a
		add_modifier = {
			modifier = paragon_death_private_funeral
			years = 5
		}
	}
}

# Death of great leader - Negative traits
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.553
	title = "paragon.553.name"
	desc = "paragon.553.desc"
	picture = GFX_evt_news_room
	show_sound = event_conversation
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.553.a
		add_modifier = {
			modifier = paragon_death_good_tidings
			years = 5
		}
	}
}

# Death of great leader - Materialist
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.554
	title = "paragon.554.name"
	desc = "paragon.554.desc"
	picture = GFX_evt_society_research
	show_sound = event_laboratory_sound
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.554.a
		add_modifier = {
			modifier = paragon_death_pragmatic_approach
			years = 5
		}
	}
}

# Death of great leader - Spiritualist
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.555
	title = "paragon.555.name"
	desc = "paragon.555.desc"
	picture = GFX_evt_coronation
	show_sound = event_factions
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.555.a
		add_modifier = {
			modifier = paragon_death_harmonious_passing
			years = 5
		}
	}
}

# Death of great leader - Militarist
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.556
	title = "paragon.556.name"
	desc = "paragon.556.desc"
	picture = GFX_evt_space_funeral
	show_sound = event_ship_thrusters
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.556.a
		add_modifier = {
			modifier = paragon_death_military_funeral
			years = 5
		}
	}
}

# Death of great leader - Pacifist
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.557
	title = "paragon.557.name"
	desc = "paragon.557.desc"
	picture = GFX_evt_board_meeting
	show_sound = event_administrative_work
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.557.a
		add_modifier = {
			modifier = paragon_death_foundation_peace
			years = 10
		}
	}
}

# Death of great leader - Xenophobe
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.558
	title = "paragon.558.name"
	desc = "paragon.558.desc"
	picture = GFX_evt_coronation
	show_sound = event_conversation
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.558.a
		add_modifier = {
			modifier = paragon_death_reignited_traditions
			years = 5
		}
	}
}

# Death of great leader - Xenophile
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.559
	title = "paragon.559.name"
	desc = "paragon.559.desc"
	picture = GFX_evt_ship_travel
	show_sound = event_ship_thrusters
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.559.a
		add_modifier = {
			modifier = paragon_death_to_the_stars
			years = 5
		}
	}
}

# Death of great leader - Authoritarian
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.560
	title = "paragon.560.name"
	desc = "paragon.560.desc"
	picture = GFX_evt_grand_speech
	show_sound = evn_ove_grand_speech
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.560.a
		add_modifier = {
			modifier = paragon_death_towering_memorial
			years = 10
		}
	}
}

# Death of great leader - Egalitarian
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.561
	title = "paragon.561.name"
	desc = "paragon.561.desc"
	picture = GFX_evt_obelisk_tourists
	show_sound = event_conversation
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.561.a
		add_modifier = {
			modifier = paragon_death_name_wall
			years = 5
		}
	}
}

# Death of great leader - Megacorporation
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.562
	title = "paragon.562.name"
	desc = "paragon.562.desc"
	picture = GFX_evt_metropolis
	show_sound = event_conversation
	is_triggered_only = yes

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.562.a
		add_modifier = {
			modifier = paragon_death_landmark_building
			years = 5
		}
	}
}

# Death of great leader - Plantoid/Fungoid
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.563
	title = "paragon.563.name"
	desc = "paragon.563.desc"
	picture = GFX_evt_tropical
	show_sound = event_default
	is_triggered_only = yes

	immediate = {
		random_owned_planet = {
			limit = {
				is_colony = yes
			}
			save_event_target_as = burial_planet
		}
	}

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.563.a
		event_target:burial_planet = {
			add_modifier = {
				modifier = paragon_death_rejuvenation
				years = 5
			}
		}
	}
}

# Death of great gestalt machine leader
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.570
	title = "paragon.570.name"
	desc = "paragon.570.desc"
	picture = GFX_evt_ship_in_orbit_2
	show_sound = event_power_down
	is_triggered_only = yes

	trigger = { is_machine_empire = yes }

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.570.a
		add_modifier = {
			modifier = paragon_death_virtual_advisors
			years = 5
		}
	}
}

# Death of great gestalt hive leader
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.571
	title = "paragon.571.name"
	desc = "paragon.571.desc"
	picture = GFX_evt_hive_mind
	show_sound = event_life_support_fail
	is_triggered_only = yes

	trigger = { is_hive_empire = yes }

	after = {
		# Clean up the clone since we aren't using it anymore
		from = { kill_leader = { show_notification = no } }
	}

	option = {
		name = paragon.571.a
		add_modifier = {
			modifier = paragon_death_the_hive_endures
			years = 5
		}
	}
}

# Roll if the default for each leader should be death or retirement
# on_leader_death
# This = Country
# From = Leader
# paragon.590


# on_leader_death
# This = Country
# From = Leader
country_event = {	# PARAGONS To do review
	id = paragon.600
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			is_gestalt_node = yes
			NOT = {
				has_leader_flag = culled_node
			}
		}
	}

	immediate = {
		from = {
			switch = {
				trigger = is_councilor_type
				councilor_gestalt_growth = {
					root = {
						country_create_gestalt_councilor = {
							CLASS = official
							COUNCIL_POS = councilor_gestalt_growth
							DESC = councilor_gestalt_growth_desc
						}
					}
				}
				councilor_gestalt_cognitive = {
					root = {
						country_create_gestalt_councilor = {
							CLASS = scientist
							COUNCIL_POS = councilor_gestalt_cognitive
							DESC = councilor_gestalt_cognitive_desc
						}
					}
				}
				councilor_gestalt_legion = {
					root = {
						country_create_gestalt_councilor = {
							CLASS = commander
							COUNCIL_POS = councilor_gestalt_legion
							DESC = councilor_gestalt_legion_desc
						}
					}
				}
				councilor_gestalt_regulatory = {
					root = {
						country_create_gestalt_councilor = {
							CLASS = official
							COUNCIL_POS = councilor_gestalt_regulatory
							DESC = councilor_gestalt_regulatory_desc
						}
					}
				}
			}
		}
	}
}



# on_monthly_pulse_country
# this = country
country_event = {	# PARAGONS To do review
	id = paragon.605
	hide_window = yes
	trigger = {
		is_gestalt = yes
		OR = {	#Evolved
			tec_is_default_country = yes
			is_country_type = fallen_empire
		}
		NOR = {
			has_councilor = {
				COUNCILOR = councilor_gestalt_growth
			}
			has_councilor = {
				COUNCILOR = councilor_gestalt_cognitive
			}
			has_councilor = {
				COUNCILOR = councilor_gestalt_legion
			}
			has_councilor = {
				COUNCILOR = councilor_gestalt_regulatory
			}
		}
	}

	is_triggered_only = yes

	immediate = {
		# Growth Node
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_gestalt_growth
					}
				}
			}
			country_create_gestalt_councilor = {
				CLASS = official
				COUNCIL_POS = councilor_gestalt_growth
				DESC = councilor_gestalt_growth_desc
			}
		}
		# Cognitive Node
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_gestalt_cognitive
					}
				}
			}
			country_create_gestalt_councilor = {
				CLASS = scientist
				COUNCIL_POS = councilor_gestalt_cognitive
				DESC = councilor_gestalt_cognitive_desc
			}
		}
		# Legion Node
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_gestalt_legion
					}
				}
			}
			country_create_gestalt_councilor = {
				CLASS = commander
				COUNCIL_POS = councilor_gestalt_legion
				DESC = councilor_gestalt_legion_desc
			}
		}
		# Regulatory Node
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_gestalt_regulatory
					}
				}
			}
			country_create_gestalt_councilor = {
				CLASS = official
				COUNCIL_POS = councilor_gestalt_regulatory
				DESC = councilor_gestalt_regulatory_desc
			}
		}
	}
}

########################


##############################
### RANDOM LEADER EVENTS #####
##############################

# Fires from on_decade_pulse_country
# paragon.998

# paragon.999

# Dysfunctional Council
# paragon.1000

# Inspired by Cosmic Phenomenon
# paragon.1005


# Confiscated Contraband
# paragon.1010

# Unified Council
# paragon.1015

# Personal Development
# paragon.1020

# Scientific Progress
# paragon.1025

# Leaked Information
# paragon.1030

# Trendsetter
# paragon.1035

# Echo in Eternity
# paragon.1040

# Idiosyncratic Tendencies
# paragon.1045

# Empire-Wide Scandal
# paragon.1050
