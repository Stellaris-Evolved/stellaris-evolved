# events\!!_game_start.txt

namespace = game_start


country_event = {
	id = game_start.33
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		is_country_type = default
	}

	immediate = {
		if = {
			limit = { #Make sure you are unlikely to be boxed in completely
				OR = {
					has_origin = origin_hegemon
					has_origin = origin_common_ground
				}
				capital_scope = {
					solar_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 1
							max_distance <= 15
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 15
							max_distance <= 20
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 20
							max_distance <= 25
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 25
							max_distance <= 40
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			else_if = {
				limit = {
					any_system = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
				}
				random_system = {
					limit = {
						distance = {
							source = root.capital_scope.solar_system
							type = euclidean
							min_distance >= 40
							max_distance <= 60
						}
						NOT = { has_hyperlane_to = root.capital_scope.solar_system }
						NOT = { exists = owner }
					}
					save_event_target_as = hyperlane_system
					add_hyperlane = {
						from = this
						to = root.capital_scope.solar_system
					}
				}
			}
			if = {
				limit = {
					exists = event_target:hyperlane_system
					event_target:hyperlane_system = {
						NOT = {
							any_neighbor_system = {
								NOT = { exists = owner }
							}
						}
					}
				}
				event_target:hyperlane_system = {
					random_system = {
						limit = {
							distance = {
								source = prev
								type = euclidean
								min_distance >= 1
								max_distance <= 25
							}
							NOT = { has_hyperlane_to = prev }
							NOT = { exists = owner }
						}
						add_hyperlane = {
							from = this
							to = prev
						}
					}
				}
			}
		}
		if = {
			limit = {
				has_origin = origin_default
				NOT = { has_technology = tech_planetary_unification }
			}
			add_research_option = tech_planetary_unification
		}
		if = {
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_mining_station
					has_planet_flag = starting_mining_target
					has_mining_station = no
					root = {
						is_low_tech_start = no
					}
				}
				create_mining_station = {
					owner = ROOT
				}
			}
			every_planet_within_border = {
				limit = {
					has_deposit_for = shipclass_research_station
					has_planet_flag = starting_research_target
					has_research_station = no
					root = {
						is_low_tech_start = no
					}
				}
				create_research_station = {
					owner = ROOT
				}
			}
		}

		if = {
			limit = {
				has_origin = origin_necrophage
				NOT = { has_civic = civic_fanatic_purifiers }
				NOT = { has_ai_personality_behaviour = purger }
			}
			country_event = { id = necroids.2 days = 3420 } #tell them about the necrophage mechanic
		}
		if = {
			limit = {
				has_origin = origin_necrophage
				is_ai = yes
			}
			country_event = { id = necroids.6 days = 1800 }
			country_event = { id = necroids.6 days = 3600 }
			country_event = { id = necroids.6 days = 5400 }
			country_event = { id = necroids.6 days = 7200 }
		}
		if = {
			limit = {
				has_origin = origin_necrophage
				OR = {
					has_country_flag = necrophage_commonwealth
					has_country_flag = necrophage_une
				}
			}
			random_country = {
				limit = {
					OR = {
						AND = {
							has_country_flag = human_1
							prev = { has_country_flag = necrophage_commonwealth }
						}
						AND = {
							has_country_flag = human_2
							prev = { has_country_flag = necrophage_une }
						}
					}
				}
				random_owned_pop = {
					limit = {
						exists = this
						NOT = { is_same_species = prev }
					}
					species = { save_event_target_as = correct_prepatent_species }
				}
			}
			every_owned_pop = {
				limit = {
					NOT = { is_same_species = owner_species }
				}
				planet = {
					create_pop = {
						species = event_target:correct_prepatent_species
					}
				}
				kill_pop = yes
			}
			remove_country_flag = necrophage_une
			remove_country_flag = necrophage_commonwealth
		}
		if = {
			limit = {
				has_origin = origin_slavers
			}
			capital_scope = { generate_slaver_bonus = yes }
		}
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_hive_stargazers
					is_hyperspace_specialty_empire = yes
				}
			}
			every_system = {
				limit = {
					distance = {
						source = root.capital_scope
						use_bypasses = no
						max_jumps = 3
					}
				}
				root = { set_visited = prev }
			}
		}

		# if = { # they start with fanatic purifiers in evolved
		# 	limit = {
		# 		is_ai = yes
		# 		has_country_flag = necrophage_start_empire
		# 		has_ethic = ethic_fanatic_xenophobe
		# 		has_ethic = ethic_militarist
		# 	}
		# 	force_remove_civic = civic_cutthroat_politics
		# 	force_add_civic = civic_fanatic_purifiers
		# }
	}
}

country_event = {
	id = game_start.60
	hide_window = yes
	trigger = {
		tec_is_default_country = yes
		#selectable = { host_has_dlc = "Galactic Paragons" }
	}

	is_triggered_only = yes

	immediate = {
		set_variable = {
			which = paragon_chance_negative
			value = 0
		}

		# Give Empire the starting Council Agenda, and progress it to about 1-2 years from finishing.
		if = {
			limit = { is_gestalt = yes }
			set_council_agenda = agenda_infinite_opportunities_gestalt
		}
		else = {
			set_council_agenda = agenda_infinite_opportunities

			#if = {
			#	limit = {
			#		tec_is_aiauth_empire = no
			#	}
			#	# Prefer a Scientist as Head of Research (otherwise picks your Home planet Governing leader).
			#	random_owned_leader = {
			#		limit = {
			#			leader_class = scientist
			#			is_ruler = no
			#		}
			#		set_council_position = councilor_research
			#	}
			#}
		}
		add_council_agenda_progress = 6000
	}
}

country_event = {
	id = game_start.64
	hide_window = yes
	trigger = {
		has_civic = civic_private_healthcare_corporate
		is_country_type = default
	}

	is_triggered_only = yes

	immediate = {
		give_technology = { message = no tech = tech_frontier_health }
		add_research_option = tech_subdermal_stimulation
	}
}

# Create Gestalt Council.
country_event = {
	id = game_start.70
	hide_window = yes
	trigger = {
		is_gestalt = yes
		OR = {
			tec_is_default_country = yes
			is_country_type = fallen_empire
		}
	}

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				has_paragon_dlc = yes
			}
			ruler = {
				assign_gestalt_ruler_subclass_trait = yes
			}
		}
		# Creates Growth Councilor
			country_create_gestalt_councilor = {
				CLASS = official
				COUNCIL_POS = councilor_gestalt_growth
				DESC = councilor_gestalt_growth_desc
			}
		# /
		# Creates Research Councilor
			country_create_gestalt_councilor = {
				CLASS = scientist
				COUNCIL_POS = councilor_gestalt_cognitive
				DESC = councilor_gestalt_cognitive_desc
			}
		# /
		# Creates Naval Councilor
			country_create_gestalt_councilor = {
				CLASS = commander
				COUNCIL_POS = councilor_gestalt_legion
				DESC = councilor_gestalt_legion_desc
			}
		# /
		# Creates Diplo Councilor
			country_create_gestalt_councilor = {
				CLASS = official
				COUNCIL_POS = councilor_gestalt_regulatory
				DESC = councilor_gestalt_regulatory_desc
			}
		# /
		if = {
			limit = {
				is_country_type = fallen_empire
			}
			every_owned_leader = {
				limit = {
					is_councilor = yes
					is_ruler = no
				}
				add_skill_without_trait_selection = 9
				set_gestalt_node_portrait_effect = yes
			}
		}
		if = {	# Evolved - correction
			limit = {
				ruler = {
					OR = {
						has_trait = leader_trait_tec_hive_cerebrate
						has_trait = leader_trait_tec_hive_matrix
						has_trait = leader_trait_tec_machine_delegated
					}
				}
			}
			ruler = {
				remove_trait = leader_trait_tec_hive_cerebrate
				remove_trait = leader_trait_tec_hive_matrix
				remove_trait = leader_trait_tec_machine_delegated
			}
		}
	}
}

# Set starting planet governing leader
country_event = {
	id = game_start.71
	hide_window = yes
	trigger = {
		is_country_type = default
	}

	is_triggered_only = yes

	immediate = {
		assign_governor_effect = yes
		every_owned_leader = {
			limit = {
				leader_class = commander
				is_idle = yes
			}
			owner = {
				random_owned_fleet = {
					limit = {
						exists = this
						is_ship_class = shipclass_military
						NOT = {
							exists = leader
						}
					}
					assign_leader = prevprev
				}
			}
		}
		every_owned_leader = {
			limit = {
				leader_class = scientist
				is_idle = yes
			}
			owner = {
				random_owned_fleet = {
					limit = {
						exists = this
						is_ship_class = shipclass_science_ship
						NOT = {
							exists = leader
						}
					}
					assign_leader = prevprev
				}
			}
		}
		# In case mysterious leaders are spawned.
		every_owned_leader = {
			limit = {
				is_idle = yes
				is_councilor = no
			}
			kill_leader = {
				show_notification = no
			}
		}
	}
}

# Create Regular Council.
country_event = {
	id = game_start.72
	hide_window = yes
	trigger = {
		is_gestalt = no
		# Evolved
			tec_is_aiauth_empire = no
		# /
		has_paragon_dlc = yes
		OR = {
			is_country_type = default
			is_country_type = fallen_empire
		}
		NOT = {
			has_origin = origin_broken_shackles
			# Assigned in origin.110 instead
		}
	}

	is_triggered_only = yes

	immediate = {
		# Add Minister of Defense Position
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_defense
					}
				}
			}
			if = {
				limit = { has_paragon_dlc = yes	}
				unlock_council_slots = 1
				set_council_position_to_council = councilor_defense
			}
			if = {
				limit = {
					any_owned_leader = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
				}
				random_owned_leader = {
					limit = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
					set_council_position = councilor_defense
				}
			}
			else = {
				create_leader = {
					class = commander
					name = random
					species = owner_main_species
				}
				last_created_leader = {
					if = {
						limit = {
							has_skill > 1
							num_traits = 0
						}
						add_trait_no_notify = random_common
					}
				}
				last_created_leader = {
					set_council_position = councilor_defense
				}
			}
		}

		# Add Head of Research Position
		if = {
			limit = {
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_research
					}
				}
			}
			if = {
				limit = { has_paragon_dlc = yes	}
				unlock_council_slots = 1
				set_council_position_to_council = councilor_research
			}
			if = {
				limit = {
					any_owned_leader = {
						exists = this
						leader_class = scientist
						is_councilor = no
						is_ruler = no
					}
				}
				random_owned_leader = {
					limit = {
						exists = this
						leader_class = scientist
						is_councilor = no
						is_ruler = no
					}
					set_council_position = councilor_research
				}
			}
			else = {
				create_leader = {
					class = scientist
					name = random
					species = owner_main_species
				}
				last_created_leader = {
					if = {
						limit = {
							has_skill > 1
							num_traits = 0
						}
						add_trait_no_notify = random_common
					}
				}
				last_created_leader = {
					set_council_position = councilor_research
				}
			}
		}

		# Add Minister of State Position
		if = {
			limit = {
				blocks_minister_of_state = no
			}
			if = {
				limit = {
					NOT = {
						has_councilor = {
							COUNCILOR = councilor_state
						}
					}
				}
				if = {
					limit = { has_paragon_dlc = yes	}
					unlock_council_slots = 1
					set_council_position_to_council = councilor_state
				}
				if = {
					limit = {
						any_owned_leader = {
							exists = this
							leader_class = official
							is_councilor = no
							is_ruler = no
						}
					}
					random_owned_leader = {
						limit = {
							exists = this
							leader_class = official
							is_councilor = no
							is_ruler = no
						}
						set_council_position = councilor_state
					}
				}
				else = {
					create_leader = {
						class = official
						name = random
						species = owner_main_species
					}
					last_created_leader = {
						if = {
							limit = {
								has_skill > 1
								num_traits = 0
							}
							add_trait_no_notify = random_common
						}
					}
					last_created_leader = {
						set_council_position = councilor_state
					}
				}
			}
		}
		else_if = {
			limit = {
				has_valid_civic = civic_inwards_perfection
				has_paragon_dlc = yes
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_inwards_perfection
					}
				}
			}
			unlock_council_slots = 1
			set_council_position_to_council = councilor_inwards_perfection
			if = {
				limit = {
					any_owned_leader = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
				}
				random_owned_leader = {
					limit = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
					set_council_position = councilor_inwards_perfection
				}
			}
			else = {
				create_leader = {
					class = commander
					name = random
					species = owner_main_species
				}
				last_created_leader = {
					if = {
						limit = {
							has_skill > 1
							num_traits = 0
						}
						add_trait_no_notify = random_common
					}
				}
				last_created_leader = {
					set_council_position = councilor_inwards_perfection
				}
			}
		}
		else_if = {
			limit = {
				has_valid_civic = civic_fanatic_purifiers
				has_paragon_dlc = yes
				NOT = {
					has_councilor = {
						COUNCILOR = councilor_fanatic_purifiers
					}
				}
			}
			unlock_council_slots = 1
			set_council_position_to_council = councilor_fanatic_purifiers
			if = {
				limit = {
					any_owned_leader = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
				}
				random_owned_leader = {
					limit = {
						exists = this
						leader_class = commander
						is_councilor = no
						is_ruler = no
					}
					set_council_position = councilor_fanatic_purifiers
				}
			}
			else = {
				create_leader = {
					class = commander
					name = random
					species = owner_main_species
				}
				last_created_leader = {
					if = {
						limit = {
							has_skill > 1
							num_traits = 0
						}
						add_trait_no_notify = random_common
					}
				}
				last_created_leader = {
					set_council_position = councilor_fanatic_purifiers
				}
			}
		}
	}
}


#Add 1 of 3 cyborg trait to species
country_event = {	# TODO MACHINE AGE REVIEW - Change to the new traits
	id = game_start.73
	hide_window = yes
	trigger = {
		has_machine_age_dlc = yes
		has_valid_civic = civic_augmentation_bazaars
	}

	is_triggered_only = yes

	immediate = {
		random_list = {
			30 = {
				every_owned_species = {
					limit = {
						is_robotic = no
					}
					change_species_characteristics = {
						add_trait = trait_cyborg_power_drills
					}
				}
				set_country_flag = augmentation_bazaars_power_drills
			}
			30 = {
				every_owned_species = {
					limit = {
						is_robotic = no
					}
					change_species_characteristics = {
						add_trait = trait_cyborg_harvesters
					}
				}
				set_country_flag = augmentation_bazaars_harvesters
			}
			30 = {
				every_owned_species = {
					limit = {
						is_robotic = no
					}
					change_species_characteristics = {
						add_trait = trait_cyborg_superconductive
					}
				}
				set_country_flag = augmentation_bazaars_superconductive
			}
		}
	}
}