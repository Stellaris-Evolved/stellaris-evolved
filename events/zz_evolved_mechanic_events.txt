# events\zz_evolved_mechanic_events.txt

# ------------------------------------------------------------
# MECHANICS
# ------------------------------------------------------------

# ------------------------------------------------- Ships
namespace = tec_ships
	# on_ship_built
	ship_event = {	# Colonizers snatch a pop from the colony
		id = tec_ships.10
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			exists = owner
			owner = {	# Disabled for ais because dumb dumb
				is_ai = no
				is_eager_explorer_empire = no
			}
			is_ship_class = shipclass_colonizer
		}

		immediate = {
			save_event_target_as = tec_colonizer
			# Check if there is a colony in the system
			if = {
				limit = {
					solar_system = {
						any_system_planet = {
							is_colony = yes
							# Lets prevent abandoning colonies xD
							num_pops > 1
							owner = {
								is_same_value = event_target:tec_colonizer.owner
							}
							any_owned_species = {
								exists = this
								is_exact_same_species = event_target:tec_colonizer
							}
						}
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							is_colony = yes
							# Lets prevent abandoning colonies xD
							num_pops > 1
							owner = {
								is_same_value = event_target:tec_colonizer.owner
							}
							any_owned_species = {
								exists = this
								is_exact_same_species = event_target:tec_colonizer
							}
						}
						random_owned_pop = {
							limit = {
								exists = this
								is_exact_same_species = event_target:tec_colonizer
							}
							kill_pop = yes
						}
					}
				}
			}
			# Else checks to snatch a pop from other planet
			else = {
				owner = {
					random_owned_planet = {
						limit = {
							exists = this
							is_colony = yes
							num_pops > 1
							any_owned_species = {
								exists = this
								is_exact_same_species = event_target:tec_colonizer
							}
						}
						random_owned_pop = {
							limit = {
								exists = this
								is_exact_same_species = event_target:tec_colonizer
							}
							kill_pop = yes
						}
					}
				}
			}
		}
	}
# /


# ------------------------------------------------- Megas
namespace = tec_megastructures

	# on_megastructure_built
	# Root = Country
	# From = Megastructure
	# FromFrom = System
	# FromFromFrom = Fleet
	country_event = {	
		id = tec_megastructures.10
		hide_window = yes
		location = from

		is_triggered_only = yes

		trigger = {
			NOT = {
				has_modifier = modifier_tec_mega_scaling
			}
		}
		immediate = {
			from = {
				add_modifier = {
					modifier = modifier_tec_mega_scaling
					multiplier = value:tec_mega_scaling|SCOPE|event_target:tec_habitat_of_@from.solar_system|
				}
			}
		}
	}

	# on_megastructure_upgraded
	# Root = Country
	# From = Megastructure
	# FromFrom = System
	country_event = {	# Recalcs value
		id = tec_megastructures.15
		hide_window = yes
		location = from

		is_triggered_only = yes

		immediate = {
			# recalcs the mega scaling
			from = {
				add_modifier = {
					modifier = modifier_tec_mega_scaling
					multiplier = value:tec_mega_scaling|SCOPE|event_target:tec_habitat_of_@from.solar_system|
				}
			}
		}
	}

	# On monthly pulse country - debug purposes
	country_event = {	# Recalcs value
		id = tec_megastructures.20
		hide_window = yes
		location = from

		is_triggered_only = yes

		immediate = {
			# recalcs the mega scaling
			every_owned_megastructure = {
				limit = {
					NOT = {
						tec_is_non_productive_megastructure = yes
					}
				}
				add_modifier = {
					modifier = modifier_tec_mega_scaling
					multiplier = value:tec_mega_scaling|SCOPE|event_target:tec_habitat_of_@solar_system|
				}
				set_megastructure_flag = non_capital_megastructureTEST
			}
		}
	}

	#on_colony_monthly_pulse 
	planet_event = {	# Recalcs value
		id = tec_megastructures.25
		hide_window = yes
		location = from

		is_triggered_only = yes

		trigger = {
			uses_district_set = habitat
			check_modifier_value = {
				modifier = tec_mega_production_mult
				value > 0
			}
		}

		immediate = {
			set_timed_planet_flag = {
				flag = tec_on_colony_monthly_pulse
				days = 30
			}
			owner = {
				# recalcs the mega scaling
				every_owned_megastructure = {
					limit = {
						solar_system = {
							is_same_value = root.solar_system
						}
						NOT = {
							tec_is_non_productive_megastructure = yes
						}
					}
					add_modifier = {
						modifier = modifier_tec_mega_scaling
						multiplier = value:tec_mega_scaling|SCOPE|event_target:tec_habitat_of_@solar_system|
					}
					set_megastructure_flag = non_capital_megastructureTEST
				}
			}
		}
	}

# /


# ------ SPECIFIC

# ------------------------------------------------- Habitats

namespace = tec_habitats
	# Marks habitat as global event target - on_colonized
	# Scope = Planet
	planet_event = {
		id = tec_habitats.10
		hide_window = yes
		is_triggered_only = yes
		location = this
		
		immediate = {
			solar_system = {
				save_event_target_as = tec_habitat_system
			}
			save_event_target_as = tec_habitat_of_@event_target:tec_habitat_system
			set_planet_flag = tec_habitat_of_@event_target:tec_habitat_system
		}
	}
	# Backup - on_megastructure_built - scans and checks
	# Root = Country
	# From = Megastructure
	# FromFrom = System
	# FromFromFrom = Fleet
	# Initial Ring World Built
	country_event = {
		id = tec_habitats.11
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			FROM = {
				OR = {
					is_megastructure_type = habitat_central_complex
					is_megastructure_type = habitat_central_complex_restored
				}
			}
		}

		immediate = {
			fromfrom = {	# System
				# Delayed event because habitat generation is triggered after
				system_event = {
					id = tec_habitats.12
					days = 2
				}
			}
		}
	}
	system_event = {
		id = tec_habitats.12
		hide_window = yes
		is_triggered_only = yes

		immediate = {
			save_event_target_as = tec_habitat_system
			random_system_planet = {
				limit = {
					is_planet_class = pc_habitat
				}
				save_global_event_target_as = tec_habitat_of_@event_target:tec_habitat_system
				set_planet_flag = tec_habitat_of_@event_target:tec_habitat_system
			}
		}
	}

	# Habitat Orbital Complete Notification
	country_event = {
		id = tec_habitats.25

		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_global_flag = game_started
		}

		immediate = {
			create_message = {
				type = TOAST_TEC_SUBHABITAT_BUILT
				localization = TOAST_TEC_SUBHABITAT_BUILT_DESC
				days = @toast_message_days
				target = event_target:target_planet
			}
		}
	}

	# Specialize events
	# The AI always picks the 3 menial and research options successively (i think) upon having a habitat, the rest are disallowed
	# If it needs anything else, then it can use a building to make some
	planet_event = {
		id = tec_habitats.100
		title = tec_habitats.100.name
		desc = tec_habitats.100.desc
		picture = GFX_evt_habitat
		#show_sound = notification
		is_triggered_only = yes
		location = this
		
		immediate = {
			hidden_effect = {
				set_planet_flag = tec_habitat_picking_spec
				# Lets avoid some shenanigans with the var
				if = {
					limit = {
						NOT = {
							is_variable_set = tec_hab_menial_districts
						}
					}
					set_variable = {
						which = tec_hab_menial_districts
						value = 0
					}
				}
			}
		}

		# Exit
			option = {
				name = tec_habitats.100_exit
				custom_tooltip = tec_habitats.100_exit
				hidden_effect = {
					remove_planet_flag = tec_habitat_picking_spec
				}
			}
		# /
		option = { # Separator
			name = tec_habitats.100_separator_extraction
			allow = {
				hidden_trigger = {
					always = no
				}
			}
		}
		# Extraction block (dynamic)
			option = {	# Energy
				name = tec_habitats.100_extraction_energy
				custom_tooltip = tec_habitats.100_extraction_energy_tooltip
				icon = {
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_green
					text = BLANK_STRING
				}
				trigger = {
					NOT = {
						has_planet_flag = energy_habitat
					}
					#check_modifier_value = {	Always available
					#	modifier = district_generator_max
					#	value > 0
					#}
				}
				allow = {
					hidden_trigger = {
						NOT = {
							has_planet_flag = energy_habitat
						}
					}
					custom_tooltip = {
						fail_text = tec_habitats.100_max_extraction_reached
						check_variable = {
							which = tec_hab_menial_districts
							value < 3
						}
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 150
							mult = root.tec_hab_menial_districts
						}
						resource_stockpile_compare = {
							resource = energy
							value >= 100
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -150
							mult = root.tec_hab_menial_districts
						}
						add_resource = {
							energy = -100
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = energy_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = 1
					}
					# Exports extraction districts and swaps them
						if = {
							limit = {
								check_variable = {
									which = tec_hab_menial_districts
									value = 3
								}
							}
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_energy
								RATE = 1
							}
						}
						else = {
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_energy
								RATE = 0.35
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 10000
				}
			}
			option = {	# Energy (remove)
				name = tec_habitats.100_extraction_energy_remove
				custom_tooltip = tec_habitats.100_extraction_energy_remove_tooltip
				icon = {
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_red
					text = BLANK_STRING
				}
				trigger = {
					has_planet_flag = energy_habitat
				}
				allow = {
					hidden_trigger = {
						exists = owner
						owner = { is_ai = no }
					}
				}
				hidden_effect = {
					remove_planet_flag = energy_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = -1
					}
					# Exports extraction districts and swaps them
						tec_convert_district = {
							BASE_DISTRICT = district_hab_energy
							DISTRICT = district_tec_hab_extraction
							RATE = 1
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
			option = {	# Minerals
				name = tec_habitats.100_extraction_minerals
				custom_tooltip = tec_habitats.100_extraction_minerals_tooltip
				icon = {
					icon = GFX_resource_minerals_large
					icon_background = GFX_situation_approach_bg_green
					text = BLANK_STRING
				}
				trigger = {
					NOT = {
						has_planet_flag = mining_habitat
					}
					check_modifier_value = {
						modifier = district_hab_mining_max
						value > 0
					}
				}
				allow = {
					hidden_trigger = {
						NOT = {
							has_planet_flag = mining_habitat
						}
					}
					custom_tooltip = {
						fail_text = tec_habitats.100_max_extraction_reached
						check_variable = {
							which = tec_hab_menial_districts
							value < 3
						}
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 150
							mult = root.tec_hab_menial_districts
						}
						resource_stockpile_compare = {
							resource = minerals
							value >= 100
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -150
							mult = root.tec_hab_menial_districts
						}
						add_resource = {
							minerals = -100
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = mining_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = 1
					}
					# Exports extraction districts and swaps them
						if = {
							limit = {
								check_variable = {
									which = tec_hab_menial_districts
									value = 3
								}
							}
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_mining
								RATE = 1
							}
						}
						else = {
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_mining
								RATE = 0.35
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}
				ai_chance = {
					weight = 10000
				}
			}
			option = {	# Minerals (remove)
				name = tec_habitats.100_extraction_minerals_remove
				custom_tooltip = tec_habitats.100_extraction_minerals_remove_tooltip
				icon = {
					icon = GFX_resource_minerals_large
					icon_background = GFX_situation_approach_bg_red
					text = BLANK_STRING
				}
				trigger = {
					has_planet_flag = mining_habitat
				}
				allow = {
					hidden_trigger = {
						exists = owner
						owner = { is_ai = no }
					}
				}
				hidden_effect = {
					remove_planet_flag = mining_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = -1
					}
					# Exports extraction districts and swaps them
						tec_convert_district = {
							BASE_DISTRICT = district_hab_mining
							DISTRICT = district_tec_hab_extraction
							RATE = 1
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
			option = {	# Food
				name = tec_habitats.100_extraction_food
				custom_tooltip = tec_habitats.100_extraction_food_tooltip
				icon = {
					icon = GFX_resource_food_large
					icon_background = GFX_situation_approach_bg_green
					text = BLANK_STRING
				}
				trigger = {
					NOT = {
						has_planet_flag = tec_food_habitat
					}
					#check_modifier_value = {	Always available
					#	modifier = district_tec_hab_food_max
					#	value > 0
					#}
				}
				allow = {
					hidden_trigger = {
						NOT = {
							has_planet_flag = tec_food_habitat
						}
					}
					custom_tooltip = {
						fail_text = tec_habitats.100_max_extraction_reached
						check_variable = {
							which = tec_hab_menial_districts
							value < 3
						}
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 150
							mult = root.tec_hab_menial_districts
						}
						resource_stockpile_compare = {
							resource = food
							value >= 100
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -150
							mult = root.tec_hab_menial_districts
						}
						add_resource = {
							food = -100
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_food_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = 1
					}
					# Exports extraction districts and swaps them
						if = {
							limit = {
								check_variable = {
									which = tec_hab_menial_districts
									value = 3
								}
							}
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_tec_hab_food
								RATE = 1
							}
						}
						else = {
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_tec_hab_food
								RATE = 0.35
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 10000
				}
			}
			option = {	# Food (remove)
				name = tec_habitats.100_extraction_food_remove
				custom_tooltip = tec_habitats.100_extraction_food_remove_tooltip
				icon = {
					icon = GFX_resource_food_large
					icon_background = GFX_situation_approach_bg_red
					text = BLANK_STRING
				}
				trigger = {
					has_planet_flag = tec_food_habitat
				}
				allow = {
					hidden_trigger = {
						exists = owner
						owner = { is_ai = no }
					}
				}
				hidden_effect = {
					remove_planet_flag = tec_food_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = -1
					}
					# Exports extraction districts and swaps them
						tec_convert_district = {
							BASE_DISTRICT = district_tec_hab_food
							DISTRICT = district_tec_hab_extraction
							RATE = 1
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
			option = {	# Amenities
				name = tec_habitats.100_extraction_amenities
				custom_tooltip = tec_habitats.100_extraction_amenities_tooltip
				icon = {
					icon = GFX_situation_approach_amenities
					icon_background = GFX_situation_approach_bg_green
					text = BLANK_STRING
				}
				trigger = {
					NOT = {
						has_planet_flag = tec_leisure_habitat
					}
					#check_modifier_value = {	Always available
					#	modifier = district_hab_cultural
					#	value > 0
					#}
				}
				
				allow = {
					hidden_trigger = {
						NOT = {
							has_planet_flag = tec_leisure_habitat
						}
						exists = owner
						owner = { is_ai = no }
					}
					custom_tooltip = {
						fail_text = tec_habitats.100_max_extraction_reached
						check_variable = {
							which = tec_hab_menial_districts
							value < 3
						}
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 200
							mult = root.tec_hab_menial_districts
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -200
							mult = root.tec_hab_menial_districts
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_leisure_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = 1
					}
					# Exports extraction districts and swaps them
						if = {
							limit = {
								check_variable = {
									which = tec_hab_menial_districts
									value = 3
								}
							}
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_cultural
								RATE = 1
							}
						}
						else = {
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_extraction
								DISTRICT = district_hab_cultural
								RATE = 0.35
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}
				ai_chance = {
					weight = 0
				}
			}
			option = {	# Amenities (remove)
				name = tec_habitats.100_extraction_amenities_remove
				custom_tooltip = tec_habitats.100_extraction_amenities_remove_tooltip
				icon = {
					icon = GFX_situation_approach_amenities
					icon_background = GFX_situation_approach_bg_red
					text = BLANK_STRING
				}
				trigger = {
					has_planet_flag = tec_leisure_habitat
				}
				allow = {
					hidden_trigger = {
						exists = owner
						owner = { is_ai = no }
					}
				}
				hidden_effect = {
					remove_planet_flag = tec_leisure_habitat
					change_variable = {
						which = tec_hab_menial_districts
						value = -1
					}
					# Exports extraction districts and swaps them
						tec_convert_district = {
							BASE_DISTRICT = district_hab_cultural
							DISTRICT = district_tec_hab_extraction
							RATE = 1
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
		# /
		option = { # Separator
			name = tec_habitats.100_separator_utility
			allow = {
				hidden_trigger = {
					always = no
				}
			}
		}
		# Utility block (swap)
			option = {	# Research
				name = tec_habitats.100_utility_research
				custom_tooltip = tec_habitats.100_utility_research_tooltip
				icon = {
					icon = GFX_resource_physics
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					check_modifier_value = {
						modifier = district_hab_science_max
						value > 0
					}
				}
				allow = {
					hidden_trigger = {
						NOR = {
							has_planet_flag = tec_research_habitat
							has_planet_flag = research_habitat
						}
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 300
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -300
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_research_habitat
					# Doubledip
					set_planet_flag = research_habitat
					# Removes other flags
						#remove_planet_flag = tec_research_habitat
						#remove_planet_flag = research_habitat
						remove_planet_flag = tec_unity_habitat
						remove_planet_flag = tec_trade_habitat
						remove_planet_flag = commercial_habitat
						remove_planet_flag = tec_military_habitat
					# /
					# District swaps
						if = {
							limit = {
								has_district = district_tec_hab_utility
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_utility
								DISTRICT = district_hab_science
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_unity
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_unity
								DISTRICT = district_hab_science
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_commercial
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_commercial
								DISTRICT = district_hab_science
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_military
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_military
								DISTRICT = district_hab_science
								RATE = 1
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}
				
				ai_chance = {
					weight = 10000
				}
			}
			option = {	# Unity
				name = tec_habitats.100_utility_unity
				custom_tooltip = tec_habitats.100_utility_unity_tooltip
				icon = {
					icon = GFX_resource_unity
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				
				allow = {
					custom_tooltip = {
						fail_text = decision_tec_hab_arcology_level_low
						OR = {
							tec_is_upgraded_habitat = yes
							has_planet_flag = payback_habitat
						}
					}
					hidden_trigger = {
						NOT = {
							has_planet_flag = tec_unity_habitat
						}

						exists = owner
						owner = { is_ai = no }
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 300
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -300
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_unity_habitat
					# Removes other flags
						remove_planet_flag = tec_research_habitat
						remove_planet_flag = research_habitat
						#remove_planet_flag = tec_unity_habitat
						remove_planet_flag = tec_trade_habitat
						remove_planet_flag = commercial_habitat
						remove_planet_flag = tec_military_habitat
					# /
					# District swaps
						if = {
							limit = {
								has_district = district_tec_hab_utility
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_utility
								DISTRICT = district_tec_hab_unity
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_science
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_science
								DISTRICT = district_tec_hab_unity
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_commercial
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_commercial
								DISTRICT = district_tec_hab_unity
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_military
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_military
								DISTRICT = district_tec_hab_unity
								RATE = 1
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
			option = {	# Trade
				name = tec_habitats.100_utility_trade
				custom_tooltip = tec_habitats.100_utility_trade_tooltip
				icon = {
					icon = GFX_trade_value
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					hidden_trigger = {
						exists = owner
						owner = {
							tec_uses_trade_value = yes
						}
					}
				}
				
				allow = {
					hidden_trigger = {
						NOR = {
							has_planet_flag = tec_trade_habitat
							has_planet_flag = commercial_habitat
						}
						exists = owner
						owner = { is_ai = no }
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 300
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -300
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_trade_habitat
					set_planet_flag = commercial_habitat
					# Removes other flags
						remove_planet_flag = tec_research_habitat
						remove_planet_flag = research_habitat
						remove_planet_flag = tec_unity_habitat
						#remove_planet_flag = tec_trade_habitat
						#remove_planet_flag = commercial_habitat
						remove_planet_flag = tec_military_habitat
					# /
					# District swaps
						if = {
							limit = {
								has_district = district_tec_hab_utility
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_utility
								DISTRICT = district_hab_commercial
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_science
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_science
								DISTRICT = district_hab_commercial
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_unity
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_unity
								DISTRICT = district_hab_commercial
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_military
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_military
								DISTRICT = district_hab_commercial
								RATE = 1
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
			option = {	# Military
				name = tec_habitats.100_utility_military
				custom_tooltip = tec_habitats.100_utility_military_tooltip
				icon = {
					icon = GFX_situation_approach_sword
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				allow = {
					custom_tooltip = {
						fail_text = decision_tec_hab_arcology_level_low
						OR = {
							tec_is_upgraded_habitat = yes
							has_planet_flag = payback_habitat
						}
					}
					hidden_trigger = {
						NOT = {
							has_planet_flag = tec_military_habitat
						}

						exists = owner
						owner = { is_ai = no }
					}
					owner = {
						resource_stockpile_compare = {
							resource = alloys
							value >= 300
						}
					}
				}
				# Cost
					owner = {
						add_resource = {
							alloys = -300
						}
					}
				# /
				hidden_effect = {
					set_planet_flag = tec_military_habitat
					# Removes other flags
						remove_planet_flag = tec_research_habitat
						remove_planet_flag = research_habitat
						remove_planet_flag = tec_unity_habitat
						remove_planet_flag = tec_trade_habitat
						remove_planet_flag = commercial_habitat
						#remove_planet_flag = tec_military_habitat
					# /
					# District swaps
						if = {
							limit = {
								has_district = district_tec_hab_utility
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_utility
								DISTRICT = district_tec_hab_military
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_science
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_science
								DISTRICT = district_tec_hab_military
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_tec_hab_unity
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_tec_hab_unity
								DISTRICT = district_tec_hab_military
								RATE = 1
							}
						}
						if = {
							limit = {
								has_district = district_hab_commercial
							}
							# Exports extraction districts and swaps them
							tec_convert_district = {
								BASE_DISTRICT = district_hab_commercial
								DISTRICT = district_tec_hab_military
								RATE = 1
							}
						}
					# /
				}
				planet_event = {
					id = tec_habitats.100
				}

				ai_chance = {
					weight = 0
				}
			}
		# /
	}
	# Autoassembler event
	planet_event = {	# Selects the type of orbital on assembly
		id = tec_habitats.200
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			# Test
			has_building = building_tec_hab_orbital_autobuilder
		}

		immediate = {
			# Test
			if = {	#Checks if there is a candidate for an orbital
				limit = {
					solar_system = {
						count_system_planet = {
							count > 0
							limit = {
								# fail_text = "requires_no_anomaly"
								NOT = { has_anomaly = yes }
								# fail_text = "requires_no_existing_megastructure"
								NOR = {
									has_planet_flag = megastructure
									has_planet_flag = has_megastructure
									#has_planet_flag = tec_has_orbital
								}
								# fail_text = "requires_no_orbital_debris"
								NOT = {
									has_planet_flag = has_orbital_debris
								}
								# Does not has a primitive
								NAND = {
									exists = owner
									owner = {
										is_primitive = yes
									}
								}
								tec_has_constructors_in_orbit = {
									NUM = 0
								}
							}
						}
					}
				}
				log = "autoassembler found orbital"
				random_list = {
					50 = {
						modifier = {	# No available minor orbital slots
							factor = 0
							solar_system = {
								count_system_planet = {
									count = 0
									limit = {
										# fail_text = "requires_no_anomaly"
										NOT = { has_anomaly = yes }
										# fail_text = "requires_no_existing_megastructure"
										NOR = {
											has_planet_flag = megastructure
											has_planet_flag = has_megastructure
											#has_planet_flag = tec_has_orbital
										}
										# fail_text = "requires_no_orbital_debris"
										NOT = {
											has_planet_flag = has_orbital_debris
										}
										OR = {
											is_asteroid = yes
											is_moon = yes
										}
										#tec_has_constructors_in_orbit = {
										#	NUM = 0
										#}
									}
								}
							}
						}
						modifier = {	# Focus on minor orbitals
							factor = 10
							has_planet_flag = tec_orbital_autobuilder_focus_minor
						}
						log = "autoassembler constructs minor (random)"
						planet_event = {
							id = tec_habitats.20010
							days = 120
							# Note: Reduced from 180 to mimic megastructure cost reductions
						}
						planet = {
							set_timed_planet_flag = {
								flag = tec_building_minor_orbital
								months = 4
								#months = 6
							}
							set_saved_date = {
								key = tec_building_minor_orbital_timer
								days_from_present = 120
								expires = 120
								#days_from_present = 180
								#expires = 180
							}
						}
					}
					50 = {
						modifier = {	# No available major orbital slots
							factor = 0
							solar_system = {
								count_system_planet = {
									count = 0
									limit = {
										# fail_text = "requires_no_anomaly"
										NOT = { has_anomaly = yes }
										# fail_text = "requires_no_existing_megastructure"
										NOR = {
											has_planet_flag = megastructure
											has_planet_flag = has_megastructure
											#has_planet_flag = tec_has_orbital
										}
										# fail_text = "requires_no_orbital_debris"
										NOT = {
											has_planet_flag = has_orbital_debris
										}
										NOR = {
											is_asteroid = yes
											is_moon = yes
										}
										#tec_has_constructors_in_orbit = {
										#	NUM = 0
										#}
									}
								}
							}
						}
						modifier = {	# Focus on major orbitals
							factor = 10
							has_planet_flag = tec_orbital_autobuilder_focus_major
						}
						log = "autoassembler constructs major (random)"
						planet_event = {
							id = tec_habitats.20020
							days = 480
							# Note: reduced from 720 to mimic megastructure cost reductions
						}
						planet = {
							set_timed_planet_flag = {
								flag = tec_building_major_orbital
								months = 16
								#months = 24
							}
							set_saved_date = {
								key = tec_building_major_orbital_timer
								days_from_present = 480
								expires = 480
								#days_from_present = 720
								#expires = 720
							}
						}
					}
				}
			}
			else = {
				log = "autoassembler found no orbitals"
				# TO DO toast of the assembler being deactivated
				set_timed_planet_flag = {
					flag = tec_building_no_orbital
					months = 4
					#months = 6
				}
				set_saved_date = {
					key = tec_building_no_orbital_timer
					days_from_present = 360
					expires = 360
					#days_from_present = 180
					#expires = 180
				}
				planet_event = {	# Repeats itself a year after for checking
					id = tec_habitats.200
					days = 360
				}
			}
		}
	}
	planet_event = {	# Assembles minor orbital
		id = tec_habitats.20010
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			# Test
			always = yes
			#has_building = building_tec_hab_orbital_autobuilder
		}

		immediate = {
			solar_system = {
				random_system_planet = {
					limit = {
						# Surveyed one is worthless
						# fail_text = "requires_no_anomaly"
						NOT = { has_anomaly = yes }
						# fail_text = "requires_no_existing_megastructure"
						NOR = {
							has_planet_flag = megastructure
							has_planet_flag = has_megastructure
							#has_planet_flag = tec_has_orbital
						}
						# fail_text = "requires_no_orbital_debris"
						NOT = {
							has_planet_flag = has_orbital_debris
						}
						NAND = {
							exists = owner
							owner = {
								is_primitive = yes
							}
						}
						OR = {
							is_asteroid = yes
							is_moon = yes
						}
						#tec_has_constructors_in_orbit = {
						#	NUM = 0
						#}
					}
					save_event_target_as = tec_minor_orbital_target
					prev = {
						spawn_megastructure = {
							type = "minor_orbital"
							planet = event_target:tec_minor_orbital_target
							coords_from = event_target:tec_minor_orbital_target
							owner = root.owner
							graphical_culture = root.owner
						}
					}
				}
			}
			planet_event = {	# Repeats itself
				id = tec_habitats.200
			}
		}
	}
	planet_event = {	# Assembles major orbital
		id = tec_habitats.20020
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			# Test
			always = yes
			#has_building = building_tec_hab_orbital_autobuilder
		}

		immediate = {
			if = {	# Toxic knights
				limit = {
					OR = {
						has_building = building_order_castle
						has_building = building_order_keep
					}
					exists = owner
					owner = {
						has_origin = origin_toxic_knights
						has_relic = r_toxic_god
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							# Surveyed one is worthless
							# fail_text = "requires_no_anomaly"
							NOT = { has_anomaly = yes }
							# fail_text = "requires_no_existing_megastructure"
							NOR = {
								has_planet_flag = megastructure
								has_planet_flag = has_megastructure
								#has_planet_flag = tec_has_orbital
							}
							# fail_text = "requires_no_orbital_debris"
							NOT = {
								has_planet_flag = has_orbital_debris
							}
							NOR = {
								is_asteroid = yes
								is_moon = yes
							}
							NAND = {
								exists = owner
								owner = {
									is_primitive = yes
								}
							}
							#tec_has_constructors_in_orbit = {
							#	NUM = 0
							#}
						}
						save_event_target_as = tec_major_orbital_target
						prev = {
							spawn_megastructure = {
								type = "major_orbital_knights"
								planet = event_target:tec_major_orbital_target
								coords_from = event_target:tec_major_orbital_target
								owner = root.owner
								graphical_culture = root.owner
							}
						}
					}
				}
			}
			else = {
				solar_system = {
					random_system_planet = {
						limit = {
							# Surveyed one is worthless
							# fail_text = "requires_no_anomaly"
							NOT = { has_anomaly = yes }
							# fail_text = "requires_no_existing_megastructure"
							NOR = {
								has_planet_flag = megastructure
								has_planet_flag = has_megastructure
								#has_planet_flag = tec_has_orbital
							}
							# fail_text = "requires_no_orbital_debris"
							NOT = {
								has_planet_flag = has_orbital_debris
							}
							NOR = {
								is_asteroid = yes
								is_moon = yes
							}
							NAND = {
								exists = owner
								owner = {
									is_primitive = yes
								}
							}
							#tec_has_constructors_in_orbit = {
							#	NUM = 0
							#}
						}
						save_event_target_as = tec_major_orbital_target
						prev = {
							spawn_megastructure = {
								type = "major_orbital"
								planet = event_target:tec_major_orbital_target
								coords_from = event_target:tec_major_orbital_target
								owner = root.owner
								graphical_culture = root.owner
							}
						}
					}
				}
			}
			planet_event = {	# Repeats itself
				id = tec_habitats.200
			}
		}
	}
# /

# ------------------------------------------------- Machine Worlds
namespace = tec_machine_world

 # Initial
	# On decision enabled
	planet_event = {
		id = tec_machine_world.100
		title = tec_machine_world.100.name
		desc = tec_machine_world.100.desc
		picture = GFX_evt_contingency_planet
		show_sound = pc_machine
		is_triggered_only = yes
		location = this
		
		immediate = {
			hidden_effect = {
				set_planet_flag = tec_planet_becoming_machine
			}
		}

		# Machine options
			option = {	# Ok machine
				name = tec_machine_world.100_machine
				custom_tooltip = tec_machine_world.100_machine
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						NOR = {
							has_valid_civic = civic_machine_servitor
							has_valid_civic = civic_machine_assimilator
						}
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok servitor
				name = tec_machine_world.100_servitor
				custom_tooltip = tec_machine_world.100_servitor
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						has_valid_civic = civic_machine_servitor
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok assimilator
				name = tec_machine_world.100_servitor
				custom_tooltip = tec_machine_world.100_servitor
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						has_valid_civic = civic_machine_assimilator
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}

			option = {	# Ok machine but silent
				name = tec_machine_world.100_machine_silent
				custom_tooltip = tec_machine_world.100_machine_silent
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_yellow
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						NOR = {
							has_valid_civic = civic_machine_servitor
							has_valid_civic = civic_machine_assimilator
						}
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok servitor but silent
				name = tec_machine_world.100_servitor_silent
				custom_tooltip = tec_machine_world.100_servitor_silent
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_yellow
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						has_valid_civic = civic_machine_servitor
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok assimilator but silent
				name = tec_machine_world.100_servitor_silent
				custom_tooltip = tec_machine_world.100_servitor_silent
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_yellow
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						is_machine_empire = yes
						has_valid_civic = civic_machine_assimilator
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
		# /
		# Regular options
			option = {	# Ok synths
				name = tec_machine_world.100_synth
				custom_tooltip = tec_machine_world.100_synth
				icon = {	# TO DO machine icon
					icon = GFX_resource_energy_large
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						tec_has_synthetic_ascension_path = yes
						is_gestalt = no
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok cyborgs
				name = tec_machine_world.100_cyborg
				custom_tooltip = tec_machine_world.100_cyborg
				icon = {	# TO DO machine icon
					icon = GFX_situation_approach_tec_cybernetics
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						tec_has_cybernetic_ascension_path = yes
						is_gestalt = no
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok cyborg hiveminds
				name = tec_machine_world.100_cyberhive
				custom_tooltip = tec_machine_world.100_cyberhive
				icon = {	# TO DO machine icon
					icon = GFX_text_auth_tec_hive_cybernetic
					icon_background = GFX_text_auth_tec_hive_cybernetic
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						OR = {
							AND = {
								is_hive_empire = yes
								tec_has_cybernetic_ascension_path = yes
							}
							tec_is_cyberhive = yes
						}
					}
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}

			option = {	# Ok synths but silent
				name = tec_machine_world.100_synth_silent
				custom_tooltip = tec_machine_world.100_synth_silent
				icon = {	# TO DO machine icon
					icon = GFX_situation_approach_tec_ai
					icon_background = GFX_situation_approach_bg_yellow
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						tec_has_synthetic_ascension_path = yes
						is_gestalt = no
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok cyborgs but silent
				name = tec_machine_world.100_cyborg_silent
				custom_tooltip = tec_machine_world.100_cyborg_silent
				icon = {	# TO DO machine icon
					icon = GFX_situation_approach_tec_cybernetics
					icon_background = GFX_situation_approach_bg_yellow
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						tec_has_cybernetic_ascension_path = yes
						is_gestalt = no
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
			option = {	# Ok cyborg hiveminds but silent
				name = tec_machine_world.100_cyberhive_silent
				custom_tooltip = tec_machine_world.100_cyberhive_silent
				icon = {	# TO DO machine icon
					icon = GFX_text_auth_tec_hive_cybernetic
					icon_background = GFX_text_auth_tec_hive_cybernetic
					text = BLANK_STRING
				}
				trigger = {
					owner = {
						OR = {
							AND = {
								is_hive_empire = yes
								tec_has_cybernetic_ascension_path = yes
							}
							tec_is_cyberhive = yes
						}
					}
				}
				hidden_effect = {
					owner = {
						set_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
		# /
	}
 # /
 # Stages
	situation_event = { # Stage 2 - 20%
		id = tec_machine_world.10020
		title = "tec_machine_world.10020.name"
		desc = "tec_machine_world.10020.desc"

		picture = GFX_evt_overtuned
		is_triggered_only = yes
		situation = this
		location = target

		immediate = {
			hidden_effect = {
				set_situation_locked = yes
			}
		}

		after = {
			hidden_effect = {
				set_situation_locked = no
			}
		}

		option = {
			name = tec_machine_world.10020.a
			custom_tooltip = tec_machine_world.10020.a.tooltip
			icon = {
				icon = GFX_situation_approach_tec_machine_world
				icon_background = GFX_situation_approach_bg_tec_blue
				text = tec_blank
			}
		}
	}
	situation_event = { # Stage 2 - 20% only notification
		id = tec_machine_world.10021
		hide_window = yes
		is_triggered_only = yes
		location = target

		immediate = {
			owner = {
				create_message = {
					type = TOAST_TEC_MACHINE_WORLD_STAGE_2
					localization = TOAST_TEC_MACHINE_WORLD_STAGE_2_DESC
					days = @toast_message_days
					target = root.target
				}
			}
		}
	}
	situation_event = { # Stage 3 - 40%
		id = tec_machine_world.10030
		title = "tec_machine_world.10030.name"
		desc = "tec_machine_world.10030.desc"

		picture = GFX_evt_overtuned
		is_triggered_only = yes
		situation = this
		location = target

		immediate = {
			hidden_effect = {
				set_situation_locked = yes
			}
		}

		after = {
			hidden_effect = {
				set_situation_locked = no
			}
		}

		option = {
			name = tec_machine_world.10020.a
			custom_tooltip = tec_machine_world.10020.a.tooltip
			icon = {
				icon = GFX_situation_approach_tec_machine_world
				icon_background = GFX_situation_approach_bg_tec_blue
				text = tec_blank
			}
		}
	}
	situation_event = { # Stage 3 - 40% only notification
		id = tec_machine_world.10031
		hide_window = yes
		is_triggered_only = yes
		location = target

		immediate = {
			owner = {
				create_message = {
					type = TOAST_TEC_MACHINE_WORLD_STAGE_3
					localization = TOAST_TEC_MACHINE_WORLD_STAGE_3_DESC
					days = @toast_message_days
					target = root.target
				}
			}
		}
	}
	situation_event = { # Stage 4 - 60%
		id = tec_machine_world.10040
		title = "tec_machine_world.10040.name"
		desc = "tec_machine_world.10040.desc"

		picture = GFX_evt_overtuned
		is_triggered_only = yes
		situation = this
		location = target

		immediate = {
			hidden_effect = {
				set_situation_locked = yes
			}
		}

		after = {
			hidden_effect = {
				set_situation_locked = no
			}
		}

		option = {
			name = tec_machine_world.10040.a
			custom_tooltip = tec_machine_world.10040.a.tooltip
			icon = {
				icon = GFX_situation_approach_tec_machine_world
				icon_background = GFX_situation_approach_bg_tec_blue
				text = tec_blank
			}
		}
	}
	situation_event = { # Stage 5 - 60% only notification
		id = tec_machine_world.10041
		hide_window = yes
		is_triggered_only = yes
		location = target

		immediate = {
			owner = {
				create_message = {
					type = TOAST_TEC_MACHINE_WORLD_STAGE_4
					localization = TOAST_TEC_MACHINE_WORLD_STAGE_4_DESC
					days = @toast_message_days
					target = root.target
				}
			}
		}
	}
	situation_event = { # Stage 5 - 80%
		id = tec_machine_world.10050
		title = "tec_machine_world.10050.name"
		desc = "tec_machine_world.10050.desc"

		picture = GFX_evt_overtuned
		is_triggered_only = yes
		situation = this
		location = target

		immediate = {
			hidden_effect = {
				set_situation_locked = yes
			}
		}

		after = {
			hidden_effect = {
				set_situation_locked = no
			}
		}

		option = {
			name = tec_machine_world.10050.a
			custom_tooltip = tec_machine_world.10050.a.tooltip
			icon = {
				icon = GFX_situation_approach_tec_machine_world
				icon_background = GFX_situation_approach_bg_tec_blue
				text = tec_blank
			}
		}
	}
	situation_event = { # Stage 5 - 80% only notification
		id = tec_machine_world.10051
		hide_window = yes
		is_triggered_only = yes
		location = target

		immediate = {
			owner = {
				create_message = {
					type = TOAST_TEC_MACHINE_WORLD_STAGE_5
					localization = TOAST_TEC_MACHINE_WORLD_STAGE_5_DESC
					days = @toast_message_days
					target = root.target
				}
			}
		}
	}
 # /
 # Random

 # /
 # Finish
	planet_event = {
		id = tec_machine_world.105
		title = tec_machine_world.105.name
		desc = tec_machine_world.105.desc
		picture = GFX_evt_contingency_planet
		show_sound = pc_machine
		is_triggered_only = yes
		location = this
		
		immediate = {
			hidden_effect = {
				remove_planet_flag = tec_planet_becoming_machine
			}
		}

		# Machine options
			option = {	# Ok machine
				name = tec_machine_world.105
				custom_tooltip = tec_machine_world.105
				icon = {
					icon = GFX_situation_approach_tec_machine_world
					icon_background = GFX_situation_approach_bg_tec_blue
					text = BLANK_STRING
				}
				trigger = {
					always = yes
				}
				hidden_effect = {
					owner = {
						remove_country_flag = tec_mute_machine_world
						start_situation = {
							type = situation_tec_machine_world_base
							target = root
						}
					}
				}
			}
		# /
	}

	planet_event = {	# Just notification
		id = tec_machine_world.106
		hide_window = yes
		is_triggered_only = yes
		location = this
		
		immediate = {
			log = ""
		}
	}
 # /
# /
# ------------------------------------------------- Machine Worlds
namespace = tec_hive_world
	
	
# /