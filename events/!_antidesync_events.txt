# events\!_antidesync_events.txt

namespace = antidesync_evolved

#antidesync_evolved.10XX = leader desyncs
#antidesync_evolved.20XX = pop desyncs
#antidesync_evolved.30XX = modifier desyncs (not detected)

#antidesync_evolved.90XX = bandaids


# ---- First round! Leaders getting mismatched ethics!
# scope: country, from: leader
#on_added_to_leader_pool

country_event = {
	id = antidesync_evolved.1001
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# is_multiplayer = yes
		from = {
			tec_has_any_gestalt_ethics = no
		}
	}

	immediate = {
		from = {
			save_event_target_as = tec_temp_leader
			# We sample from the population of the species and apply an ethic
			creator = {
				random_owned_pop = {
					limit = {
						exists = this
						is_exact_same_species = event_target:tec_temp_leader
						tec_has_any_regular_ethics = yes
						can_be_leader = yes
					}
					save_event_target_as = tec_temp_selected_pop
				}
				random_owned_planet = {

					save_event_target_as = tec_temp_selected_planet
				}
			}
			set_leader_flag = tec_no_starting_actions
			switch = {
				trigger = leader_class
				inline_script = {
					script = iterators/tec_iterate_leader_class
					code = "
						$leader_class$ = {
							set_random_$leader_class$_background_effect = yes
						}
					"
				}
			}
		}
		set_country_flag = tec_no_starting_actions
		if = {
			limit = {
				exists = event_target:tec_temp_selected_pop
			}
			event_target:tec_temp_selected_pop = {
				switch = {
					trigger = has_ethic
					inline_script = {
						script = iterators/tec_iterate_ethic_regular
						code = "
							ethic_$ethic$ = {
								event_target:tec_temp_leader = {
									change_background_ethic = ethic_$ethic$
								}
								root = {
									clone_leader = {
										target = event_target:tec_temp_leader
										background_planet = event_target:tec_temp_selected_pop.planet
										background_ethic = ethic_$ethic$
										skip_background_generation = yes
										effect = {
											copy_flags_and_variables_from = event_target:tec_temp_leader
											save_event_target_as = tec_temp_new_leader
										}
									}
								}

							}
						"
					}
				}
			}
		} else = {
			random_list = {
				inline_script = {
					script = iterators/tec_iterate_ethic_regular
					code = "
						1 = {
							clone_leader = {
								target = event_target:tec_temp_leader
								background_planet = event_target:tec_temp_selected_planet
								background_ethic = ethic_$random$
								skip_background_generation = yes
								effect = {
									copy_flags_and_variables_from = event_target:tec_temp_leader
									save_event_target_as = tec_temp_new_leader
								}
							}
						}
					"
				}
				0 = {}
			}
		}
		remove_country_flag = tec_no_starting_actions

		event_target:tec_temp_new_leader = {
			remove_leader_flag = tec_no_starting_actions
		}

		event_target:tec_temp_leader = {
			if = {
				limit = {
					exists = planet
				}
				planet = {
					assign_leader = event_target:tec_temp_new_leader
				}
			} else_if = {
				limit = {
					exists = fleet
				}
				fleet = {
					assign_leader = event_target:tec_temp_new_leader
				}
			} else_if = {
				limit = {
					root = {
						any_owned_army = {
							exists = leader
							leader = {
								is_same_value = event_target:tec_temp_leader
							}
						}
					}
				}
				root = {
					random_owned_army = {
						limit = {
							exists = leader
							leader = {
								is_same_value = event_target:tec_temp_leader
							}
						}
						assign_leader = event_target:tec_temp_new_leader
					}
				}
			}
			kill_leader = {
				show_notification = no
			}
		}
	}
}
country_event = { # Leader level handler
	id = antidesync_evolved.1002
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_multiplayer = yes
	}

	immediate = {
		from = {
			set_skill = trigger:has_skill
		}
		#every_owned_leader = {
		#	set_skill = trigger:has_skill
		#}
	}
}

country_event = { # ROADD attempts electric bugalooo
	id = antidesync_evolved.1002
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_multiplayer = yes
	}

	immediate = {
		from = {
			set_skill = trigger:has_skill
		}
		#every_owned_leader = {
		#	set_skill = trigger:has_skill
		#}
	}
}




# ---- Second round! Pops getting mismatched ethics!
# Triggered at on_pop_ethic_changed
# Just to be sure, on_pop_added too

pop_event = {
	id = antidesync_evolved.2001
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		always = yes
	}

	immediate = {
		# Lets shoehorn the ethic to see if this works
		switch = {
			trigger = has_ethic
			# Vanilla
			ethic_authoritarian = {
				pop_change_ethic = ethic_authoritarian
			}
			ethic_egalitarian = {
				pop_change_ethic = ethic_egalitarian
			}
			ethic_xenophobe = {
				pop_change_ethic = ethic_xenophobe
			}
			ethic_xenophile = {
				pop_change_ethic = ethic_xenophile
			}
			ethic_militarist = {
				pop_change_ethic = ethic_militarist
			}
			ethic_pacifist = {
				pop_change_ethic = ethic_pacifist
			}
			ethic_spiritualist = {
				pop_change_ethic = ethic_spiritualist
			}
			ethic_materialist = {
				pop_change_ethic = ethic_materialist
			}
			# Evolved
			ethic_cooperative = {
				pop_change_ethic = ethic_cooperative
			}
			ethic_competitive = {
				pop_change_ethic = ethic_competitive
			}
			ethic_ecologist = {
				pop_change_ethic = ethic_ecologist
			}
			ethic_industrialist = {
				pop_change_ethic = ethic_industrialist
			}
			ethic_elitist = {
				pop_change_ethic = ethic_elitist
			}
			ethic_pluralist = {
				pop_change_ethic = ethic_pluralist
			}
			# Gestalt
			ethic_gestalt_consciousness = {
				wipe_pop_ethos = yes
			}
			# Gestalt evolved
			ethic_gestalt_overconsumption = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
			ethic_gestalt_preservation = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
			ethic_gestalt_empathy = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
			ethic_gestalt_apathy = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
			ethic_gestalt_introspective = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
			ethic_gestalt_extrospective = {
				pop_change_ethic = ethic_gestalt_consciousness
			}
		}
	}
}

# just to be sure...
	# A pop has been added to the planet
	# Root = pop
	# From = planet
	#