# events\zz_evolved_civic_events.txt

# ------------------------------------------------------------
# MISC
# ------------------------------------------------------------

# ------------------------------------------------- Misc civic adjustments
namespace = tec_civic_checker
	# Aquatic detection - detects and adds/remove a flag on species modification
	country_event = {	# on_modification_complete
		id = tec_civic_checker.101
		hide_window = yes
	
		is_triggered_only = yes
	
		trigger = { always = yes }
	
		immediate = {
			if = {
				limit = {
					owner_species = {
						tec_is_aquatic_species = yes
					}
				}
				set_country_flag = tec_aquatic_empire
				set_country_flag = tec_can_add_civic_anglers
				remove_country_flag = tec_can_remove_civic_anglers
			}
			else = {
				remove_country_flag = tec_aquatic_empire
				remove_country_flag = tec_can_remove_civic_anglers
				set_country_flag = tec_can_remove_civic_anglers
			}
		}
	}
# ------------------------------------------------- Traits
namespace = tec_trait
	#Identity traits checker - on_game_start_country
	country_event = {
		id = tec_trait.5
		hide_window = yes
		is_triggered_only = yes
	
		trigger = {
			any_owned_species = {
				# has any identity trait
				OR = {
					has_trait = trait_tec_cryptobiotic
					has_trait = trait_tec_metamorphosis
					has_trait = trait_tec_siliceous
					has_trait = trait_tec_lithophytic
					# Morphology
					has_trait = trait_tec_big_brain
					has_trait = trait_tec_small_brain
					#has_trait = trait_tec_size_titanic
					#has_trait = trait_tec_size_giant
					#has_trait = trait_tec_size_small
					#has_trait = trait_tec_size_diminute
					# resources
					has_trait = trait_tec_bioelectrical
					has_trait = trait_tec_earthen
					has_trait = trait_tec_pollinators
					has_trait = trait_tec_technophile
					has_trait = trait_tec_coactive
					# special
					has_trait = trait_tec_lithoid_sedimentary
					has_trait = trait_tec_spore_growth
					has_trait = trait_tec_dual_gametoids
					has_trait = trait_tec_celestial_panspermia
					has_trait = trait_tec_predatory_consumption
					has_trait = trait_tec_decaying_decomposition
					has_trait = trait_tec_zombification
					# Fire&Fantasy
					has_trait = trait_tec_fantasy_sylvan
				}
			}
		}
	
		immediate = {
			# Fancy group
			tec_country_identity_trait_flag = {
				trait = trait_tec_cryptobiotic
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_metamorphosis
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_siliceous
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_lithophytic
			}
			# /
			# Morphology group
			tec_country_identity_trait_flag = {
				trait = trait_tec_big_brain
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_small_brain
			}
			#tec_country_identity_trait_flag = {
			#	trait = trait_tec_size_titanic
			#}
			#tec_country_identity_trait_flag = {
			#	trait = trait_tec_size_giant
			#}
			#tec_country_identity_trait_flag = {
			#	trait = trait_tec_size_small
			#}
			#tec_country_identity_trait_flag = {
			#	trait = trait_tec_size_diminute
			#}
			# /
			# Resource group
			tec_country_identity_trait_flag = {
				trait = trait_tec_bioelectrical
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_earthen
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_pollinators
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_technophile
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_coactive
			}
			# /
			# Special group
			tec_country_identity_trait_flag = {
				trait = trait_tec_lithoid_sedimentary
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_spore_growth
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_dual_gametoids
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_celestial_panspermia
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_predatory_consumption
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_decaying_decomposition
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_zombification
			}
			tec_country_identity_trait_flag = {
				trait = trait_tec_fantasy_sylvan
			}
			# /
			# Post-effects/markers
			if = {
				limit = {
					OR = {
						has_country_flag = tec_identity_trait_tec_predatory_consumption
					}
				}
				set_country_flag = tec_has_organic_predatory_species
			}
			#if = {
			#	limit = {
			#		OR = {
			#			has_country_flag = tec_identity_trait_tec_robotic_cannibalization
			#		}
			#	}
			#	set_country_flag = tec_has_robotic_predatory_species
			#}

			if = {	# This is just for keeping the flags for autogen, and a sanity check
				limit = {
					always = no
				}
				set_country_flag = tec_identity_trait_tec_cryptobiotic
				set_country_flag = tec_identity_trait_tec_metamorphosis
				set_country_flag = tec_identity_trait_tec_siliceous
				set_country_flag = tec_identity_trait_tec_lithophytic
				# Morphology
				set_country_flag = tec_identity_trait_tec_big_brain
				set_country_flag = tec_identity_trait_tec_small_brain
				#set_country_flag = tec_identity_trait_tec_size_titanic
				#set_country_flag = tec_identity_trait_tec_size_giant
				#set_country_flag = tec_identity_trait_tec_size_small
				#set_country_flag = tec_identity_trait_tec_size_diminute
				# resources
				set_country_flag = tec_identity_trait_tec_bioelectrical
				set_country_flag = tec_identity_trait_tec_earthen
				set_country_flag = tec_identity_trait_tec_pollinators
				set_country_flag = tec_identity_trait_tec_technophile
				set_country_flag = tec_identity_trait_tec_coactive
				# special
				set_country_flag = tec_identity_trait_tec_lithoid_sedimentary
				set_country_flag = tec_identity_trait_tec_spore_growth
				set_country_flag = tec_identity_trait_tec_dual_gametoids
				set_country_flag = tec_identity_trait_tec_celestial_panspermia
				set_country_flag = tec_identity_trait_tec_predatory_consumption
				set_country_flag = tec_identity_trait_tec_decaying_decomposition
				set_country_flag = tec_identity_trait_tec_zombification
				# Fire&Fantasy
				set_country_flag = tec_identity_trait_tec_fantasy_sylvan
			}
		}
	}

	#traitchecker
	planet_event = {
		id = tec_trait.10
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			always = yes
		}

		immediate = {
			# Cryptobiotic
			planet_event = {
				id = tec_trait.11
				#extra delay to ensure it works well
				days = 1
			}
		}
	}

	#Cryptobiotic
	planet_event = {
		id = tec_trait.11
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			any_owned_pop = {
				has_trait = trait_tec_cryptobiotic
			}
		}

		immediate = {
			root = {
				random_owned_pop = {
					limit = {
						has_trait = trait_tec_cryptobiotic
					}
					root = {
						create_pop = {
							species = prev
						}
					}
				}
			}
		}
	}

	# Lithoid sedimentary
	planet_event = {
		id = tec_trait.15
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			NOT = {
				has_planet_flag = tec_recent_sedimentary_colonization
			}
			any_owned_pop = {
				has_trait = trait_tec_lithoid_sedimentary
			}
		}

		immediate = {
			root = {
				set_timed_planet_flag = {
					flag = tec_recent_sedimentary_colonization
					years = 25
				}
				random_list = {
					25 = {
						while = {
							count = 1
							add_deposit = d_tec_sedimented_lithoids
						}
					}
					25 = {
						while = {
							count = 2
							add_deposit = d_tec_sedimented_lithoids
						}
					}
					25 = {
						while = {
							count = 3
							add_deposit = d_tec_sedimented_lithoids
						}
					}
					#25 = {
					#	while = {
					#		count = 5
					#		add_deposit = d_tec_sedimented_lithoids
					#	}
					#}
				}
			}
		}
	}

	# Metamorphosis
	pop_event = {
		id = tec_trait.20
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_trait = trait_tec_metamorphosis
		}

		immediate = {
			hidden_effect = {
				set_timed_pop_flag = {
					flag = tec_metamorphosis_phase_0
					years = 10
				}
				set_timed_pop_flag = {
					flag = tec_metamorphosis_phase_1
					years = 20
				}
			}
		}
	}

	# Dual Gametoids
		# Fired by: on_pop_grown and on_pop_assembled
	 # NOTE: NOT ON POP ADDED to avoid the effect called several times
		# A pop has finished growing or assembling
		# This = Planet scope From = Country FromFrom = Pop
	planet_event = {
		id = tec_trait.25
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			fromfrom = {
				species = {
					has_trait = trait_tec_dual_gametoids
				}
				# Just to be safe
				NOR = {
					has_pop_flag = tec_invalidate_dual_gametoids
					species = {
						has_species_flag = tec_invalidate_dual_gametoids
					}
				}
			}
		}

		immediate = {
			fromfrom = {
				save_event_target_as = tec_pop_to_clone
			}
			random = {
				chance = value:tec_dual_gametoids_trait_scaling|SCOPE|this|
				create_pop = {
					species = event_target:tec_pop_to_clone
				}
				last_created_pop = {
					# Just to be safe
					set_timed_pop_flag = {
						flag = tec_invalidate_dual_gametoids
						days = 1
					}
				}
				##DEBUG
				#change_variable = {
				#	which = tec_dual_gametoids_triggered
				#	value = 1
				#}
			}
		}
	}

	# Decaying Decomposition / planned obsolescence - growth
	 # Fired by: on_pop_grown and on_pop_assembled
	 # NOTE: NOT ON POP ADDED to avoid the effect called several times
	 # A pop has finished growing or assembling
	 # This = Planet scope From = Country FromFrom = Pop
	planet_event = {	# TODO TRAIT
		id = tec_trait.30
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			num_pops >= 10
			# Lets avoid bad luck rolls
			exists = fromfrom
			fromfrom = {
				species = {
					OR = {
						has_trait = trait_tec_decaying_decomposition
						# has_trait = trait_tec_robot_obsolescence
					}
				}
				# Just to be safe
				NOR = {
					has_pop_flag = tec_invalidate_decomposition
					species = {
						has_species_flag = tec_invalidate_decomposition
					}
				}
			}
		}

		immediate = {
			fromfrom = {
				save_event_target_as = tec_species_to_decompose
			}
			random = {
				chance = value:tec_decomposition_trait_scaling|SCOPE|this|
				random_owned_pop = {
					limit = {
						is_same_species = event_target:tec_species_to_decompose
						NOT = {
							has_pop_flag = tec_invalidate_decomposition
						}
					}
					kill_pop = yes
				}
				if = {	# Robotic
					limit = {
						exists = fromfrom
						fromfrom = {
							is_robotic_species = yes
						}
					}
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_robotic
							}
						}
						add_deposit = d_tec_decomposition_robotic
						set_variable = {
							which = tec_decomposed_robots
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_robots
							value = 1
						}
					}
				}
				if = {	# Lithoid
					limit = {
						exists = fromfrom
						fromfrom = {
							is_lithoid = yes
						}
					}
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_lithoid
							}
						}
						add_deposit = d_tec_decomposition_lithoid
						set_variable = {
							which = tec_decomposed_lithoids
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_lithoids
							value = 1
						}
					}
				}
				else = { # Normal
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_organic
							}
						}
						add_deposit = d_tec_decomposition_organic
						set_variable = {
							which = tec_decomposed_organics
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_organics
							value = 1
						}
					}
				}
			}
		}
	}
	# Decaying Decomposition / planned obsolescence - kill
	 # NOTE: kill_pop doesn't trigger it... its a pita so death cults and etc must be adjusted properly
	 # Fired by: on_pop_purged on_pop_declined
	planet_event = {	# TODO TRAIT
		id = tec_trait.31
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			fromfrom = {
				species = {
					OR = {
						has_trait = trait_tec_decaying_decomposition
						# has_trait = trait_tec_robot_obsolescence
					}
				}
				# Assims invalidate this
				is_being_assimilated = no
				# Just to be safe
				NOT = {
					has_pop_flag = tec_invalidate_decomposition
					species = {
						has_species_flag = tec_invalidate_decomposition
					}
				}
			}
		}

		immediate = {
			random = {
				chance = 10
				if = {	# Robotic
					limit = {
						fromfrom = {
							is_robotic_species = yes
						}
					}
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_robotic
							}
						}
						add_deposit = d_tec_decomposition_robotic
						set_variable = {
							which = tec_decomposed_robots
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_robots
							value = 1
						}
					}
				}
				if = {	# Lithoid
					limit = {
						fromfrom = {
							is_lithoid = yes
						}
					}
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_lithoid
							}
						}
						add_deposit = d_tec_decomposition_lithoid
						set_variable = {
							which = tec_decomposed_lithoids
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_lithoids
							value = 1
						}
					}
				}
				else = { # Normal
					if = {
						limit = {
							NOT = {
								has_deposit = d_tec_decomposition_organic
							}
						}
						add_deposit = d_tec_decomposition_organic
						set_variable = {
							which = tec_decomposed_organics
							value = 1
						}
					}
					else = {
						change_variable = {
							which = tec_decomposed_organics
							value = 1
						}
					}
				}
			}
		}
	}

	# Celestial Panspermia
	 # Fired by: on_pop_grown and on_pop_assembled
	 # NOTE: NOT ON POP ADDED to avoid the effect called several times
	planet_event = {
		id = tec_trait.35
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			exists = fromfrom
			fromfrom = {
				species = {
					has_trait = trait_tec_celestial_panspermia
				}
				# Just to be safe
				NOR = {
					has_pop_flag = tec_invalidate_celestial_panspermia
					species = {
						has_species_flag = tec_invalidate_celestial_panspermia
					}
				}
			}
		}

		immediate = {
			owner = {	# Country
				save_event_target_as = tec_celestial_owner
			}
			fromfrom = { # Celestial pop
				save_event_target_as = tec_pop_to_clone
			}
			random_list = {
				10 = {	# On a neighbouring colony / self colony
					modifier = {
						factor = 0
						exists = owner
						owner = {
							num_owned_planets = 1
						}
					}
					owner = {
						random_planet_within_border = {
							limit = {
								is_colony = yes
							}
							tec_generate_celestial_panspermia_blocker = yes
						}
					}
				}
				20 = {	# On a close-by planet
					modifier = {
						factor = 2
						exists = owner
						owner = {
							num_owned_planets = 1
						}
					}
					random_system = {
						limit = {
							distance = {
								source = prev
								min_jumps = 0
								max_jumps = 5
							}
							any_system_planet = {
								OR = {
									is_colonizable = yes
									is_colony = yes
								}
							}
						}
						weights = {
							base = 1
							modifier = {
								factor = 2
								OR = {
									has_star_flag = neighbor_t1_first_colony
									has_star_flag = neighbor_t2_second_colony
								}
							}
						}
						random_system_planet = {
							limit = {
								OR = {
									is_colonizable = yes
									is_colony = yes
								}
							}
							weights = {
								base = 1
								modifier = {
									factor = 0.5
									is_colony = yes
								}
								modifier = {
									factor = 1.5
									is_colonizable = yes
								}
								modifier = {
									factor = 2
									has_planet_flag = prescripted_ideal
								}
							}
							tec_generate_celestial_panspermia_blocker = yes
						}
					}
				}
				10 = {	# On a random planet in the galaxy
					random_system = {
						limit = {
							distance = {
								source = prev
								min_jumps = 0
								max_jumps = 20
							}
							any_system_planet = {
								OR = {
									is_colonizable = yes
									is_colony = yes
								}
							}
						}
						random_system_planet = {
							limit = {
								OR = {
									is_colonizable = yes
									is_colony = yes
								}
							}
							tec_generate_celestial_panspermia_blocker = yes
						}
					}
				}
				60 = {	# nada ;)
				}
			}
		}
	}
	# TODO TRAIT - First event when a pod is discovered
	#planet_event = {	# TODO TRAIT
	#	id = tec_trait.36
	# TODO TRAIT - Notification/toast when a pod is discovered after first event
	#planet_event = {	# TODO TRAIT
	#	id = tec_trait.37
	# TODO TRAIT - Opinion debuff when the pods are broken/eaten/smashed/etc
	#planet_event = {	# TODO TRAIT
	#	id = tec_trait.38

	# Predatory Consumption - Growth
	 # Fired by: on_pop_grown and on_pop_assembled
	 # NOTE: NOT ON POP ADDED to avoid the effect called several times
	 # A pop has finished growing or assembling
	 # This = Planet scope From = Country FromFrom = Pop
	planet_event = {
		id = tec_trait.40
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			num_pops >= 10
			exists = fromfrom
			fromfrom = {
				species = {
					has_trait = trait_tec_predatory_consumption
				}
				# Just to be safe
				NOR = {
					has_pop_flag = tec_invalidate_predatory_consumption
					species = {
						has_species_flag = tec_invalidate_predatory_consumption
					}
				}
			}
			# Policies
			exists = owner
			owner = {
				NOR = {
					has_policy_flag = policy_tec_organic_predatory_management_contained
					has_policy_flag = policy_tec_organic_predatory_management_overfed
				}
			}
		}

		immediate = {
			owner = {	# Country
				save_event_target_as = tec_predatory_owner
			}
			fromfrom = { # Devourer
				save_event_target_as = tec_pop_that_eats
			}
			random = {
				chance = value:tec_predatory_trait_scaling|SCOPE|this|
				random_owned_pop = {
					limit = {
						NOT = {
							is_same_value = event_target:tec_pop_that_eats
						}
						NOR = {
							has_modifier = tec_converged_pop
							has_modifier = pop_modifier_trait_tec_predatory_consumption
							has_pop_flag = tec_invalidate_predatory_consumption
						}
						if = {	# Rocks eat rocks
							limit = {
								event_target:tec_pop_that_eats = {
									is_lithoid = yes
									tec_is_cyborg_species = no
								}
							}
							species = {
								is_lithoid = yes
							}
						}
						if = {	# Cyborg Rocks eat rocks and machine things
							limit = {
								event_target:tec_pop_that_eats = {
									is_lithoid = yes
									tec_is_cyborg_species = yes
								}
							}
							species = {
								OR = {
									is_lithoid = yes
									is_robotic = yes
									tec_is_cyborg_species = yes
								}
							}
						}
						if = {	# Not rocks don't eat robots
							limit = {
								event_target:tec_pop_that_eats = {
									is_lithoid = no
									species = {
										is_robotic = yes
									}
									tec_is_cyborg_species = no
								}
							}
							species = {
								is_lithoid = no
								is_robotic = no
							}
						}
						if = {	# ... but cyborgs can
							limit = {
								event_target:tec_pop_that_eats = {
									is_lithoid = no
									tec_is_cyborg_species = yes
								}
							}
							species = {
								is_lithoid = no
							}
						}
					}
					weights = {
						base = 1
						modifier = {	# Livestock is always prio
							factor = 10
							OR = {
								has_job = livestock
								#has_job = livestock_zoo_animal
								has_job = livestock_zoo_beast
							}
						}
						modifier = {	# Necrophages prio non necrophages
							factor = 10
							event_target:tec_pop_that_eats = {
								has_trait = trait_necrophage
							}
							NOR = {
								has_job = necro_apprentice
								species = {
									has_trait = trait_necrophage
								}
							}
						}
						modifier = {	# Not predatory
							factor = 5
							species = {
								NOT = {
									has_trait = trait_tec_predatory_consumption
								}
							}
						}
						modifier = {	# Weak pops are easy prey
							factor = 5
							species = {
								#OR = {
									has_trait = trait_weak
								#}
							}
						}
						modifier = {	# Is xeno
							factor = 2
							species = {
								NOT = {
									is_same_species = event_target:tec_pop_that_eats
								}
							}
						}
						modifier = {	# Lets avoid eating endangered species
							factor = 0.1
							species = {
								#OR = {
									has_trait = trait_tec_se_elder
								#}
							}
						}
					}
					save_event_target_as = tec_pop_to_eat
				}
				if = {
					limit = {
						exists = event_target:tec_pop_to_eat
					}
					# People around gets angry
					every_country = {
						limit = {
							has_communications = FROM
							NOT = { is_country = FROM }
							NOT = { is_same_species = FROMFROM }
							NOT = { has_ai_personality_behaviour = purger }
							OR = {
								tec_is_default_country = yes
								has_ai_personality = awakened_fallen_empire_xenophile
							}
							has_intel_level = {
								who = FROM
								category = economy
								level >= 1
							}
						}
						add_opinion_modifier = { who = FROM modifier = opinion_genocidal }
					}
					every_country = {
						limit = {
							has_communications = FROM
							NOT = { is_country = FROM }
							is_same_species = FROMFROM
							has_intel_level = {
								who = FROM
								category = economy
								level >= 1
							}
						}
						add_opinion_modifier = { who = FROM modifier = opinion_genocidal_our_species }
					}
					# Yummy
					event_target:tec_pop_that_eats = {
						add_modifier = {
							modifier = pop_modifier_trait_tec_predatory_consumption
							days = -1
						}
					}
					# Kills the pop
					event_target:tec_pop_to_eat = {
						kill_pop = yes
					}
				}
			}
		}
	}
	# Predatory Consumption - kill
	 # NOTE: kill_pop doesn't trigger it... its a pita so death cults and etc must be adjusted properly
	 # Fired by: on_pop_purged on_pop_declined
	#planet_event = {	# TODO TRAIT
	#	id = tec_trait.41
	# Predatory Consumption - Marker for pops
	 # NOTE: For marking if the empire has or had any predatory pops
	 # Fired by: on_pop_grown and on_pop_assembled
	 planet_event = {
		id = tec_trait.42
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			fromfrom = {
				species = {
					has_trait = trait_tec_predatory_consumption
				}
			}
			exists = owner
			owner = {
				NOT = {
					has_country_flag = tec_has_organic_predatory_species
				}
			}
		}

		immediate = {
			owner = {	# Country
				set_country_flag = tec_has_organic_predatory_species
			}
		}
	}

	# Technophile - on_tech_increased
	country_event = {	# Deprecated - will be used by other trait
		id = tec_trait.45
		hide_window = yes
		is_triggered_only = yes
	
		trigger = {
			always = no
		}
	
		immediate = {
			add_resource = {
				unity = 1
				mult = value:tec_technophile_trait_scaling
			}
		}
	}

	# Zombification - Growth
	 # Fired by: on_pop_grown and on_pop_assembled
	planet_event = {
		id = tec_trait.50
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			num_pops >= 10
			exists = fromfrom
			fromfrom = {
				species = {
					has_trait = trait_tec_zombification
					is_organic_species = yes
					NOT = { has_trait = trait_zombie }
				}
				# Just to be safe
				NOR = {
					has_pop_flag = tec_invalidate_zombification
					species = {
						has_species_flag = tec_invalidate_zombification
					}
				}
			}
		}

		immediate = {
			fromfrom = {
				save_event_target_as = tec_pop_to_zombify
			}
			# Debug
			set_variable = {
				which = tec_debug_zombification_chance
				value = value:tec_zombification_trait_scaling
			}
			random = {
				chance = value:tec_zombification_trait_scaling
				random_list = {
					1 = {	# Death
						modifier = {
							factor = value:tec_zombification_trait_instant_death
							always = yes
						}
						event_target:tec_pop_to_zombify = {
							kill_pop = yes
						}
					}
					70 = {	# Zombification
						event_target:tec_pop_to_zombify = {
							make_pop_zombie = yes
							clear_pop_category = yes
							#To make sure that the zombie pop does not spawn as a non worker strata
						}
						last_created_pop = {
							# Just to be safe
							set_timed_pop_flag = {
								flag = tec_invalidate_zombification
								days = 1
							}
						}
					}
				}
			}
		}
		after = {
			if = {
				limit = {
					exists = event_target:tec_pop_to_zombify
				}
				event_target:tec_pop_to_zombify = {
					clear_pop_category = yes #To make sure that the zombie pop does not spawn as a non worker strata
				}
			}
		}
	}

	# Zombification - on_game_start_country
	country_event = {
		id = tec_trait.52
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			any_owned_species = {
				has_trait = trait_tec_zombification
			}
		}

		immediate = {
			export_trigger_value_to_variable = {
				trigger = count_owned_pop
				parameters = {
					limit = {
						species = {
							has_trait = trait_tec_zombification
						}
					}
				}
				variable = tec_temp_num_pops
			}
			multiply_variable = {
				which = tec_temp_num_pops
				value = 0.25
			}
			while = {
				count = tec_temp_num_pops
				random_owned_pop = {
					limit = {
						species = {
							has_trait = trait_tec_zombification
						}
						NOT = {
							has_pop_flag = tec_invalidate_zombification
						}
					}
					weights = {
						base = 1
						modifier = {
							factor = 10
							OR = {
								has_job_category = worker
								has_job_category = simple_drone
							}
						}
					}
					make_pop_zombie = yes
					clear_pop_category = yes
					#To make sure that the zombie pop does not spawn as a non worker strata
					set_timed_pop_flag = {
						flag = tec_invalidate_zombification
						days = 1
					}
				}
			}
			clear_variable = tec_temp_num_pops
		}
	}


	# If the robot is mammalian, it changes to a mammalian appeal controlled via policy
	# If the robot has a mammalian appeal, fall backs to mammalian robot if trait is out
	# Synthetic skin/Nanite swarm appearance
	country_event = {
		id = tec_trait.1000
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			always = no
			from = {
				OR = {
					has_trait = trait_tec_robot_liquid
					has_trait = trait_tec_robot_nanitebody
				}
			}
		}

		immediate = {
			every_owned_leader = {
				limit = {
					is_same_species = from
				}
				tec_machine_organic_camouflage = yes
			}
			if = {
				limit = {
					ruler = {
						species = {
							is_same_species = from
						}
					}
				}
				ruler = {
					tec_machine_organic_camouflage = yes
				}
			}
		}
	}
# /

# ------------------------------------------------------------
# ORIGINS
# ------------------------------------------------------------
namespace = tec_fruitful
	# Fruitful gamestart change
	country_event = {
		id = tec_fruitful.100
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			tec_is_fruitful_empire = yes
			NOT = {	# Avoid double dipping
				has_origin = origin_fruitful
			}
		}

		immediate = {
			fruitful_start_effect = yes
			# Adds the hidden flags
			set_country_flag = first_alien_life
			set_country_flag = Story2
			set_country_flag = tiyanki_encountered
		}
	}
	country_event = {	# Small buff for this origin & civics
		id = tec_fruitful.10001
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			tec_is_fruitful_empire = yes
		}

		immediate = {
			capital_scope.solar_system = {
				# Spawn critters to a nearby system
				random_neighbor_system = {
					limit = {
						NOT = {
							has_star_flag = tiyanki_plantoid_system
						}
					}
					set_star_flag = tiyanki_plantoid_system_2
					random_system_planet = {
						limit = { is_star = yes }
						event_target:tiyanki_country = {
							create_fleet = {
								name = "NAME_Tiyanki_Space_Whale"
								effect = {
									set_owner = event_target:tiyanki_country
									create_ship = {
										design = "NAME_Tiyanki_Cow"
									}
									create_ship = {
										design = "NAME_Tiyanki_Bull"
									}
									create_ship = {
										design = "NAME_Tiyanki_Calf"
									}
									create_ship = {
										design = "NAME_Tiyanki_Hatchling"
									}
									set_location = prevprev
									set_fleet_stance = passive
									set_aggro_range_measure_from = self
									set_aggro_range = 0
									set_fleet_flag = NAME_Tiyanki_Space_Whale
									queue_actions = {
										wait = { # Cooldown until they start moving
											duration = 320
											random = 80
										}
									}
								}
							}
						}
					}
				}

				# Imprint the space amoeba near your home so they will immediately go to your home system to eat,
				# instead of vanishing into a natural wormhole
				closest_system = {
					limit = {
						has_star_flag = tiyanki_plantoid_system_2
					}
					every_fleet_in_system = {
						limit = {
							owner = {
								is_tiyanki_country_type = yes
							}
						}
						set_fleet_flag = fruitful_lured_critter
						auto_move_to_planet = {
							target = prev.star
							clear_auto_move_on_arrival = yes
						}
					}
				}
			}
		}
	}
# /

# ------------------------------------------------------------
# SHARED
# ------------------------------------------------------------
# ------------------------------------------------- Dread armies - reanimators
namespace = tec_reanimator

	#on_army_killed_in_combat
	# This = owner
	# From = army
	# FromFrom = opponent
	# FromFromFrom = planet

	country_event = {
		id = tec_reanimator.10
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			From = {
				exists = species
				species = { # Robots cant be raised i guess?
					is_organic_species = yes
				}
				NOR = { # Cant reanimate the reanimated
					army_type = undead_army
					army_type = tec_geist_army
				}
				
			}
			OR = {
				FromFrom = {
					is_regular_empire = yes
					tec_is_reanimator_empire = yes
				}
				This = {
					is_regular_empire = yes
					tec_is_reanimator_empire = yes
					NOT = { is_country_type = "gate_builders" }
				}
			}

			FromFromFrom = { # tec_battle_planet
				NOT = {
					has_planet_flag = tec_recent_reanimation
				}
			}

		}

		immediate = {
			# Sorting event targets for clarity...
			FromFromFrom = { # tec_battle_planet
				save_event_target_as = tec_bp
			}
			FromFrom = {	# tec_deceased_army_killer
				save_event_target_as = tec_dak
			}
			From = {		#tec_deceased_army
				save_event_target_as = tec_da
			}
			This = {		#tec_deceased_army_owner
				save_event_target_as = tec_dao
			}

			event_target:tec_bp = {
				set_timed_planet_flag = {
					flag = tec_recent_reanimation
					days = 1
				}
			}

			# Roll the dice
			random_list = {
				2 = {
					break = yes
				}
				1 = {
					if = {	# Both are necromancers
						limit = {
							event_target:tec_dak = {
								tec_is_reanimator_empire = yes
							}
							event_target:tec_dao = {
								tec_is_reanimator_empire = yes
							}

						}
						random_list = {
							60 = {
								event_target:tec_bp = { #for the defender	
									if = {
										limit = { # Extracheck to avoid non necro empire benefitting
											event_target:tec_dao = {
												tec_is_reanimator_empire = yes
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = undead_army 
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
										
										change_variable = {# adds variable for later winner messages
											which = tec_reanimated_armies_def
											value = 1
										}
									}
								}
								break = yes
							}
							40 = {
								event_target:tec_bp = {	# for the oponent
									if = {	# Extracheck to avoid non necro empire benefitting
										limit = {
											event_target:tec_dak = {
												tec_is_reanimator_empire = yes
											}
											NOR = {
												event_target:tec_da = {
													army_type = undead_army 
												}
												event_target:tec_da = {
													army_type = tec_geist_army
												}
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = undead_army 
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
														
										change_variable = { # adds variable for later winner messages
											which = tec_reanimated_armies_att
											value = 1
										}
									}
								}
								break = yes
							}
						}
						break = yes
					}
					else_if = {	# Only def is necro
						limit = {
							event_target:tec_dak = {
								NOT = {
									tec_is_reanimator_empire = yes
								}
							}
							event_target:tec_dao = {
								tec_is_reanimator_empire = yes
							}
						}
						
						
						event_target:tec_bp = {
							if = {
								limit = { # Extracheck to avoid non necro empire benefitting
									event_target:tec_dao = {
										tec_is_reanimator_empire = yes
									}
																	
								}
								create_army = { #for the defender
									name = random
									owner = event_target:tec_dao
									type = undead_army 
									species = event_target:tec_da.species
								}

								last_created_army = {
									set_army_flag = tec_delete_this_army
								}

								change_variable = {# adds variable for later winner messages
									which = tec_reanimated_armies_def
									value = 1
								}
							}
						}
						break = yes
					}
					else_if = {	# Only opponent is necro
						limit = {
							event_target:tec_dak = {
								tec_is_reanimator_empire = yes
							}
							event_target:tec_dao = {
								NOT = {
									tec_is_reanimator_empire = yes
								}
							}
						}
						
						event_target:tec_bp = {
							if = {
								limit = { 	# Extracheck to avoid non necro empire benefitting
									event_target:tec_dak = {
										tec_is_reanimator_empire = yes
									}

								}
								create_army = { # for the oponent
									name = random
									owner = event_target:tec_dak
									type = undead_army 
									species = event_target:tec_da.species
								}

								last_created_army = {
									set_army_flag = tec_delete_this_army
								}

								change_variable = { # adds variable for later winner messages
									which = tec_reanimated_armies_att
									value = 1
								}
							}
						}
						break = yes
					}
					else = {
						break = yes
					}
					
				}
			}
		}
	}

	#on_planet_attackers_win = {
	country_event = {	# Necromancers announce
		id = tec_reanimator.20
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			OR = {
				tec_is_reanimator_empire = yes
				has_valid_civic = civic_tec_machine_reanimation
				has_valid_civic = civic_tec_hive_necrophage
			}
		}

		immediate = {
			if = {
				limit = {
					NOT = {
						has_country_flag = tec_first_necro
					}
					FromFrom = {
						check_variable = {
							which = tec_reanimated_armies_att
							value > 0
						}
					}
				}
				this = {
					save_event_target_as = tec_necro_attacker
				}
				from = {
					save_event_target_as = tec_necro_attacked
				}
				FromFrom = {
					save_event_target_as = tec_assaulted_planet
				}
				if = {
					limit = {
						is_machine_empire = no
						is_hive_empire = no
					}
					country_event = {
						id = tec_reanimator.25
					}
				}
				create_message = {
					type = MESSAGE_TEC_REANIMATED_EVENT
					localization = MESSAGE_TEC_REANIMATED_ARMIES
					days = 30
					target = FromFrom
					variable = {
						type = name
						localization = PLANET
						scope = FromFrom
					}
					variable = {
						type = variable
						varname = tec_reanimated_armies_att
						localization = VALUE
						scope = FromFrom
					}
				}
				FromFrom = {
					clear_variable = tec_reanimated_armies_att
					clear_variable = tec_reanimated_armies_def
				}
			}
			
			if = {
				limit = {
					has_country_flag = tec_first_necro
					FromFrom = {
						check_variable = {
							which = tec_reanimated_armies_att
							value > 0
						}
					}
				}
				create_message = {
					type = MESSAGE_TEC_REANIMATED_EVENT
					localization = MESSAGE_TEC_REANIMATED_ARMIES
					days = 30
					target = FromFrom
					variable = {
						type = name
						localization = PLANET
						scope = FromFrom
					}
					variable = {
						type = variable
						varname = tec_reanimated_armies_att
						localization = VALUE
						scope = FromFrom
					}
				}
				FromFrom = {
					clear_variable = tec_reanimated_armies_att
					clear_variable = tec_reanimated_armies_def
				}
			}
		}

		after = {
			hidden_effect = {
				every_owned_army = {
					limit = {
						has_army_flag = tec_delete_this_army
					}
					random_list = {
						50 = {
							remove_army_flag = tec_delete_this_army
						}
						50 = {
							remove_army = yes
						}
					}
				}
			}
		}
	}

	# First necromancy
	country_event = {	# Necromancers announce
		id = tec_reanimator.25
		is_triggered_only = yes
		trigger = {
			NOT = {
				has_country_flag = tec_first_necro
			}
			tec_is_reanimator_empire = yes
		}
		
		picture = GFX_evt_necrophage
		title = tec_reanimator.25.title
		desc = tec_reanimator.25.desc

		option = {
			name = tec_reanimator.25.excellent
		}

		immediate = {
			hidden_effect = {
				set_country_flag = tec_first_necro
			}
		}
	}

	#on_planet_defenders_win = {
	country_event = {
		id = tec_reanimator.30
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			OR = {
				tec_is_reanimator_empire = yes
				has_valid_civic = civic_tec_machine_reanimation
				has_valid_civic = civic_tec_hive_necrophage
			}
		}

		immediate = {
			if = {
				limit = {
					NOT = {
						has_country_flag = tec_first_necro
					}
					FromFrom = {
						check_variable = {
							which = tec_reanimated_armies_def
							value > 0
						}
					}
				}
				from = {
					save_event_target_as = tec_necro_attacker
				}
				root = {
					save_event_target_as = tec_necro_attacked
				}
				FromFrom = {
					save_event_target_as = tec_assaulted_planet
				}
				if = {
					limit = {
						is_machine_empire = no
						is_hive_empire = no
					}
					country_event = {
						id = tec_reanimator.35
					}
				}
				create_message = {
					type = MESSAGE_TEC_REANIMATED_EVENT
					localization = MESSAGE_TEC_REANIMATED_ARMIES
					days = 30
					target = FromFrom
					variable = {
						type = name
						localization = PLANET
						scope = FromFrom
					}
					variable = {
						type = variable
						varname = tec_reanimated_armies_def
						localization = VALUE
						scope = FromFrom
					}
				}
				FromFrom = {
					clear_variable = tec_reanimated_armies_att
					clear_variable = tec_reanimated_armies_def
				}
			}
		
			if = {
				limit = {
					has_country_flag = tec_first_necro
					FromFrom = {
						check_variable = {
							which = tec_reanimated_armies_def
							value > 0
						}
					}
				}
				create_message = {
					type = MESSAGE_TEC_REANIMATED_EVENT
					localization = MESSAGE_TEC_REANIMATED_ARMIES
					days = 30
					target = FromFrom
					variable = {
						type = name
						localization = PLANET
						scope = FromFrom
					}
					variable = {
						type = variable
						varname = tec_reanimated_armies_def
						localization = VALUE
						scope = FromFrom
					}
				}
				FromFrom = {
					clear_variable = tec_reanimated_armies_att
					clear_variable = tec_reanimated_armies_def
				}
			}
		}
		after = {
			hidden_effect = {
				every_owned_army = {
					limit = {
						has_army_flag = tec_delete_this_army
					}
					random_list = {
						50 = {
							remove_army_flag = tec_delete_this_army
						}
						50 = {
							remove_army = yes
						}
					}
				}
			}
		}
	}

	country_event = {	# Necromancers announce
		id = tec_reanimator.35
		is_triggered_only = yes
		trigger = {
			NOT = {
				has_country_flag = tec_first_necro
			}
			tec_is_reanimator_empire = yes
		}

		picture = GFX_evt_necrophage
		title = tec_reanimator.35.title
		desc = tec_reanimator.35.desc

		option = {
			name = tec_reanimator.35.excellent
		}

		immediate = {
			hidden_effect = {
				set_country_flag = tec_first_necro
			}
		}
	}

	# This = Planet scope
	# From = Country
	# FromFrom = Pop
	#Purging pops generate a dread army
	planet_event = {
		id = tec_reanimator.50
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			FROM = {
				OR = {
					tec_is_reanimator_empire = yes
				}
			}
			FROMFROM = {
				is_organic_species = yes
				OR = {
					has_purge_type = {
						type = purge_normal
					}
					has_purge_type = {
						type = purge_labor_camps
					}
					has_purge_type = {
						type = purge_neutering
					}
				}
			}
			is_controlled_by = FROM
			has_building = building_dread_encampment
		}

		immediate = {
			ROOT = {
				create_army = {
					name = random
					owner = root.owner
					type = undead_army 
					species = fromfrom.species
				}
			}
		}
	}

	# -------------------------------------------------------
	# Dread machines leader event
	country_event = {
		id = tec_reanimator.101
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			from = {
				owner = {
					is_same_value = root
				}
				has_level >= 2
				is_idle = no
			}
			has_valid_civic = civic_tec_machine_reanimation
		}

		immediate = {
			random = {
				chance = 50
				clone_leader = {
					target = from
					effect = {
						save_event_target_as = tec_recently_reanimated_leader
						set_owner = event_target:global_event_country	
						# moves the leader to gec
					}
				}
				last_created_leader = {
					set_leader_flag = tec_reanimated_leader_@root
				}
				root = {
					country_event = {
						id = tec_reanimator.102
						days = @tec_reanim_delay_1
					}
				}
			}
		}
	}

	# Announces and gives back the leader
	country_event = {
		id = tec_reanimator.102
		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_reanimation
		}

		immediate = {
			event_target:global_event_country = {
				random_owned_leader = {
					limit = {
						has_leader_flag = tec_reanimated_leader_@root
					}
					save_event_target_as = tec_reanimated_leader
					set_owner = root
					
					remove_leader_flag = tec_reanimated_leader_@root
					save_event_target_as = thrl
				}
			}
			#event_target:tec_reanimated_leader = {
			#	remove_leader_flag = tec_reanimated_leader_@root
			#	save_event_target_as = thrl
			#}
		}

		picture = GFX_evt_sapient_AI
		title = tec_reanimator.102
		desc = tec_reanimator.102.desc

		option = {
			name = EXCELLENT
		}

	}

	#on_army_killed_in_combat
	# This = owner
	# From = army
	# FromFrom = opponent
	# FromFromFrom = planet
	country_event = {
		id = tec_reanimator.110
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			From = {	# Killed army
				exists = species
				species = { # only robots can be raised
					OR = {
						is_robotic_species = yes
						is_archetype = REPLICANT
					}
				}
				NOR = { # Cant reanimate the reanimated
					army_type = tec_shambling_robot
				}
				
			}
			OR = {
				FromFrom = {	# Attacker
					is_machine_empire = yes
					has_valid_civic = civic_tec_machine_reanimation
					NOT = { is_country_type = "gate_builders" }
				}
				This = {	# Army owner
					is_machine_empire = yes
					has_valid_civic = civic_tec_machine_reanimation
					NOT = { is_country_type = "gate_builders" }
				}
			}

			FromFromFrom = { # tec_battle_planet
				NOT = {
					has_planet_flag = tec_recent_reanimation
				}
				OR = {
					count_ground_combat_defender = {
						limit = {
							army_type = tec_reanimator
						}
						count >= 1
					}
					count_ground_combat_attacker = {
						limit = {
							army_type = tec_reanimator
						}
						count >= 1
					}
				}
			}

		}

		immediate = {
			# Sorting event targets for clarity...
			FromFromFrom = { # tec_battle_planet
				save_event_target_as = tec_bp
			}
			FromFrom = {	# tec_deceased_army_killer
				save_event_target_as = tec_dak
			}
			From = {		#tec_deceased_army
				save_event_target_as = tec_da
			}
			This = {		#tec_deceased_army_owner
				save_event_target_as = tec_dao
			}

			event_target:tec_bp = {
				set_timed_planet_flag = {
					flag = tec_recent_reanimation
					days = 1
				}
			}

			random_list = {
				2 = {
					}
				1 = {
					if = {	# Both are necromancers
						limit = {
							event_target:tec_dak = {
								has_valid_civic = civic_tec_machine_reanimation
							}
							event_target:tec_dao = {
								has_valid_civic = civic_tec_machine_reanimation
							}

						}
						random_list = {
							60 = {
								event_target:tec_bp = { #for the defender	
									if = {
										limit = { # Extracheck to avoid non necro empire benefitting
											event_target:tec_dao = {
												has_valid_civic = civic_tec_machine_reanimation
											}
										}
										random_list = {
											30 = {	# re-reanimated robot
												if = {
													limit = {
														event_target:tec_da = {
															army_type = robotic_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = robotic_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_assault_1
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = machine_assault_1
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_assault_2
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = machine_assault_2
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = robotic_defense_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = robotic_defense_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_defense
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = machine_defense
														species = event_target:tec_da.species
													}
												}

												else = {
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = machine_assault_1
														species = event_target:tec_da.species
													}
												}
												# Megawarforms excluded, for balance sake
											}
											70 = {	# zombot
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = tec_shambling_robot
													species = event_target:tec_da.species
												}

												last_created_army = {
													set_army_flag = tec_delete_this_army
												}
											}
										}

										change_variable = {# adds variable for later winner messages
											which = tec_reanimated_armies_def
											value = 1
										}
									}
								}
								break = yes
							}
							40 = {
								event_target:tec_bp = {	# for the oponent
									if = {	# Extracheck to avoid non necro empire benefitting
										limit = {
											event_target:tec_dak = {
												has_valid_civic = civic_tec_machine_reanimation
											}
											NOR = {
												event_target:tec_da = {
													army_type = tec_shambling_robot
												}
											}
										}
										# For the oponent
										random_list = {
											30 = {	# re-reanimated robot
												if = {
													limit = {
														event_target:tec_da = {
															army_type = robotic_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = robotic_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_assault_1
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = machine_assault_1
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_assault_2
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = machine_assault_2
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = robotic_defense_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = robotic_defense_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = machine_defense
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = machine_defense
														species = event_target:tec_da.species
													}
												}

												else = {
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = machine_assault_1
														species = event_target:tec_da.species
													}
												}
												# Megawarforms excluded, for balance sake
											}
											70 = {	# zombot
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = tec_shambling_robot
													species = event_target:tec_da.species
												}

												last_created_army = {
													set_army_flag = tec_delete_this_army
												}
											}
										}
														
										change_variable = { # adds variable for later winner messages
											which = tec_reanimated_armies_att
											value = 1
										}
									}
								}
								break = yes
							}
						}
						break = yes
					}
					else_if = {	# Only def is necro
						limit = {
							event_target:tec_dak = {
								NOT = {
									has_valid_civic = civic_tec_machine_reanimation
								}
							}
							event_target:tec_dao = {
								has_valid_civic = civic_tec_machine_reanimation
							}
						}
						
						
						event_target:tec_bp = {
							if = {
								limit = { # Extracheck to avoid non necro empire benefitting
									event_target:tec_dao = {
										has_valid_civic = civic_tec_machine_reanimation
									}
																	
								}
								random_list = {
									30 = {	# re-reanimated robot
										if = {
											limit = {
												event_target:tec_da = {
													army_type = robotic_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = robotic_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_assault_1
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = machine_assault_1
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_assault_2
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = machine_assault_2
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = robotic_defense_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = robotic_defense_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_defense
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = machine_defense
												species = event_target:tec_da.species
											}
										}

										else = {
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = machine_assault_1
												species = event_target:tec_da.species
											}
										}
										# Megawarforms excluded, for balance sake
									}
									70 = {	# zombot
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = tec_shambling_robot
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
									}
								}

								change_variable = {# adds variable for later winner messages
									which = tec_reanimated_armies_def
									value = 1
								}
							}
						}
						break = yes
					}
					else_if = {	# Only opponent is necro
						limit = {
							event_target:tec_dak = {
								has_valid_civic = civic_tec_machine_reanimation
							}
							event_target:tec_dao = {
								NOT = {
									has_valid_civic = civic_tec_machine_reanimation
								}
							}
						}
						
						event_target:tec_bp = {
							if = {
								limit = { 	# Extracheck to avoid non necro empire benefitting
									event_target:tec_dak = {
										has_valid_civic = civic_tec_machine_reanimation
									}

								}
								# for the opponent
								random_list = {
									30 = {	# re-reanimated robot
										if = {
											limit = {
												event_target:tec_da = {
													army_type = robotic_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = robotic_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_assault_1
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = machine_assault_1
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_assault_2
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = machine_assault_2
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = robotic_defense_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = robotic_defense_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = machine_defense
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = machine_defense
												species = event_target:tec_da.species
											}
										}

										else = {
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = machine_assault_1
												species = event_target:tec_da.species
											}
										}
										# Megawarforms excluded, for balance sake
									}
									70 = {	# zombot
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = tec_shambling_robot
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
									}
								}

								change_variable = { # adds variable for later winner messages
									which = tec_reanimated_armies_att
									value = 1
								}
							}
						}
						break = yes
					}
					else = {
						break = yes
					}

				}
			}
		}
	}

	# -------------------------------------------------------
	# Dread hives event
	country_event = {
		id = tec_reanimator.210
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			From = {	# Killed army
				exists = species
				species = { # only organics can be snatched
					is_organic_species = yes
				}
				
			}
			OR = {
				FromFrom = {	# Attacker
					is_hive_empire = yes
					has_valid_civic = civic_tec_hive_necrophage
					NOT = { is_country_type = "gate_builders" }
				}
				This = {	# Army owner
					is_hive_empire = yes
					has_valid_civic = civic_tec_hive_necrophage
					NOT = { is_country_type = "gate_builders" }
				}
			}

			FromFromFrom = { # tec_battle_planet
				NOT = {
					has_planet_flag = tec_recent_reanimation
				}
				OR = {
					count_ground_combat_defender = {
						limit = {
							army_type = tec_pherodrone
						}
						count >= 1
							
					}
					count_ground_combat_defender = {
						limit = {
							army_type = tec_pherodrone_def
						}
						count >= 1
							
					}
					count_ground_combat_attacker = {
						limit = {
							army_type = tec_pherodrone
						}
						count >= 1
							
					}
					count_ground_combat_attacker = {
						limit = {
							army_type = tec_pherodrone_def
						}
						count >= 1
							
					}
				}
			}

		}

		immediate = {
			# Sorting event targets for clarity...
			FromFromFrom = { # tec_battle_planet
				save_event_target_as = tec_bp
			}
			FromFrom = {	# tec_deceased_army_killer
				save_event_target_as = tec_dak
			}
			From = {		#tec_deceased_army
				save_event_target_as = tec_da
			}
			This = {		#tec_deceased_army_owner
				save_event_target_as = tec_dao
			}

			event_target:tec_bp = {
				set_timed_planet_flag = {
					flag = tec_recent_reanimation
					days = 12
				}
			}

			random_list = {
				2 = {
				}
				1 = {
					if = {	# Both are necromancers
						limit = {
							event_target:tec_dak = {
								has_valid_civic = civic_tec_hive_necrophage
							}
							event_target:tec_dao = {
								has_valid_civic = civic_tec_hive_necrophage
							}

						}
						random_list = {
							60 = {
								event_target:tec_bp = { #for the defender	
									if = {
										limit = { # Extracheck to avoid non necro empire benefitting
											event_target:tec_dao = {
												has_valid_civic = civic_tec_hive_necrophage
											}
										}
										random_list = {
											20 = {	# re-reanimated robot
												if = {
													limit = {
														event_target:tec_da = {
															army_type = assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = assault_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = gene_warrior_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = gene_warrior_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = clone_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = clone_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = titanic_azizian_assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = titanic_azizian_assault_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = titanic_assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = titanic_assault_army
														species = event_target:tec_da.species
													}
												}

												else = {
													create_army = {
														name = random
														owner = event_target:tec_dao
														type = tec_husk
														species = event_target:tec_da.species
													}
												}
												# Megawarforms excluded, for balance sake
											}
											80 = {	# zombies
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = tec_husk
													species = event_target:tec_da.species
												}

												last_created_army = {
													set_army_flag = tec_delete_this_army
												}
											}
										}

										change_variable = {# adds variable for later winner messages
											which = tec_reanimated_armies_def
											value = 1
										}
									}
								}
								break = yes
							}
							40 = {
								event_target:tec_bp = {	# for the oponent
									if = {	# Extracheck to avoid non necro empire benefitting
										limit = {
											event_target:tec_dak = {
												has_valid_civic = civic_tec_hive_necrophage
											}
											NOR = {
												event_target:tec_da = {
													army_type = tec_shambling_robot
												}
											}
										}
										# For the oponent
										random_list = {
											20 = {	# re-reanimated robot
												if = {
													limit = {
														event_target:tec_da = {
															army_type = assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = assault_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = gene_warrior_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = gene_warrior_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = clone_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = clone_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = titanic_azizian_assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = titanic_azizian_assault_army
														species = event_target:tec_da.species
													}
												}

												else_if = {
													limit = {
														event_target:tec_da = {
															army_type = titanic_assault_army
														}
													}
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = titanic_assault_army
														species = event_target:tec_da.species
													}
												}

												else = {
													create_army = {
														name = random
														owner = event_target:tec_dak
														type = tec_husk
														species = event_target:tec_da.species
													}
												}
												# Megawarforms excluded, for balance sake
											}
											80 = {	# zombies
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = tec_husk
													species = event_target:tec_da.species
												}

												last_created_army = {
													set_army_flag = tec_delete_this_army
												}
											}
										}
														
										change_variable = { # adds variable for later winner messages
											which = tec_reanimated_armies_att
											value = 1
										}
									}
								}
								break = yes
							}
						}
						break = yes
					}
					else_if = {	# Only def is necro
						limit = {
							event_target:tec_dak = {
								NOT = {
									has_valid_civic = civic_tec_hive_necrophage
								}
							}
							event_target:tec_dao = {
								has_valid_civic = civic_tec_hive_necrophage
							}
						}
						
						
						event_target:tec_bp = {
							if = {
								limit = { # Extracheck to avoid non necro empire benefitting
									event_target:tec_dao = {
										has_valid_civic = civic_tec_hive_necrophage
									}
																	
								}
								random_list = {
									20 = {	# re-reanimated robot
										if = {
											limit = {
												event_target:tec_da = {
													army_type = assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = assault_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = gene_warrior_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = gene_warrior_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = clone_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = clone_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = titanic_azizian_assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = titanic_azizian_assault_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = titanic_assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = titanic_assault_army
												species = event_target:tec_da.species
											}
										}

										else = {
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = tec_husk
												species = event_target:tec_da.species
											}
										}
										# Megawarforms excluded, for balance sake
									}
									80 = {	# zombies
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = tec_husk
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
									}
								}

								change_variable = {# adds variable for later winner messages
									which = tec_reanimated_armies_def
									value = 1
								}
							}
						}
						break = yes
					}
					else_if = {	# Only opponent is necro
						limit = {
							event_target:tec_dak = {
								has_valid_civic = civic_tec_hive_necrophage
							}
							event_target:tec_dao = {
								NOT = {
									has_valid_civic = civic_tec_hive_necrophage
								}
							}
						}
						
						event_target:tec_bp = {
							if = {
								limit = { 	# Extracheck to avoid non necro empire benefitting
									event_target:tec_dak = {
										has_valid_civic = civic_tec_hive_necrophage
									}

								}
								# for the opponent
								random_list = {
									20 = {	# re-reanimated robot
										if = {
											limit = {
												event_target:tec_da = {
													army_type = assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = assault_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = gene_warrior_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = gene_warrior_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = clone_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = clone_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = titanic_azizian_assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = titanic_azizian_assault_army
												species = event_target:tec_da.species
											}
										}

										else_if = {
											limit = {
												event_target:tec_da = {
													army_type = titanic_assault_army
												}
											}
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = titanic_assault_army
												species = event_target:tec_da.species
											}
										}

										else = {
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = tec_husk
												species = event_target:tec_da.species
											}
										}
										# Megawarforms excluded, for balance sake
									}
									80 = {	# zombies
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = tec_husk
											species = event_target:tec_da.species
										}

										last_created_army = {
											set_army_flag = tec_delete_this_army
										}
									}
								}

								change_variable = { # adds variable for later winner messages
									which = tec_reanimated_armies_att
									value = 1
								}
							}
						}
						break = yes
					}
					else = {
						break = yes
					}
				}
			}
		}
	}
# /

# ------------------------------------------------- Envoy Civics
namespace = tec_envoy

	leader_event = {	# Envoy is assigned on_leader_assigned
		id = tec_envoy.10
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			leader_class = envoy
			OR = {
				has_envoy_task = {
					task = improve_relations
				}
				has_envoy_task = {
					task = harm_relations
				}
				has_envoy_task = {
					task = federation
				}
				has_envoy_task = {
					task = galactic_community
				}
			}
		}

		immediate = {
			hidden_effect = {
				if = {
					limit = {
						owner = {
							is_regular_empire = yes
							is_megacorp = no
						}
					}
					break = yes
				}
				else_if = {
					limit = {
						owner = {
							is_regular_empire = yes
							is_megacorp = yes
						}
					}
					break = yes
				}
				else_if = {
					limit = {
						owner = {
							is_machine_empire = yes
						}
					}
					if = {
						limit = {
							owner = {
								tec_is_terraformer_environmentalist_empire = yes
							}
						}
						break = yes
					}
				}
				else_if = {
					limit = {
						owner = {
							is_hive_empire = yes
						}
					}
					break = yes
				}
				else = {
					break = yes
				}
			}
		}
	}

	leader_event = {	# Envoy is unassigned
		id = tec_envoy.15
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			leader_class = envoy
			NOR = {
				has_envoy_task = {
					task = improve_relations
				}
				has_envoy_task = {
					task = harm_relations
				}
				has_envoy_task = {
					task = federation
				}
				has_envoy_task = {
					task = galactic_community
				}
			}
		}

		immediate = {
			hidden_effect = {
				
			}
		}
	}

# /

# ------------------------------------------------- Cost swaps
namespace = tec_cost_swap_civic
	# Organic architecture hidden modifier
	country_event = {
		id = tec_cost_swap_civic.501
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			OR = {
				tec_is_bioarch_empire = yes
				has_valid_civic = civic_tec_machine_digitalization
				tec_is_biohive = yes	# Added here just because
			}
			if = {
				limit = { tec_is_bioarch_empire = yes }
				NOT = {
					has_modifier = modifier_tec_hidden_organicarch_modifier
				}
			}
			if = {
				limit = { has_valid_civic = civic_tec_machine_digitalization }
				NOT = {
					has_modifier = modifier_tec_hidden_digitalization_modifier
				}
			}
			if = {
				limit = { tec_is_biohive = yes }
				NOR = {
					has_modifier = modifier_tec_hidden_biohive_modifier
					has_modifier = modifier_tec_hidden_lithohive_modifier
				}
			}
		}

		immediate = {
			if = {
				limit = {
					tec_is_bioarch_empire = yes
					NOT = {
						has_modifier = modifier_tec_hidden_organicarch_modifier
					}
				}
				add_modifier = {
					modifier = modifier_tec_hidden_organicarch_modifier
					days = -1
				}
			}
			if = {
				limit = {
					has_valid_civic = civic_tec_machine_digitalization
					NOT = {
						has_modifier = modifier_tec_hidden_digitalization_modifier
					}
				}
				add_modifier = {
					modifier = modifier_tec_hidden_digitalization_modifier
					days = -1
				}
			}
			if = {
				limit = {
					tec_is_biohive = yes
				}
				if = {
					limit = {
						is_lithoid = no
					}
					add_modifier = {
						modifier = modifier_tec_hidden_biohive_modifier
						days = -1
					}
				}
				# Lithoids without organic architecture gets the effect
				if = {
					limit = {
						is_lithoid = yes
						NOT = {
							has_modifier = modifier_tec_hidden_organicarch_modifier
						}
					}
					add_modifier = {
						modifier = modifier_tec_hidden_lithohive_modifier
						days = -1
					}
				}
			}
		}
	}
# /

# ------------------------------------------------- Hoarders
namespace = tec_hoarders

	planet_event = {
		id = tec_hoarders.1
		title = "tec_hoarders.1.title"
		desc = "tec_hoarders.1.desc"
		picture = GFX_evt_metropolis

		is_triggered_only = yes

		trigger = {
			has_building = building_tec_vault_of_plenty
		}

		immediate = {
			save_event_target_as = tec_hoarders_managed_planet
			set_variable = {
				which = tec_stockpile_change
				value = 0
			}
			inline_script = {
				script = iterators/tec_iterate_hoarder_resource
				code = "
					remove_planet_flag = tec_vault_manage_$resource$
				"
			}
		}

		option = {
			name = "tec_hoarders.1.deposit"
			custom_tooltip = tec_hoarders.1.deposit.tooltip
			hidden_effect = {
				inline_script = {
					script = iterators/tec_iterate_hoarder_resource
					code = "
						tec_hoarders_deposit_max_resource = { RESOURCE = $resource$ }
					"
				}

				planet_event = {
					id = tec_hoarders.1
				}
			}
		}

		inline_script = {
			script = iterators/tec_iterate_hoarder_resource
			code = "
				inline_script = {
					script = events/tec_hoarder_manage_option
					resource = $resource$
				}
			"
		}

		option = {
			name = "tec_hoarders.1.withdraw"
			hidden_effect = {
				inline_script = {
					script = iterators/tec_iterate_hoarder_resource
					code = "
						tec_hoarders_withdraw_resource = { RESOURCE = $resource$ }
					"
				}

				planet_event = {
					id = tec_hoarders.1
				}
			}
		}

		option = {
			name = "tec_hoarders.1.exit"
		}
	}

	planet_event = {
		id = tec_hoarders.2
		title = "tec_hoarders.2.title"
		desc = "tec_hoarders.2.desc"
		picture = GFX_evt_metropolis

		is_triggered_only = yes

		option = {
			name = "tec_hoarders.2.max"
			hidden_effect = {
				change_variable = {
					which = tec_stockpile_change
					value = value:tec_hoarders_max_that_can_be_deposited
				}
				planet_event = {
					id = tec_hoarders.2
				}
			}
			allow = {
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_resources
					check_variable_arithmetic = {
						which = value:tec_hoarders_after_deposit_balance|DEPOSIT|0|
						value >= 0
					}
				}
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_vault_cap
					check_variable_arithmetic = {
						which = value:tec_hoarders_after_deposit_remaining_capacity|DEPOSIT|0|
						value >= 0
					}
				}
				owner = {
					tec_is_hoarder_empire = yes
				}
			}
		}

		inline_script = {
			script = events/tec_hoarder_deposit_option
			count = 10000
		}

		inline_script = {
			script = events/tec_hoarder_deposit_option
			count = 1000
		}

		inline_script = {
			script = events/tec_hoarder_deposit_option
			count = 500
		}

		inline_script = {
			script = events/tec_hoarder_deposit_option
			count = 100
		}

		inline_script = {
			script = events/tec_hoarder_withdraw_option
			count = 100
		}

		inline_script = {
			script = events/tec_hoarder_withdraw_option
			count = 500
		}

		inline_script = {
			script = events/tec_hoarder_withdraw_option
			count = 1000
		}

		inline_script = {
			script = events/tec_hoarder_withdraw_option
			count = 10000
		}

		option = {
			name = "tec_hoarders.2.withdraw"
			hidden_effect = {
				set_variable = {
					which = tec_stockpile_change
					value = value:tec_hoarder_get_vault_stockpile
				}
				multiply_variable = {
					which = tec_stockpile_change
					value = -1
				}
				planet_event = {
					id = tec_hoarders.2
				}
			}
			allow = {
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_stockpile
					check_variable_arithmetic = {
						which = value:tec_hoarder_get_vault_stockpile
						value > 0
					}
				}
			}
		}

		option = {
			name = "tec_hoarders.2.clear"
			hidden_effect = {
				set_variable = {
					which = tec_stockpile_change
					value = 0
				}
				planet_event = {
					id = tec_hoarders.2
				}
			}
		}

		option = {
			name = "tec_hoarders.2.complete"
			hidden_effect = {
				inline_script = {
					script = iterators/tec_iterate_hoarder_resource
					code = "
						tec_hoarders_manage_resource = { RESOURCE = $resource$ }
					"
				}
				set_variable = {
					which = tec_stockpile_change
					value = 0
				}
				planet_event = {
					id = tec_hoarders.1
				}
			}
			allow = {
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_resources
					check_variable_arithmetic = {
						which = value:tec_hoarders_after_deposit_balance|DEPOSIT|0|
						value >= 0
					}
				}
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_vault_cap
					check_variable_arithmetic = {
						which = value:tec_hoarders_after_deposit_remaining_capacity|DEPOSIT|0|
						value >= 0
					}
				}
				custom_tooltip = {
					fail_text = tec_hoarders.2.not_enough_stockpile
					check_variable_arithmetic = {
						which = value:tec_hoarders_after_withdraw_balance|WITHDRAW|0|
						value >= 0
					}
				}
			}
		}
	}

	pop_event = {
		id = tec_hoarders.3

		is_triggered_only = yes
		hide_window = yes

		trigger = {
			exists = from.owner
			exists = root.planet.owner
			root.planet.owner = {
				tec_is_hoarder_empire = yes
			}
			# from = { # commented for future balancing
			# 	planet_devastation > 50
			# }
		}

		immediate = {
			random_list = {
				8 = {
					random_list = {
						1 = {
							root.planet.owner = {
								add_resource = {
									minerals = 250
								}
							}
							from.owner = {
								add_resource = {
									minerals = -250
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = minerals
										value < 1000
									}
								}
							}
						}
						1 = {
							root.planet.owner = {
								add_resource = {
									food = 250
								}
							}
							from.owner = {
								add_resource = {
									food = -250
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = food
										value < 1000
									}
								}
							}
						}
					}
				}
				3 = {
					random_list = {
						1 = {
							root.planet.owner = {
								add_resource = {
									alloys = 250
								}
							}
							from.owner = {
								add_resource = {
									alloys = -250
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = alloys
										value < 1000
									}
								}
							}
						}
						1 = {
							root.planet.owner = {
								add_resource = {
									consumer_goods = 250
								}
							}
							from.owner = {
								add_resource = {
									consumer_goods = -250
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = consumer_goods
										value < 1000
									}
								}
							}
						}
					}
				}
				2 = {
					random_list = {
						1 = {
							root.planet.owner = {
								add_resource = {
									rare_crystals = 100
								}
							}
							from.owner = {
								add_resource = {
									rare_crystals = -100
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = rare_crystals
										value < 300
									}
								}
							}
						}
						1 = {
							root.planet.owner = {
								add_resource = {
									exotic_gases = 100
								}
							}
							from.owner = {
								add_resource = {
									exotic_gases = -100
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = exotic_gases
										value < 300
									}
								}
							}
						}
						1 = {
							root.planet.owner = {
								add_resource = {
									volatile_motes = 100
								}
							}
							from.owner = {
								add_resource = {
									volatile_motes = -100
								}
							}
							modifier = {
								factor = 0
								exists = from
								from.owner = {
									resource_stockpile_compare = {
										resource = volatile_motes
										value < 300
									}
								}
							}
						}
					}
				}
				1 = {
					root.planet.owner = {
						add_resource = {
							minor_artifacts = 50
						}
					}
					from.owner = {
						add_resource = {
							minor_artifacts = -50
						}
					}
					modifier = {
						factor = 0
						exists = from
						from.owner = {
							resource_stockpile_compare = {
								resource = minor_artifacts
								value < 100
							}
						}
					}
				}
				8 = {} # 40% chance of nothing being gotten
			}
		}
	}
# /

# ------------------------------------------------- Eco Exploiters
namespace = tec_eco_exploiters
# /

# ------------------------------------------------- Eco Keepers
namespace = tec_eco_keepers
# /

# ------------------------------------------------- Eco Rangers
namespace = tec_eco_rangers
# /

# ------------------------------------------------- Eco preservers
namespace = tec_eco_preservers

 # Created Ecosite, cyclic
	planet_event = {
		id = tec_eco_preservers.10
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			is_artificial = no
		}

		immediate = {
			planet_event = {
				id = tec_eco_preservers.10
				days = 7200
			}
			# Per planet type
			if = {	# Space Arcology
				limit = {
					is_artificial = yes
				}
				if = {		# Habs
					limit = {
						tec_is_habitat = yes
					}
					log = ""
					#tec_add_artificial_natural_blocker = {
					#	SIMPLE = YES
					#	#COUNT = 2
					#}
				}
				else_if = {	# Ely & RW
					limit = {
						OR = {
							tec_is_ringworld = yes
							tec_is_elysium = yes
						}
					}
					log = ""
					#tec_add_artificial_natural_blocker = {
					#	SIMPLE = NO
					#	#COUNT = 1
					#}
				}
				else = {	# Other cases
					log = ""
					#tec_add_artificial_natural_blocker = {
					#	SIMPLE = YES
					#	#COUNT = 2
					#}
				}
			}
			else_if = {	# Ecus
				limit = {
					tec_is_city_world = yes
				}
				log = ""
				#tec_add_artificial_natural_blocker = {
				#	SIMPLE = NO
				#	#COUNT = 2
				#}
			}
			else_if = {	# Regular/gaias
				limit = {
					tec_is_habitable_regular_planet = yes
				}
				log = ""
				#tec_add_regular_natural_blocker = {
				#	SIMPLE = YES
				#	#COUNT = 2
				#}
			}
			else = {	# Generic Case
				log = ""
				#tec_add_artificial_natural_blocker = {
				#	SIMPLE = NO
				#	#COUNT = 2
				#}
			}
		}
	}
 # /

# /

# ------------------------------------------------- Eco Terraformers
namespace = tec_eco_terraformers

 # Upgraded terrasculpt site, cyclic
	planet_event = {
		id = tec_eco_terraformers.5
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			has_building = building_tec_eco_engineers_terrasculptor_active
		}

		immediate = {
			set_saved_date = {
				key = tec_terrasculpting_timer
				days_from_present = 3600
				expires = 3600
			}
			set_timed_planet_flag = {
				flag = anti_cheese_tec_terrasculpting
				days = 3599
			}
			planet_event = {
				id = tec_eco_terraformers.10
				days = 3600
			}
		}
	}
	planet_event = {
		id = tec_eco_terraformers.10
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			NOT = {
				has_planet_flag = anti_cheese_idyllic_bloom_flag
			}
		}

		immediate = {
			set_saved_date = {
				key = tec_terrasculpting_timer
				days_from_present = 3600
				expires = 3600
			}
			set_timed_planet_flag = {
				flag = anti_cheese_tec_terrasculpting
				days = 3599
			}

			planet_event = {	# Autocycle
				id = tec_eco_terraformers.10
				days = 3600
			}
			# Per planet type
			if = {	# Space Arcology
				limit = {
					is_artificial = yes
				}
				if = {		# Habs
					limit = {
						tec_is_habitat = yes
					}
					tec_add_artificial_engineered_deposit = {
						SIMPLE = yes
						#COUNT = 1
					}
				}
				else_if = {	# Ely & RW
					limit = {
						OR = {
							tec_is_ringworld = yes
							tec_is_elysium = yes
						}
					}
					tec_add_artificial_engineered_deposit = {
						SIMPLE = no
						#COUNT = 1
					}
				}
				else = {	# Other cases
					tec_add_artificial_engineered_deposit = {
						SIMPLE = yes
						#COUNT = 1
					}
				}
			}
			else_if = {	# Ecus
				limit = {
					tec_is_city_world = yes
				}
				tec_add_artificial_engineered_deposit = {
					SIMPLE = NO
					#COUNT = 1
				}
			}
			else_if = {	# Regular/gaias
				limit = {
					tec_is_habitable_regular_planet = yes
				}
				tec_add_artificial_engineered_deposit = {
					SIMPLE = yes
					#COUNT = 1
				}
			}
			else = {	# Generic Case
				tec_add_artificial_engineered_deposit = {
					SIMPLE = no
					#COUNT = 1
				}
			}
		}
	}
 # /

# /

# ------------------------------------------------- Ascensionists
namespace = tec_ascensionists

	# on_planet_transfer / on_colonized
	planet_event = {
		id = tec_ascensionists.100
		hide_window = yes
		is_triggered_only = yes

		immediate = {
			if = {
				limit = {
					exists = owner
					owner = {
						is_ascensionist_empire = yes
					}
					has_planetary_ascension_tier < 1
					exists = sector
					sector = { has_sector_type = core_sector }
				}
				set_planetary_ascension_tier = 1
			}
		}
	}
# /

# ------------------------------------------------- Netrunners
namespace = tec_netrunners

	# on_game_start_country / on_post_government_changed
	country_event = {
		id = tec_netrunners.10
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			OR = {
				# Not has modifier
				AND = {
					has_valid_civic = civic_tec_regular_netrunners
					NOT = {
						has_modifier = country_modifier_tec_civic_tec_regular_netrunners
					}
				}
				AND = {
					has_valid_civic = civic_tec_corporate_netrunners
					NOT = {
						has_modifier = country_modifier_tec_civic_tec_corporate_netrunners
					}
				}
				# Has modifier but not netrunner
				AND = {
					NOT = { tec_is_netrunner_empire = yes }
					OR = {
						has_modifier = country_modifier_tec_civic_tec_regular_netrunners
						has_modifier = country_modifier_tec_civic_tec_corporate_netrunners
					}
				}
			}
		}

		immediate = {
			# Not has modifier
			if = {
				limit = {
					has_valid_civic = civic_tec_regular_netrunners
					NOT = {
						has_modifier = country_modifier_tec_civic_tec_regular_netrunners
					}
				}
				add_modifier = {
					modifier = country_modifier_tec_civic_tec_regular_netrunners
					multiplier = value:tec_num_spynetworks
				}
			}
			if = {
				limit = {
					has_valid_civic = civic_tec_corporate_netrunners
					NOT = {
						has_modifier = country_modifier_tec_civic_tec_corporate_netrunners
					}
				}
				add_modifier = {
					modifier = country_modifier_tec_civic_tec_corporate_netrunners
					multiplier = value:tec_num_spynetworks
				}
			}
			# Has modifier but its not adequate
			if = {
				limit = {
					NOT = { tec_is_netrunner_empire = yes }
					OR = {
						has_modifier = country_modifier_tec_civic_tec_regular_netrunners
						has_modifier = country_modifier_tec_civic_tec_corporate_netrunners
					}
				}
				if = {
					limit = {
						has_modifier = country_modifier_tec_civic_tec_regular_netrunners
					}
					remove_modifier = country_modifier_tec_civic_tec_regular_netrunners
				}
				if = {
					limit = {
						has_modifier = country_modifier_tec_civic_tec_corporate_netrunners
					}
					remove_modifier = country_modifier_tec_civic_tec_corporate_netrunners
				}
			}
		}
	}

	# on_yearly_pulse_country
	# FORMERLY on_tec_spynetwork_open / on_tec_spynetwork_closed
	# Updates the modifier
	country_event = {
		id = tec_netrunners.20
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			tec_is_netrunner_empire = yes
		}

		immediate = {
			# Regular
			if = {
				limit = {
					has_valid_civic = civic_tec_regular_netrunners
				}
				remove_modifier = country_modifier_tec_civic_tec_regular_netrunners
				add_modifier = {
					modifier = country_modifier_tec_civic_tec_regular_netrunners
					multiplier = value:tec_num_spynetworks
				}
			}
			# Corp
			if = {
				limit = {
					has_valid_civic = civic_tec_corporate_netrunners
				}
				remove_modifier = country_modifier_tec_civic_tec_corporate_netrunners
				add_modifier = {
					modifier = country_modifier_tec_civic_tec_regular_netrunners
					multiplier = value:tec_num_spynetworks
				}
			}
		}
	}
# /

# ------------------------------------------------- Netrunners
namespace = tec_megacities

	# on_district_demolished
	# Counts previous city districts and adds var to the planet
	planet_event = {
		id = tec_megacities.10
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			exists = owner
			owner = {
				tec_is_megacity_empire = yes
			}
			check_variable = {	# Avoids overbuilding megacities
				which = tec_megacities_built
				value < 6
			}
			# NOTE: CHECK
				# inline_script = districts/convert_to/part/tec_regular_housing_districts
				# inline_script = districts/convert_to/part/tec_habitat_housing_districts
				# inline_script = districts/convert_to/part/tec_arcology_housing_districts
				# inline_script = districts/convert_to/part/tec_rw_housing_districts
			# /
			# Lets avoid it to trigger constantly
			OR = {
				# 3 = 1
					last_district_changed = district_crashed_slaver_ship
					last_district_changed = district_tec_proto_city
				# /
				# 2 = 1
					last_district_changed = district_city
					last_district_changed = district_hive
					last_district_changed = district_nexus

					last_district_changed = district_hab_housing
					last_district_changed = district_tec_elysium_arcology
					last_district_changed = district_arcology_housing
					last_district_changed = district_tec_arcology_housing_precursor
					last_district_changed = district_tec_eco_arcology
					last_district_changed = district_tec_elysium_arcology
					last_district_changed = district_tec_hab_arcology_housing
						# PD
						inline_script = {
							script = mod_support/tec_pd_arcologies_present
							code = "
								last_district_changed = district_pd_hive
								last_district_changed = district_pd_nexus
							"
						}
						inline_script = {
							script = mod_support/tec_pd_ascensions_present
							code = "
								last_district_changed = district_pd_flora_hive
							"
						}
						# GIGAS
						inline_script = {
							script = mod_support/tec_giga_present
							code = "
								last_district_changed = district_city_katzen
								last_district_changed = district_giga_planet_city
								last_district_changed = district_giga_planet_hive
								last_district_changed = district_giga_planet_nexus
								last_district_changed = district_giga_gas_giant_habitat_city
								last_district_changed = district_giga_gas_giant_habitat_hive
								last_district_changed = district_giga_gas_giant_habitat_nexus
								last_district_changed = district_giga_hab_city
								last_district_changed = district_giga_hab_hive
								last_district_changed = district_giga_hab_nexus
								last_district_changed = district_giga_elysium_housing
								last_district_changed = district_flusion_city
								last_district_changed = district_giga_frameworld_city_advanced
								last_district_changed = district_giga_frameworld_hive_advanced
								last_district_changed = district_giga_frameworld_nexus_advanced
							"
						}
						# GPM
						last_district_changed = district_gpm_precursor_housing
				# /
				# 1 = 1
					last_district_changed = district_rw_city
					last_district_changed = district_rw_hive
					last_district_changed = district_rw_nexus
						# GIGAS
						inline_script = {
							script = mod_support/tec_giga_present
							code = "
								last_district_changed = district_virtual_city
								last_district_changed = district_virtual_hive
								last_district_changed = district_virtual_nexus

								last_district_changed = district_giga_alderson_city
								last_district_changed = district_giga_alderson_hive
								last_district_changed = district_giga_alderson_nexus
							"
						}
				# /
			}
		}

		immediate = {
			# Oof
			switch = {	# Exchange district values
				trigger = last_district_changed
				# 3 = 1
					district_crashed_slaver_ship = {
						change_variable = {
							which = tec_city_value
							value = 1.35
						}
					}
					district_tec_proto_city = {
						change_variable = {
							which = tec_city_value
							value = 1.35
						}
					}
				# /
				# 2 = 1
					district_city = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_hive = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_nexus = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					
					district_hab_housing = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_tec_elysium_arcology = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_arcology_housing = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_tec_arcology_housing_precursor = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_tec_eco_arcology = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					district_tec_elysium_arcology = {
						change_variable = {
							which = tec_city_value
							value = 1
						}
					}
					district_tec_hab_arcology_housing = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
					# PD
					inline_script = {
						script = mod_support/tec_pd_arcologies_present
						code = "
							district_pd_hive = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_pd_nexus = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
						"
					}
					inline_script = {
						script = mod_support/tec_pd_ascensions_present
						code = "
								district_pd_flora_hive = {
									change_variable = {
										which = tec_city_value
										value = 2
									}
								}
							"
					}
					inline_script = {
						script = mod_support/tec_giga_present
						code = "
							# GIGAS
							district_city_katzen = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_planet_city = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_planet_hive = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_planet_nexus = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_gas_giant_habitat_city = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_gas_giant_habitat_hive = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_gas_giant_habitat_nexus = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_hab_city = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_hab_hive = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_hab_nexus = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_elysium_housing = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_flusion_city = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_frameworld_city_advanced = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_frameworld_hive_advanced = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
							district_giga_frameworld_nexus_advanced = {
								change_variable = {
									which = tec_city_value
									value = 2
								}
							}
						"
					}
					# GPM
					district_gpm_precursor_housing = {
						change_variable = {
							which = tec_city_value
							value = 2
						}
					}
				# /
				# 1 = 1
					district_rw_city = {
						change_variable = {
							which = tec_city_value
							value = 4
						}
					}
					district_rw_hive = {
						change_variable = {
							which = tec_city_value
							value = 4
						}
					}
					district_rw_nexus = {
						change_variable = {
							which = tec_city_value
							value = 4
						}
					}
					# GIGAS
					inline_script = {
						script = mod_support/tec_giga_present
						code = "
							district_virtual_city = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}
							district_virtual_hive = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}
							district_virtual_nexus = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}

							district_giga_alderson_city = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}
							district_giga_alderson_hive = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}
							district_giga_alderson_nexus = {
								change_variable = {
									which = tec_city_value
									value = 4
								}
							}
						"
					}
				# /
			}
			# Creates the megacities based on the variable
			if = {	# Lets check 
				limit = {
					check_variable = {
						which = tec_city_value
						value >= 4
					}
					check_variable = {
						which = tec_megacities_built
						value < 6
					}
				}
				# Lets see how many we can build
				set_variable = {	# Just in case
					which = tec_potential_megacities
					value = 0
				}
				change_variable = {
					which = tec_potential_megacities
					value = tec_city_value
				}
				multiply_variable = {
					which = tec_potential_megacities
					value = 0.25
				}
				if = {		# 4 megacities - will prio 2 upgraded ones
					limit = {
						check_variable = {
							which = tec_potential_megacities
							value >= 4
						}
					}
					if = {		# 2 open building slots
						limit = {
							free_building_slots >= 2
						}
					}
					else = {	# No building slots
						
					}
				}
				else_if = { # 3 megacities - will prio 1 upgraded 1 unupgraded
					limit = {
						check_variable = {
							which = tec_potential_megacities
							value >= 3
						}
					}
					if = {
						limit = {

						}
					}
					else = {
						
					}
				}
				else_if = {	# 2 megacities - will prio 1 upgraded
					limit = {
						check_variable = {
							which = tec_potential_megacities
							value >= 2
						}
					}
					if = {
						limit = {

						}
					}
					else = {
						
					}
				}
				else_if = {	# 1 megacity
					limit = {
						check_variable = {
							which = tec_potential_megacities
							value >= 1
						}
					}
					if = {
						limit = {

						}
					}
					else = {
						
					}
				}
				else = {	# fallback to 1 megacity
					if = {
						limit = {

						}
					}
					else = {
						
					}
				}
			}
			else = {
				break = yes
			}
		}
	}

	# 
	# Destroys megacities if a non megacity empire gets them


	# 
	# Destroys city districts if a megacity empire conquers a world that has any city district
# /

# ------------------------------------------------------------
# REGULAR
# ------------------------------------------------------------
# ------------------------------------------------- Imperial cult
namespace = tec_imperial_cult

	# marks the leader when the civic is added

	# unmarks the leader when the civic is removed, but preserves choices

	# intro

	# growing in power

	#


	# path a - sanguine reign
	# - Ruler uses the life of others for itself
	# path b - clone reign
	# - Ruler perpetuates itself via cloning, with a inherited dynasty
	# path c - benevolent reign
	# - Ruler is just an uninteresting character
	# path d - cyborg god
	# - Ruler uses specific cybernetic augmentations and a throne to keep himself tied up
	# path e - power of the old ones
	# - Ruler uses minor artifacts to empower himself

	# path f - Chosen one (override)
# /

# ------------------------------------------------------------
# CORP
# ------------------------------------------------------------

# ------------------------------------------------------------
# HIVE
# ------------------------------------------------------------
namespace = tec_hive_brood
 # Growth - Eusociality (11XX)

 # /
 # Growth - Splicer queens (12XX)

 # /
 # Output - Overminds (21XX)

 # /
 # Output - Cerebrates (22XX)

 # /
 # Protean (31XX)

 # /
 # Mutagenic (32XX)
	# Mutagenic game start - mutates 1/3 of the population

	# Predatory Consumption - Growth
	# Fired by: on_colony_yearly_pulse
	# This = Planet
	planet_event = {	# TODO CIVIC
		id = tec_hive_brood.3205
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			exists = owner
			owner = {
				has_valid_civic = civic_tec_hive_brood_mutagenic
			}
			# Lets ensure it has broodtwister jobs
			num_assigned_jobs = {
				#job = tec_broodtwister_drone
				job = tec_broodqueen_drone
				value > 0
			}
		}

		immediate = {
			export_trigger_value_to_variable = {
				trigger = num_assigned_jobs
				parameters = {
					#job = tec_broodtwister_drone
					job = tec_broodqueen_drone
				}
				variable = tec_num_broodtwisters
			}
			# Number of pops to mutate
			while = {
				count = value:tec_num_broodtwisters_scaling
				random_owned_pop = {
					limit = {
						exists = this
						is_hive_species = yes
					}
					if = {	# Has modifier
						limit = {
							OR = {
								has_modifier = pop_modifier_tec_broodtwisted_stage_bad
								has_modifier = pop_modifier_tec_broodtwisted_stage_1
								has_modifier = pop_modifier_tec_broodtwisted_stage_2
								has_modifier = pop_modifier_tec_broodtwisted_stage_3
							}
						}
						random_list = {
							1 = {	# Upgrades the modifier
								modifier = {
									factor = value:tec_broodtwister_mutation_chance_scaling|SCOPE|root|GOOD|yes|REPEATABLE|yes|
									always = yes
								}
								add_modifier = {
									modifier = pop_modifier_tec_broodtwisted_stage_1
								}
							}
							1 = {	# Reduces the modifier
								modifier = {
									factor = value:tec_broodtwister_mutation_chance_scaling|SCOPE|root|BAD|yes|REPEATABLE|yes|
									always = yes
								}
								add_modifier = {
									modifier = pop_modifier_tec_broodtwisted_stage_bad
								}
							}
						}
					}
					else = {	# Does not have modifier
						random_list = {
							1 = {	# Gain a positive modifier
								modifier = {
									factor = value:tec_broodtwister_mutation_chance_scaling|SCOPE|root|GOOD|yes|
									always = yes
								}
								add_modifier = {
									modifier = pop_modifier_tec_broodtwisted_stage_1
								}
							}
							1 = {	# Gain a negative modifier
								modifier = {
									factor = value:tec_broodtwister_mutation_chance_scaling|SCOPE|root|BAD|yes|
									always = yes
								}
								add_modifier = {
									modifier = pop_modifier_tec_broodtwisted_stage_bad
								}
							}
						}
					}
				}
			}
		}
	}
 # /
 # Cluster

 # /
 # Bioshaper

 # /
# /

# ------------------------------------------------- Percussive Hiveminds
namespace = tec_percuhive

	# Executed as a leader has died
	# This = Country
	# From = Leader
	#on_leader_death = {
	country_event = {
		id = tec_percuhive.10
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			has_valid_civic = civic_tec_hive_percussive
			NOT = {
				has_country_flag = tec_percussive_cd
			}
			from = {
				leader_class = commander
			}
		}

		immediate = {
			# Adds country flag
			set_timed_country_flag = {
				flag = tec_percussive_cd
				months = 12
			}
			# Apply effect
			add_modifier = {
				modifier = modifier_tec_percussive_modifier_good
				multiplier = from.trigger:has_skill
				months = 2
			}
		}
	}
# /

# ------------------------------------------------- Hive Everevolving
namespace = tec_hive_everevolving

	# Everevolving hive events - 1000-1100
	country_event = {
		id = tec_hive_everevolving.1000
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_hive_everevolving
		}

		immediate = {
			add_modifier = {
				modifier = modifier_tec_everevolving_primal
				days = -1
			}
			set_variable = {
				which = modifier_tec_everevolving_checker
				value = 0
			}
		}
	}

	# Everevolving hive trigger
	country_event = {
		id = tec_hive_everevolving.1001
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_hive_everevolving
		}
		
		immediate = {
			# 10% chance of evolving per 2 year passed, if a empire hasnt evolved in 10 years 40%
			if = {
				limit = {
					check_variable = {
						which = modifier_tec_everevolving_checker
						value < 5
					}
				}
				random_list = {
					1 = {
						# variable will be reseted anyways if conditions are met
					#	change_variable = {
					#		which = modifier_tec_everevolving_checker
					#		value = 1
					#	}
						country_event = {
							id = tec_hive_everevolving.1002
						#	days = 45
						}
					}
					9 = {
						change_variable = {
							which = modifier_tec_everevolving_checker
							value = 1
						}
						# more luck next time
					}

				}
			}
			if = {
				limit = {
					check_variable = {
						which = modifier_tec_everevolving_checker
						value >= 5
					}
				}
				random_list = {
					4 = {
						# variable will be reseted anyways if conditions are met
					#	change_variable = {
					#		which = modifier_tec_everevolving_checker
					#		value = 1
					#	}
						country_event = {
							id = tec_hive_everevolving.1002
						#	days = 45
						}
					}
					6 = {
						change_variable = {
							which = modifier_tec_everevolving_checker
							value = 1
						}
						# more luck next time
					}
				}
			}
			
		}
	}

	# Hive everevolving manager
	country_event = {
		id = tec_hive_everevolving.1002
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_hive_everevolving
		}

		immediate = {
			hidden_effect = {
				# Primal to Young
				if = {
					limit = {
						OR = {
							num_owned_planets > 3
							years_passed > 15
							num_rare_techs > 0
						#	always = yes
						}
						NOR = {
							has_country_flag = tec_young_hive
							has_country_flag = tec_mature_hive
							has_country_flag = tec_venerable_hive
						}
					}
					set_variable = {
						which = modifier_tec_everevolving_checker
						value = 0
					}
					set_country_flag = tec_young_hive
					remove_country_flag = tec_primal_hive
					remove_modifier = modifier_tec_everevolving_primal
					add_modifier = {
						modifier = modifier_tec_everevolving_young
						days = -1
					}
					country_event = {
						id = tec_hive_everevolving.1010
					}
					break = yes
				}
				# Young to Primal - Yes, its possible to revert
				if = {
					limit = {
						always = no
						has_country_flag = tec_young_hive
						num_owned_planets < 4
						num_pops < 60
						NOR = {
							has_country_flag = tec_mature_hive
							has_country_flag = tec_venerable_hive
						}
					}
					set_variable = {
						which = modifier_tec_everevolving_checker
						value = 0
					}
					remove_country_flag = tec_young_hive
					set_country_flag = tec_primal_hive
					remove_modifier = modifier_tec_everevolving_young
					add_modifier = {
						modifier = modifier_tec_everevolving_primal
						days = -1
					}
					country_event = {
						id = tec_hive_everevolving.1011
					}
					break = yes
				}

				# Young to Mature
				if = {
					limit = {
					#	always = yes
						has_country_flag = tec_young_hive
						num_owned_planets > 3
						years_passed > 30
						num_pops > 50
						NOR = {
							has_country_flag = tec_mature_hive
							has_country_flag = tec_venerable_hive
						}
					}
					set_variable = {
						which = modifier_tec_everevolving_checker
						value = 0
					}
					remove_country_flag = tec_young_hive
					set_country_flag = tec_mature_hive
					remove_modifier = modifier_tec_everevolving_young
					add_modifier = {
						modifier = modifier_tec_everevolving_mature
						days = -1
					}
					country_event = {
						id = tec_hive_everevolving.1012
					}
					break = yes
				}
				# Mature to Venerable
				if = {
					limit = {
					#	always = yes
						has_country_flag = tec_mature_hive
						num_owned_planets > 3
						num_pops > 80
						years_passed > 50
						num_rare_techs > 1
						NOT = {
							has_country_flag = tec_venerable_hive
						}
					}
					set_variable = {
						which = modifier_tec_everevolving_checker
						value = 0
					}
					remove_country_flag = tec_mature_hive
					set_country_flag = tec_venerable_hive
					remove_modifier = modifier_tec_everevolving_mature
					add_modifier = {
						modifier = modifier_tec_everevolving_venerable
						days = -1
					}
					country_event = {
						id = tec_hive_everevolving.1013
					}
					break = yes
				}
			}
		}
	}

		# evolved to young
	country_event = {
		id = tec_hive_everevolving.1010
		title = tec_hive_everevolving.1010.title
		desc = tec_hive_everevolving.1010.desc
		picture = GFX_evt_unity_symbol
		show_sound = event_alien_nature


		is_triggered_only = yes

		option = {
			name = tec_hive_everevolving.1010.a	# We shall improve, we shall evolve.
		}
	}

		# devolved to feral
	country_event = {
		id = tec_hive_everevolving.1011
		title = tec_hive_everevolving.1011.title
		desc = tec_hive_everevolving.1011.desc
		picture = GFX_evt_unity_symbol
		show_sound = event_alien_nature


		is_triggered_only = yes

		option = {
			name = tec_hive_everevolving.1011.a	# Consume... Improve... Overcome...
		}
	}

		# evolved to mature
	country_event = {
		id = tec_hive_everevolving.1012
		title = tec_hive_everevolving.1012.title
		desc = tec_hive_everevolving.1012.desc
		picture = GFX_evt_unity_symbol
		show_sound = event_alien_nature


		is_triggered_only = yes

		option = {
			name = tec_hive_everevolving.1012.a	# Our mind stays strong and our will is infinite.
		}
	}

		# evolved to venerable
	country_event = {
		id = tec_hive_everevolving.1013
		title = tec_hive_everevolving.1013.title
		desc = tec_hive_everevolving.1013.desc
		picture = GFX_evt_unity_symbol
		show_sound = event_alien_nature


		is_triggered_only = yes

		option = {
			name = tec_hive_everevolving.1013.a	# We are one and infinite and so we will be through eons.
		}
	}
# /

# ------------------------------------------------- Hive Cordyceptic
namespace = tec_hive_cordyceptic
	# Cordyceptic gamestart change
	country_event = {
		id = tec_hive_cordyceptic.100
		hide_window = yes
		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_hive_cordyceptic_drones
		}

		immediate = {
			every_owned_starbase = {
				limit = {
					has_starbase_building = crew_quarters
				}
				remove_starbase_building = {
					building = crew_quarters
				}
				set_starbase_building = {
					slot = 1
					building = cordyceptic_reanimation_facility
				}
			}
			every_owned_starbase = {
				limit = {
					has_starbase_building = cordyceptic_reanimation_facility
				}
				starbase_event = { id = necroids.305 days = @tec_cordyceptic_timer }
			}
		}
	}
# /


# ------------------------------------------------------------
# MACHINE
# ------------------------------------------------------------

# ------------------------------------------------- Servitors
namespace = tec_machine_servitor
	# Servitor branch migration mechanic

	# Gestalt migration event - Manager
	planet_event = {
		id = tec_machine_servitor.5555
		hide_window = yes
		
		is_triggered_only = yes

		trigger = {
			has_planet_flag = tec_servitor_snatcher_candidate
			has_branch_office = yes
			has_holding = {
				holding = building_tec_machinecorp_carebots_2
				owner = branch_office_owner
			}
			# double check just in case
			branch_office_owner = {
				is_gestalt = yes
				is_machine_empire = yes
				tec_is_branch_office_machine = yes
			}
		}

		immediate = {
			hidden_effect = {
				random_list = {
					66 = {
						# nothing, repeats itself
					}
					33 = {
						# A happy pop moves to a servitor planet
						random_owned_pop = {
							limit = {
								has_job = tec_hedonist
								is_organic_species = yes
							}
							species = {
								save_event_target_as = tec_servitor_snatched_pop
							}
						}

						branch_office_owner = {
							change_variable = {
								which = tec_branch_snatched_pops
								value = 1
							}
							random_owned_planet = {
								limit = {
									has_available_jobs = bio_trophy
								}
								create_pop = {
									species = event_target:tec_servitor_snatched_pop
									ethos = {
										ethic = "ethic_xenophile"
									}
								}
								last_created_pop = {
									if = {
										limit = {
											prev.owner = {
												has_technology = tech_glandular_acclimation
											}
											prev = {
												# For avoiding messy errors or op habitability
												tec_is_habitable_regular_planet = yes
											}
											NOT = {
												ideal_planet_class = prev
											}
										}
										last_created_pop = {
											modify_species = {
												ideal_planet_class = prev
											}
										}
									}
								}
								# deliver message to the gestalt empire 
								owner = {
									create_message = {
										type = MESSAGE_TEC_SNATCHED_POP_EVENT
										localization = MESSAGE_TEC_SNATCHED_POP
										days = 30
										target = this
										variable = {
											type = name
											localization = SPECIES
											scope = event_target:tec_servitor_snatched_pop
										}
										variable = {
											type = name
											localization = OGPLANET
											scope = root
										}
										variable = {
											type = name
											localization = PLANET
											scope = prev
										}
									}
								}
								# deliver message to the branch host empire
								root.owner = {
									create_message = {
										type = MESSAGE_TEC_SNATCHED_POP_OG_EVENT
										localization = MESSAGE_TEC_SNATCHED_POP_OG
										days = 30
										target = this
										variable = {
											type = name
											localization = SPECIES
											scope = event_target:tec_servitor_snatched_pop
										}
										variable = {
											type = name
											localization = OGPLANET
											scope = root
										}
										variable = {
											type = name
											localization = PLANET
											scope = prev
										}
									}
								}
								
							}
						}
					}
				}
			}
		}

		after = {
			planet_event = {
				id = tec_machine_servitor.5555
				days = 1800
				random = 100
			}
		}
	}

	# Gestalt migration event - Branch office owner via message 
	# will do soon tm ^_^

	# Gestalt migration event - Inform the host via message
	# will do soon tm ^_^
# /

# ------------------------------------------------- Query Proposers
namespace = tec_machine_pompous

	country_event = {
		id = tec_machine_pompous.100
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_pompous
		}
		
		immediate = {
			export_resource_stockpile_to_variable = {
				resource = influence
				variable = tec_influence_temp
			}
			if = {		# Capped at 1000
				limit = {
					check_variable = {
						which = tec_influence_temp
						value <= 1000
					}
				}
				# Multiplies it by 0.01
				multiply_variable = {
					which = tec_influence_temp
					value = 0.05
					# 1000 influence = 50%
				}
			}
			else = {	# Over 1000 = 50% still
				set_variable = {
					which = tec_influence_temp
					value = 50
				}
			}
			remove_modifier = modifier_tec_machine_pompous
			add_modifier = {
				modifier = modifier_tec_machine_pompous
				mult = tec_influence_temp
			}
			clear_variable = tec_influence_temp
		}
	}
# /

# ------------------------------------------------- Impersonation Protocol
namespace = tec_machine_impersonation
	# Impersonation protocol events - 2000
	# manager - on 5 year pulse
	country_event = {
		id = tec_machine_impersonation.1999
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		immediate = {
			# each 10 years
			change_variable = {
				which = tec_machinebias_checker
				value = 1
			}
			if = {
				limit = {
					check_variable = {
						which = tec_machinebias_checker
						value = 2
					}
				}
		
				# Procurator round to other
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_procurator
					}
					set_country_flag = tec_was_procurator_bias
					set_variable = {
						which = tec_machinebias_checker
						value = 0
					}
					# was inventor, automatically offender wins
					if = {
						limit = {
							has_country_flag = tec_was_inventor_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}
					}
					# was offender, automatically inventor wins
					if = {
						limit = {
							has_country_flag = tec_was_offender_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}
					}
					# Only was procurator, never the others
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_inventor_bias
								has_country_flag = tec_was_offender_bias
							}
						}
						random_list = {
							1 = {	# offender wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_offender
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2011
									days = 2
								}
							}
							1 = {	# inventor wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_inventor
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2012
									days = 2
								}
							}
						}
					}
				}

				# Inventor round to other
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_inventor
					}
					set_country_flag = tec_was_inventor_bias
					set_variable = {
						which = tec_machinebias_checker
						value = 0
					}
					# was procurator, automatically offender wins
					if = {
						limit = {
							has_country_flag = tec_was_procurator_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}
					}
					# was offender, automatically procurator wins
					if = {
						limit = {
							has_country_flag = tec_was_offender_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}
					}
					# Only was procurator, never the others
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_inventor_bias
								has_country_flag = tec_was_offender_bias
							}
						}
						random_list = {
							1 = {	# procurator wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_procurator
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2010
									days = 2
								}
							}
							1 = {	# offender wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_offender
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2011
									days = 2
								}
							}
							
						}
					}
				}

				# offender round to other
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_offender
					}
					set_country_flag = tec_was_offender_bias
					set_variable = {
						which = tec_machinebias_checker
						value = 0
					}
					# was procurator, automatically inventor wins
					if = {
						limit = {
							has_country_flag = tec_was_procurator_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}
					}
					# was inventor, automatically procurator wins
					if = {
						limit = {
							has_country_flag = tec_was_inventor_bias
						}
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}
					}
					# Only was offender, never the others
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_inventor_bias
								has_country_flag = tec_was_offender_bias
							}
						}
						random_list = {
							1 = {	# procurator wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_procurator
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2010
									days = 2
								}
							}
							1 = {	# inventor wins
								remove_modifier = modifier_tec_impersonation_neutral
								remove_modifier = modifier_tec_impersonation_procurator
								remove_modifier = modifier_tec_impersonation_offender
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_inventor
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2012
									days = 2
								}
							}
							
						}
					}
				}

				# prevents repetition
				if = {	# first round
					limit = {
						has_modifier = modifier_tec_impersonation_neutral
					}
					set_variable = {
						which = tec_machinebias_checker
						value = 0
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# offender wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
					}
				}

				# Round reset
				if = {
					limit = {
						has_country_flag = tec_was_procurator_bias
						has_country_flag = tec_was_offender_bias
						has_country_flag = tec_was_inventor_bias
					}
					if = {
						limit = {
							NOT = {
								has_modifier = modifier_tec_impersonation_procurator
							}
						}
						remove_country_flag = tec_was_procurator_bias
					}
					if = {
						limit = {
							NOT = {
								has_modifier = modifier_tec_impersonation_offender
							}
						}
						remove_country_flag = tec_was_offender_bias
					}
					if = {
						limit = {
							NOT = {
								has_modifier = modifier_tec_impersonation_inventor
							}
						}
						remove_country_flag = tec_was_inventor_bias
					}
					
				}
				
			}
			else = {
				#nothing
			}
		}
	}

	country_event = {
		id = tec_machine_impersonation.2000
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		immediate = {
			# each 10 years
			change_variable = {
				which = tec_machinebias_checker
				value = 1
			}
			if = {
				limit = {
					check_variable = {
						which = tec_machinebias_checker
						value = 2
					}
				}
				# reset
				set_variable = {
					which = tec_machinebias_checker
					value = 0
				}
				
			#	if = {
			#		limit = {
			#			has_country_flag = tec_was_procurator_bias
			#			has_country_flag = tec_was_offender_bias
			#			has_country_flag = tec_was_inventor_bias
			#		}
			#		remove_country_flag = tec_was_procurator_bias
			#		remove_country_flag = tec_was_offender_bias
			#		remove_country_flag = tec_was_inventor_bias
			#		random_list = {
			#	#		1 = {
			#	#			remove_country_flag = tec_was_procurator_bias
			#	#		}
			#	#		1 = {
			#	#			remove_country_flag = tec_was_offender_bias
			#	#		}
			#	#		1 = {
			#	#			remove_country_flag = tec_was_inventor_bias
			#	#		}
			#			
			#			
			#		}

				if = {	# first round
					limit = {
						has_modifier = modifier_tec_impersonation_neutral
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_neutral
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# offender wins
							remove_modifier = modifier_tec_impersonation_neutral
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_neutral
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
					}
					break = yes
				}

				# If has Procurator
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_procurator
					}
					set_country_flag = tec_was_procurator_bias
					if = {
						limit = {
							has_country_flag = tec_was_inventor_bias
						}
						remove_modifier = modifier_tec_impersonation_procurator
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}

						remove_country_flag = tec_was_inventor_bias


						break = yes
					}
					if = {
						limit = {
							has_country_flag = tec_was_offender_bias
						}
						remove_modifier = modifier_tec_impersonation_procurator
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}

						remove_country_flag = tec_was_offender_bias

						break = yes
					}
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_inventor_bias
								has_country_flag = tec_was_offender_bias	
							}
						}
						random_list = {
							1 = {	# offender wins
								remove_modifier = modifier_tec_impersonation_procurator
								add_modifier = {
									modifier = modifier_tec_impersonation_offender
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2011
									days = 2
								}
							}
							1 = {	# inventor wins
								remove_modifier = modifier_tec_impersonation_procurator
								add_modifier = {
									modifier = modifier_tec_impersonation_inventor
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2012
									days = 2
								}
							}
						}
					}

					
					
					break = yes
				}

				# If has Inventor
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_inventor
					}
					set_country_flag = tec_was_inventor_bias
					if = {
						limit = {
							has_country_flag = tec_was_procurator_bias
						}
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}

						remove_country_flag = tec_was_procurator_bias

						break = yes
					}
					if = {
						limit = {
							has_country_flag = tec_was_offender_bias
						}
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}

						remove_country_flag = tec_was_offender_bias

						break = yes
					}
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_procurator_bias
								has_country_flag = tec_was_offender_bias	
							}
						}
						random_list = {
							1 = {	# procurator wins
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_procurator
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2010
									days = 2
								}
							}
							1 = {	# inventor wins
								remove_modifier = modifier_tec_impersonation_inventor
								add_modifier = {
									modifier = modifier_tec_impersonation_offender
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2011
									days = 2
								}
							}
						}
					}
					
					break = yes
				}

				
				# If has Offender
				if = {
					limit = {
						has_modifier = modifier_tec_impersonation_offender
					}
					set_country_flag = tec_was_offender_bias
					if = {
						limit = {
							has_country_flag = tec_was_procurator_bias
						}
						remove_modifier = modifier_tec_impersonation_offender
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}

						remove_country_flag = tec_was_procurator_bias

						break = yes
					}
					if = {
						limit = {
							has_country_flag = tec_was_inventor_bias
						}
						remove_modifier = modifier_tec_impersonation_offender
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}

						remove_country_flag = tec_was_inventor_bias

						break = yes
					}
					if = {
						limit = {
							NOR = {
								has_country_flag = tec_was_procurator_bias
								has_country_flag = tec_was_inventor_bias	
							}
						}
						random_list = {
							1 = {	# procurator wins
								remove_modifier = modifier_tec_impersonation_offender
								add_modifier = {
									modifier = modifier_tec_impersonation_procurator
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2010
									days = 2
								}
							}
							1 = {	# inventor wins
								remove_modifier = modifier_tec_impersonation_offender
								add_modifier = {
									modifier = modifier_tec_impersonation_inventor
									days = -1
								}
								country_event = {
									id = tec_machine_impersonation.2012
									days = 2
								}
							}
						}
					}
					
					break = yes
				}
			}
			else = {
				break = yes
			}
		}
	}

	# gamestart, marks the neutral
	country_event = {
		id = tec_machine_impersonation.2001
		hide_window = yes

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		immediate = {
			add_modifier = {
				modifier = modifier_tec_impersonation_neutral
				days = -1
			}
		}
	}

	# Gets Procurator
	country_event = {
		id = tec_machine_impersonation.2010
		title = "tec_machine_impersonation.2010.title"
		desc = "tec_machine_impersonation.2010.desc"
		show_sound = event_yellow_alert
		picture = GFX_evt_sapient_AI

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		option = {
			name = "tec_machine_impersonation.2010.a"
		}
	}

	# Gets offender
	country_event = {
		id = tec_machine_impersonation.2011
		title = "tec_machine_impersonation.2011.title"
		desc = "tec_machine_impersonation.2011.desc"
		show_sound = event_yellow_alert
		picture = GFX_evt_sapient_AI

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		option = {
			name = "tec_machine_impersonation.2011.a"
		}
	}

	# Gets inventor
	country_event = {
		id = tec_machine_impersonation.2012
		title = "tec_machine_impersonation.2012.title"
		desc = "tec_machine_impersonation.2012.desc"
		show_sound = event_yellow_alert
		picture = GFX_evt_sapient_AI

		is_triggered_only = yes

		trigger = {
			has_valid_civic = civic_tec_machine_bias
		}
		
		option = {
			name = "tec_machine_impersonation.2012.a"
		}
	}
# /


# ------------------------------------------------------------
# OTHER / MISC
# ------------------------------------------------------------
# ------------------------------------------------- Galactic Soreveign
namespace = tec_sovereign

	country_event = {	# Creates leader when the aiauth is added - POST
		id = tec_sovereign.1
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			is_megacorp = yes
			has_civic = civic_galactic_sovereign
		}

		immediate = {
			force_remove_civic = civic_galactic_sovereign
			force_add_civic = civic_galactic_sovereign_megacorp
		}
	}

	country_event = {	# Creates leader when the aiauth is added - POST
		id = tec_sovereign.2
		is_triggered_only = yes
		hide_window = yes

		trigger = {
			is_megacorp = no
			has_civic = civic_galactic_sovereign_megacorp
		}

		immediate = {
			force_remove_civic = civic_galactic_sovereign_megacorp
			force_add_civic = civic_galactic_sovereign
		}
	}
# /