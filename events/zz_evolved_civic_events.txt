


# AI authorities
# ------------------------------------------------------------
namespace = tec_aiauth

country_event = {	# Change ruler to the appropiate portrait - gamestart
	id = tec_aiauth.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		tec_aiauth_empire = yes
	}

	immediate = {
		# Sets variables
		set_variable = {
			which = tec_max_aiauth_programs
			value = 4
		}
		set_variable = {
			which = tec_aiauth_used_programs
			value = 0
		}
		set_variable = {
			which = tec_aiauth_stored_programs
			value = 0
		}
		set_variable = {
			which = tec_aiauth_program_cost
			value = 500
		}
		if = {	# Has robotic species
			# If the empire has robotic species, adapts the aiauth to it
			limit = {
				OR = {
					has_country_flag = done_first_robot
					any_galaxy_species = {
						has_species_flag = mechanical_species@root
					}
				}
			}
			random_galaxy_species = {
				limit = {
					has_species_flag = mechanical_species@root
				}
				save_event_target_as = tec_ai_species
			}
		}
		else = {
			# Creates a fake robot species
			# Later when the robot tech is researched the leader change species
			tec_create_fake_robot_species = yes
			last_created_species = {
				save_event_target_as = tec_ai_species
			}
		}
		# Changes ruler AND governors/envoys - these always change
			every_owned_leader = {
				limit = {
					leader_class = ruler
				}
				change_species = event_target:tec_ai_species
				change_leader_portrait = event_target:tec_ai_species
				# Start with 0 programs
				add_trait = leader_trait_aiauth_ruler_checker_0
				set_age = 150
				set_leader_flag = tec_aiauth_ruler_@root
			}
			#every_owned_leader = {
			#	limit = {
			#		leader_class = governor
			#	}
			#	# TO DO ADD SPECIFIC TRAIT
			#	change_species = event_target:tec_ai_species
			#	set_age = 100
			#}
			#every_pool_leader = {
			#	limit = {
			#		leader_class = governor
			#	}
			#	# TO DO ADD SPECIFIC TRAIT
			#	change_species = event_target:tec_ai_species
			#	set_age = 100
			#}
			#every_owned_leader = {
			#	limit = {
			#		leader_class = envoy
			#	}
			#	# TO DO ADD SPECIFIC TRAIT
			#	change_species = event_target:tec_ai_species
			#	set_age = 100
			#}
			#every_pool_leader = {
			#	limit = {
			#		leader_class = envoy
			#	}
			#	# TO DO ADD SPECIFIC TRAIT
			#	change_species = event_target:tec_ai_species
			#	set_age = 100
			#}
		# /	
		# Changes the rest of scientists if suitable
			if = {
				limit = {
					OR = {
						tec_aiauth_swaps_all_leaders = yes
						tec_aiauth_swaps_leader_researchers = yes
					}
				}
				every_owned_leader = {
					limit = {
						leader_class = scientist
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
				every_pool_leader = {
					limit = {
						leader_class = scientist
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
			}
		# /
		# Changes the rest of admirals/generals if suitable
			if = {
				limit = {
					OR = {
						tec_aiauth_swaps_all_leaders = yes
						tec_aiauth_swaps_leaders_militars = yes
					}
				}
				every_owned_leader = {
					limit = {
						leader_class = admiral
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
				every_pool_leader = {
					limit = {
						leader_class = admiral
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
				every_owned_leader = {
					limit = {
						leader_class = general
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
				every_pool_leader = {
					limit = {
						leader_class = general
					}
					# TO DO ADD SPECIFIC TRAIT
					change_species = event_target:tec_ai_species
					set_age = 100
				}
			}
		# /	
	}
}

country_event = {	# Saves and Restores ruler on ruler death
	id = tec_aiauth.5
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_aiauth_empire = yes
		from = {
			leader_class = ruler
		}
	}

	immediate = {
		hidden_effect = {
			clone_leader = {
				target = from
			}
		}
		last_created_leader = {
			set_leader_flag = tec_aiauth_ruler_@root
		}
		set_leader = last_created_leader
	}
}

country_event = {	# Saves leader when the aiauth is removed - PRE
	id = tec_aiauth.10
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_aiauth_empire = yes
	}

	immediate = {
		hidden_effect = {
			# Exiles the ruler
			ruler = {
				# just in case
				set_leader_flag = tec_aiauth_ruler_@root
				# saves leader
				exile_leader_as = tec_aiauth_exiled_leader
			}
		}
	}
}

country_event = {	# Restores or creates leader when the aiauth is added - POST
	id = tec_aiauth.15
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_aiauth_empire = yes
		exists = ruler
		ruler = {
			NOT = {
				has_leader_flag = tec_aiauth_ruler_@root
			}
		}
	}

	immediate = {
		hidden_effect = {
			if = {		# Exist an aiauth leader
				limit = {
					exists = event_target:tec_aiauth_exiled_leader
				}
				set_leader = event_target:tec_aiauth_exiled_leader
			}
			else = {	# Creates an aiauth leader
				# But first, sets variables
				set_variable = {
					which = tec_max_aiauth_programs
					value = 4
				}
				set_variable = {
					which = tec_aiauth_used_programs
					value = 0
				}
				set_variable = {
					which = tec_aiauth_stored_programs
					value = 0
				}
				set_variable = {
					which = tec_aiauth_program_cost
					value = 500
				}
				# ----------------------
				if = {		# Has robotic species
					limit = {
						has_technology = tech_robotic_workers
						any_owned_species = {
							has_trait = trait_mechanical
							has_species_flag = mechanical_species@root
						}
					}
					random_owned_species = {
						limit = {
							has_species_flag = mechanical_species@root
						}
						save_event_target_as = tec_ai_species
					}
					every_owned_leader = {
						limit = {
							leader_class = ruler
						}
						change_species = event_target:tec_ai_species
						change_leader_portrait = event_target:tec_ai_species
						# Starts with 0 program slots
						add_trait = leader_trait_aiauth_ruler_checker_0
						set_age = 150
						set_leader_flag = tec_aiauth_ruler_@root
					}
				}
				else = {	# Creates the leader from scratch
					# Creates a fake robot species
					# Later when the robot tech is researched the leader change species
					tec_create_fake_robot_species = yes
					last_created_species = {
						save_event_target_as = tec_ai_species
					}
				}
			}
			# Exiles the ruler
			ruler = {
				exile_leader_as = tec_aiauth_exiled_leader
			}
		}
	}
}

country_event = {	# Manages the traits per year
	id = tec_aiauth.20
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_aiauth_empire = yes
	}

	immediate = {
		hidden_effect = {
			export_resource_stockpile_to_variable = {
				resource = sr_tec_ai_power_dummy
				variable = tec_aiauth_program_stored
			}
			# Checks Threshholds
			if = {	# T1
				# First time?
				limit = {
					check_variable = {
						which = tec_aiauth_program_stored
						value >= tec_aiauth_program_cost
					}
				}
				# Adapts the new cost
				multiply_variable = {
					which = tec_aiauth_program_cost
					value = 2
				}
				# This makes cost go from 500 to 1000, 2000, 4000, 8000, etc
				# Ruler gets a trait
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_0
						}
						remove_trait = leader_trait_aiauth_ruler_checker_0
						add_trait = leader_trait_aiauth_ruler_checker_1
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_1
						}
						remove_trait = leader_trait_aiauth_ruler_checker_1
						add_trait = leader_trait_aiauth_ruler_checker_2
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_2
						}
						remove_trait = leader_trait_aiauth_ruler_checker_2
						add_trait = leader_trait_aiauth_ruler_checker_3
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_3
						}
						remove_trait = leader_trait_aiauth_ruler_checker_3
						add_trait = leader_trait_aiauth_ruler_checker_4
					}
					else = {
						break = yes
					}
				}
			}
		}
	}
}

event = {
	id = tec_aiauth.24
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		every_playable_country = {
			limit = {
				tec_is_aiauth_empire = yes
			}
			country_event = {
				id = tec_aiauth.25
			}
		}
	}
}

country_event = {	# Recalculates
	id = tec_aiauth.25
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		tec_aiauth_empire = yes
	}

	immediate = {
		hidden_effect = {
			export_resource_stockpile_to_variable = {
				resource = sr_tec_ai_power_dummy
				variable = tec_aiauth_program_stored
			}
			# Creates 4 variants of the current cost
			# Adds a slot visually per slot availabe
			set_variable = {
				which = tec_aiauth_program_cost_temp
				value = tec_aiauth_program_cost
			}
			#2 - 500 is 1000
			set_variable = {
				which = tec_aiauth_program_cost_temp_x2
				value = tec_aiauth_program_cost_temp
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_temp_x2
				value = 2
			}

			#3 - 500 is 2000
			set_variable = {
				which = tec_aiauth_program_cost_temp_x3
				value = tec_aiauth_program_cost_temp
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_temp_x3
				value = 4
			}
			# 4 - 500 is 4000
			set_variable = {
				which = tec_aiauth_program_cost_temp_x4
				value = tec_aiauth_program_cost_temp
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_temp_x4
				value = 8
			}
			if = {	# 4
				limit = {
					check_variable = {
						which = tec_aiauth_program_stored
						value >= tec_aiauth_program_cost_temp_x4
					}
				}
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_3
						}
						remove_trait = leader_trait_aiauth_ruler_checker_3
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_2
						}
						remove_trait = leader_trait_aiauth_ruler_checker_2
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_1
						}
						remove_trait = leader_trait_aiauth_ruler_checker_1
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_0
						}
						remove_trait = leader_trait_aiauth_ruler_checker_0
					}
					add_trait = leader_trait_aiauth_ruler_checker_4
				}
				set_variable = {
					which = tec_aiauth_program_slots
					value = 4
				}
			}
			else_if = {	# 3
				limit = {
					check_variable = {
						which = tec_aiauth_program_stored
						value >= tec_aiauth_program_cost_temp_x3
					}
				}
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_4
						}
						remove_trait = leader_trait_aiauth_ruler_checker_4
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_2
						}
						remove_trait = leader_trait_aiauth_ruler_checker_2
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_1
						}
						remove_trait = leader_trait_aiauth_ruler_checker_1
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_0
						}
						remove_trait = leader_trait_aiauth_ruler_checker_0
					}
					add_trait = leader_trait_aiauth_ruler_checker_3
				}
				set_variable = {
					which = tec_aiauth_program_slots
					value = 3
				}
			}
			else_if = {	# 2
				limit = {
					check_variable = {
						which = tec_aiauth_program_stored
						value >= tec_aiauth_program_cost_temp_x2
					}
				}
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_4
						}
						remove_trait = leader_trait_aiauth_ruler_checker_4
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_3
						}
						remove_trait = leader_trait_aiauth_ruler_checker_3
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_1
						}
						remove_trait = leader_trait_aiauth_ruler_checker_1
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_0
						}
						remove_trait = leader_trait_aiauth_ruler_checker_0
					}
					add_trait = leader_trait_aiauth_ruler_checker_2
				}
				set_variable = {
					which = tec_aiauth_program_slots
					value = 2
				}
			}
			else_if = {	# 1
				limit = {
					check_variable = {
						which = tec_aiauth_program_stored
						value >= tec_aiauth_program_cost
					}
				}
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_4
						}
						remove_trait = leader_trait_aiauth_ruler_checker_4
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_3
						}
						remove_trait = leader_trait_aiauth_ruler_checker_3
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_2
						}
						remove_trait = leader_trait_aiauth_ruler_checker_2
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_0
						}
						remove_trait = leader_trait_aiauth_ruler_checker_0
					}
					add_trait = leader_trait_aiauth_ruler_checker_1
				}
				set_variable = {
					which = tec_aiauth_program_slots
					value = 1
				}
			}
			else = {	# No programs?
				ruler = {
					if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_4
						}
						remove_trait = leader_trait_aiauth_ruler_checker_4
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_3
						}
						remove_trait = leader_trait_aiauth_ruler_checker_3
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_2
						}
						remove_trait = leader_trait_aiauth_ruler_checker_2
					}
					else_if = {
						limit = {
							has_trait = leader_trait_aiauth_ruler_checker_1
						}
						remove_trait = leader_trait_aiauth_ruler_checker_1
					}
					add_trait = leader_trait_aiauth_ruler_checker_0
				}
				set_variable = {
					which = tec_aiauth_program_slots
					value = 0
				}
			}
		}
	}
	after = {
		clear_variable = tec_aiauth_program_cost_temp
		clear_variable = tec_aiauth_program_cost_temp_x2
		clear_variable = tec_aiauth_program_cost_temp_x3
		clear_variable = tec_aiauth_program_cost_temp_x4
	}
}
# tec_aiauth.25 # Recalculates

# SELECT TRAITS ON DEMAND
country_event = {
	id = tec_aiauth.100
	title = "tec_aiauth.100.name"

	desc = {
		trigger = {
			always = yes
		}
		text = "tec_aiauth.100.desc"
	}

	diplomatic = yes
	diplomatic_title = BLANK_STRING
	is_triggered_only = yes

	picture_event_data = {
		portrait = ruler
		room = room_selector
		planet_background = root.capital_scope
	}

	immediate = {
		# failsafe
		hidden_effect = {
			set_country_flag = tec_active_aiauth_window
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			export_resource_stockpile_to_variable = {
				resource = sr_tec_ai_power_dummy
				variable = tec_aiauth_program_stored
			}
			set_variable = {
				which = tec_aiauth_program_cost_minus
				value = tec_aiauth_program_cost
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_minus
				value = -1
			}
		}
	}

	option = {
		name = tec_aiauth.100.main
		custom_tooltip = tec_aiauth.100.main.tooltip
		hidden_effect = {
			country_event = {
				id = tec_aiauth.110
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
		}
	}
	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	option = {
		name = tec_aiauth.100.minor
		custom_tooltip = tec_aiauth.100.minor.tooltip
		hidden_effect = {
			country_event = {
				id = tec_aiauth.120
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
		}
	}
	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	option = {
		name = tec_aiauth.100.levelup
		custom_tooltip = tec_aiauth.100.levelup.tooltip
		allow = {
			hidden_trigger = {
				check_variable = {
					which = tec_aiauth_program_cost
					value < tec_aiauth_program_stored
				} 
			}
		}
		ruler = {
			add_skill = 1
		}
		hidden_effect = {
			add_resource = {
				sr_tec_ai_power_dummy = 1
				mult = tec_aiauth_program_cost_minus
			}
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			clear_variable = tec_aiauth_program_cost_minus
			country_event = {
				id = tec_aiauth.100
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
		}
	}
	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	option = {
		name = tec_aiauth.100.exit
		custom_tooltip = tec_aiauth.100.exit.tooltip
		hidden_effect = {
			remove_country_flag = tec_active_aiauth_window
		}
	}
}

country_event = {
	id = tec_aiauth.110
	title = "tec_aiauth.110.name"

	desc = {
		trigger = {
			always = yes
		}
		text = "tec_aiauth.110.desc"
	}

	diplomatic = yes
	diplomatic_title = BLANK_STRING
	is_triggered_only = yes

	picture_event_data = {
		portrait = ruler
		room = room_selector
		planet_background = root.capital_scope
	}

	immediate = {
		# failsafe
		hidden_effect = {
			set_country_flag = tec_active_aiauth_window
			export_resource_stockpile_to_variable = {
				resource = sr_tec_ai_power_dummy
				variable = tec_aiauth_program_stored
			}
			set_variable = {
				which = tec_aiauth_program_cost_minus
				value = tec_aiauth_program_cost
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_minus
				value = -1
			}
		}
	}

	option = {
		name = tec_aiauth.110.back
		custom_tooltip = tec_aiauth.110.back.tooltip
		allow = {
			hidden_trigger = {
				always = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = tec_aiauth.100
			}
		}
	}
	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	# Research option
	option = {
		name = tec_aiauth.110.research_on
		custom_tooltip = tec_aiauth.110.research_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_research_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_research_program
					}
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 2 slot levels
					which = tec_aiauth_program_slots
					value >= 2
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
				check_variable = {	# Has no more than 1 protocol
					which = tec_aiauth_minor_programs
					value < 2
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -2
			}
			add_resource = {
				sr_tec_ai_power_dummy = 2
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.research_off
		custom_tooltip = tec_aiauth.110.research_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_research_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_research_program
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.research_unav
		custom_tooltip = tec_aiauth.110.research_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_research_program
					}
				}
				OR = {
					check_variable = {	# Has a used programs
						which = tec_aiauth_main_programs
						value = 1
					}
					check_variable = {	# Has more than 1 protocol
					which = tec_aiauth_minor_programs
					value > 1
				}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Industrial
	option = {
		name = tec_aiauth.110.industrial_on
		custom_tooltip = tec_aiauth.110.industrial_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_industrial_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_industrial_program
					}
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 2 slot levels
					which = tec_aiauth_program_slots
					value >= 2
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
				check_variable = {	# Has no more than 1 protocol
					which = tec_aiauth_minor_programs
					value < 2
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -2
			}
			add_resource = {
				sr_tec_ai_power_dummy = 2
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.industrial_off
		custom_tooltip = tec_aiauth.110.industrial_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_industrial_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_industrial_program
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.industrial_unav
		custom_tooltip = tec_aiauth.110.industrial_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_industrial_program
					}
				}
				OR = {
					check_variable = {	# Has a used programs
						which = tec_aiauth_main_programs
						value = 1
					}
					check_variable = {	# Has more than 1 protocol
					which = tec_aiauth_minor_programs
					value > 1
				}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Unity
	option = {
		name = tec_aiauth.110.unity_on
		custom_tooltip = tec_aiauth.110.unity_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_unity_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_unity_program
					}
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 2 slot levels
					which = tec_aiauth_program_slots
					value >= 2
				}
				check_variable = {	# Has no used programs
					which = tec_aiauth_main_programs
					value = 0
				}
				check_variable = {	# Has no more than 1 protocol
					which = tec_aiauth_minor_programs
					value < 2
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -2
			}
			add_resource = {
				sr_tec_ai_power_dummy = 2
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.unity_off
		custom_tooltip = tec_aiauth.110.unity_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_unity_program
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_unity_program
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_main_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.110
			}
		}
	}
	option = {
		name = tec_aiauth.110.unity_unav
		custom_tooltip = tec_aiauth.110.unity_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_unity_program
					}
				}
				OR = {
					check_variable = {	# Has a used programs
						which = tec_aiauth_main_programs
						value = 1
					}
					check_variable = {	# Has more than 1 protocol
					which = tec_aiauth_minor_programs
					value > 1
				}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	option = {
		name = tec_aiauth.100.exit
		custom_tooltip = tec_aiauth.100.exit.tooltip
		hidden_effect = {
			remove_country_flag = tec_active_aiauth_window
		}
	}
}

country_event = {
	id = tec_aiauth.120
	title = "tec_aiauth.120.name"

	desc = {
		trigger = {
			always = yes
		}
		text = "tec_aiauth.120.desc"
	}

	diplomatic = yes
	diplomatic_title = BLANK_STRING
	is_triggered_only = yes

	picture_event_data = {
		portrait = ruler
		room = room_selector
		planet_background = root.capital_scope
	}

	immediate = {
		# failsafe
		hidden_effect = {
			set_country_flag = tec_active_aiauth_window
			export_resource_stockpile_to_variable = {
				resource = sr_tec_ai_power_dummy
				variable = tec_aiauth_program_stored
			}
			set_variable = {
				which = tec_aiauth_program_cost_minus
				value = tec_aiauth_program_cost
			}
			multiply_variable = {
				which = tec_aiauth_program_cost_minus
				value = -1
			}
		}
	}

	option = {
		name = tec_aiauth.110.back
		custom_tooltip = tec_aiauth.110.back.tooltip
		allow = {
			hidden_trigger = {
				always = yes
			}
		}
		hidden_effect = {
			country_event = {
				id = tec_aiauth.100
			}
		}
	}
	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Amenity option
	option = {
		name = tec_aiauth.120.caring_on
		custom_tooltip = tec_aiauth.120.caring_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_caring_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_caring_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has no used minor programs
							which = tec_aiauth_minor_programs
							value = 0
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has less than 3 minor programs
							which = tec_aiauth_minor_programs
							value < 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 1 slot levels
					which = tec_aiauth_program_slots
					value >= 1
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -1
			}
			add_resource = {
				sr_tec_ai_power_dummy = 1
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.caring_off
		custom_tooltip = tec_aiauth.120.caring_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_caring_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_caring_protocols
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.caring_unav
		custom_tooltip = tec_aiauth.120.caring_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_caring_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has 1 used minor programs
							which = tec_aiauth_minor_programs
							value = 1
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has 3 minor programs
							which = tec_aiauth_minor_programs
							value = 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Pop sprawl option
	option = {
		name = tec_aiauth.120.monitoring_on
		custom_tooltip = tec_aiauth.120.monitoring_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_monitoring_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_monitoring_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has no used minor programs
							which = tec_aiauth_minor_programs
							value = 0
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has less than 3 minor programs
							which = tec_aiauth_minor_programs
							value < 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 1 slot levels
					which = tec_aiauth_program_slots
					value >= 1
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -1
			}
			add_resource = {
				sr_tec_ai_power_dummy = 1
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.monitoring_off
		custom_tooltip = tec_aiauth.120.monitoring_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_monitoring_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_monitoring_protocols
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.monitoring_unav
		custom_tooltip = tec_aiauth.120.monitoring_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_monitoring_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has 1 used minor programs
							which = tec_aiauth_minor_programs
							value = 1
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has 3 minor programs
							which = tec_aiauth_minor_programs
							value = 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Builslot option
	option = {
		name = tec_aiauth.120.development_on
		custom_tooltip = tec_aiauth.120.development_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_development_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_development_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has no used minor programs
							which = tec_aiauth_minor_programs
							value = 0
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has less than 3 minor programs
							which = tec_aiauth_minor_programs
							value < 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 1 slot levels
					which = tec_aiauth_program_slots
					value >= 1
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -1
			}
			add_resource = {
				sr_tec_ai_power_dummy = 1
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.development_off
		custom_tooltip = tec_aiauth.120.development_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_development_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_development_protocols
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.development_unav
		custom_tooltip = tec_aiauth.120.development_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_development_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has 1 used minor programs
							which = tec_aiauth_minor_programs
							value = 1
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has 3 minor programs
							which = tec_aiauth_minor_programs
							value = 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	# Ethics option
	option = {
		name = tec_aiauth.120.compliance_on
		custom_tooltip = tec_aiauth.120.compliance_on.tooltip
		ruler = {
			add_trait = leader_trait_aiauth_ruler_compliance_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_compliance_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has no used minor programs
							which = tec_aiauth_minor_programs
							value = 0
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has less than 3 minor programs
							which = tec_aiauth_minor_programs
							value < 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				check_variable = {	# Has 1 slot levels
					which = tec_aiauth_program_slots
					value >= 1
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = 1
			}
			change_variable = {
				which = tec_aiauth_program_slots
				value = -1
			}
			add_resource = {
				sr_tec_ai_power_dummy = 1
				mult = tec_aiauth_program_cost_minus
			}
			clear_variable = tec_aiauth_program_cost_minus
			multiply_variable = {
				which = tec_aiauth_program_cost
				value = 2
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.compliance_off
		custom_tooltip = tec_aiauth.120.compliance_off.tooltip
		ruler = {
			remove_trait = leader_trait_aiauth_ruler_compliance_protocols
		}
		trigger = {
			hidden_trigger = {
				ruler = {
					has_trait = leader_trait_aiauth_ruler_compliance_protocols
				}
			}
		}
		hidden_effect = {
			change_variable = {
				which = tec_aiauth_minor_programs
				value = -1
			}
			country_event = {	# recalculates
				id = tec_aiauth.25
			}
			country_event = {	# Shows the event again
				id = tec_aiauth.120
			}
		}
	}
	option = {
		name = tec_aiauth.120.compliance_unav
		custom_tooltip = tec_aiauth.120.compliance_unav.tooltip
		trigger = {
			hidden_trigger = {
				ruler = {
					NOT = {
						has_trait = leader_trait_aiauth_ruler_compliance_protocols
					}
				}
				OR = {
					AND = {
						check_variable = {	# Has 1 programs
							which = tec_aiauth_main_programs
							value = 1
						}
						check_variable = {	# Has 1 used minor programs
							which = tec_aiauth_minor_programs
							value = 1
						}
					}
					AND = {
						check_variable = {	# Has no used programs
							which = tec_aiauth_main_programs
							value = 0
						}
						check_variable = {	# Has 3 minor programs
							which = tec_aiauth_minor_programs
							value = 3
						}
					}
				}
			}
		}
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}

	option = {
		name = tec_rebalance.611.space
		allow = {
			hidden_trigger = {
				always = no
			}
		}
	}
	option = {
		name = tec_aiauth.100.exit
		custom_tooltip = tec_aiauth.100.exit.tooltip
		hidden_effect = {
			remove_country_flag = tec_active_aiauth_window
		}
	}
}


 #Annotation ---------------------------------------------
					#check_modifier_value = {
					#	modifier = country_ethic_sr_tec_ai_power_dummy_produces_add
					#	value = 500
					#}
 # -------------------------------------------------------

# Trait pickers




# Life seeded events
# ------------------------------------------------------------
namespace = tec_gaiaseeded
pop_event = {
	id = tec_gaiaseeded.1
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			AND = {
				has_trait = @trait_tec_natural_sync
				from = {
					tec_is_perfect_planet = no
				}
			}
			AND = {
				has_trait = @trait_tec_natural_sync_neutral
				from = {
					tec_is_neutral_planet = no
				}
			}
			AND = {
				OR = {
					has_trait = @trait_tec_natural_sync_bad
				}
				from = {
					tec_is_perfect_planet = yes
					tec_is_neutral_planet = yes
				}
			}
		}
	}

	immediate = {
		# Organic void dwellers
		if = {
			limit = {
				has_trait = trait_pc_gaia_preference
				OR = {
					has_trait = @trait_tec_natural_sync
					has_trait = @trait_tec_natural_sync_neutral
					has_trait = @trait_tec_natural_sync_bad
				}
			}
			# Good
			if = {
				limit = {
					NOT = {
						has_trait = @trait_tec_natural_sync
					}
					from = {
						tec_is_perfect_planet = yes
					}
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync_bad
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync_neutral
				}
				modify_species = {
					species = this
					add_trait = @trait_tec_natural_sync
				}
			}
			# Neutral
			else_if = {
				limit = {
					NOT = {
						has_trait = @trait_tec_natural_sync_bad
					}
					from = {
						tec_is_neutral_planet = yes
					}
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync_bad
				}
				modify_species = {
					species = this
					add_trait = @trait_tec_natural_sync_neutral
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync
				}
			}
			# Bad
			else_if = {
				limit = {
					NOT = {
						has_trait = @trait_tec_natural_sync_bad
					}
					from = {
						tec_is_perfect_planet = no
						tec_is_neutral_planet = no
					}
				}
				modify_species = {
					species = this
					add_trait = @trait_tec_natural_sync_bad
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync_neutral
				}
				modify_species = {
					species = this
					remove_trait = @trait_tec_natural_sync
				}
			}
		}
		# if species dont have gaia preference and the natural sync, removes natural sync
		if = {
			limit = {
				NOT = {
					has_trait = trait_pc_gaia_preference
				}
				OR = {
					has_trait = @trait_tec_natural_sync
					has_trait = @trait_tec_natural_sync_neutral
					has_trait = @trait_tec_natural_sync_bad
				}
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_natural_sync_bad
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_natural_sync_neutral
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_natural_sync
			}
		}
	}
}

# Dread armies - reanimators
# ------------------------------------------------------------
namespace = tec_reanimators

#on_army_killed_in_combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet

country_event = {
	id = tec_reanimator.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		From = {
			exists = species
			species = { # Robots cant be raised i guess?
				is_organic_species = yes
			}
			NOR = { # Cant reanimate the reanimated
				army_type = undead_army
				army_type = tec_geist_army
			}
			
		}
		OR = {
			FromFrom = {
				is_regular_empire = yes
				tec_is_reanimator_empire = yes
			}
			This = {
				is_regular_empire = yes
				tec_is_reanimator_empire = yes
				NOT = { is_country_type = "gate_builders" }
			}
		}

		FromFromFrom = { # tec_battle_planet
			NOT = {
				has_planet_flag = tec_recent_reanimation
			}
		}

	}

	immediate = {
		# Sorting event targets for clarity...
		FromFromFrom = { # tec_battle_planet
			save_event_target_as = tec_bp
		}
		FromFrom = {	# tec_deceased_army_killer
			save_event_target_as = tec_dak
		}
		From = {		#tec_deceased_army
			save_event_target_as = tec_da
		}
		This = {		#tec_deceased_army_owner
			save_event_target_as = tec_dao
		}

		event_target:tec_bp = {
			set_timed_planet_flag = {
				flag = tec_recent_reanimation
				days = 1
			}
		}

		# Roll the dice
		random_list = {
			2 = {
				break = yes
			}
			1 = {
				if = {	# Both are necromancers
					limit = {
						event_target:tec_dak = {
							tec_is_reanimator_empire = yes
						}
						event_target:tec_dao = {
							tec_is_reanimator_empire = yes
						}

					}
					random_list = {
						60 = {
							event_target:tec_bp = { #for the defender	
								if = {
									limit = { # Extracheck to avoid non necro empire benefitting
										event_target:tec_dao = {
											tec_is_reanimator_empire = yes
										}
									}
									create_army = {
										name = random
										owner = event_target:tec_dao
										type = undead_army 
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
									
									change_variable = {# adds variable for later winner messages
										which = tec_reanimated_armies_def
										value = 1
									}
								}
							}
							break = yes
						}
						40 = {
							event_target:tec_bp = {	# for the oponent
								if = {	# Extracheck to avoid non necro empire benefitting
									limit = {
										event_target:tec_dak = {
											tec_is_reanimator_empire = yes
										}
										NOR = {
											event_target:tec_da = {
												army_type = undead_army 
											}
											event_target:tec_da = {
												army_type = tec_geist_army
											}
										}
									}
									create_army = {
										name = random
										owner = event_target:tec_dak
										type = undead_army 
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
													
									change_variable = { # adds variable for later winner messages
										which = tec_reanimated_armies_att
										value = 1
									}
								}
							}
							break = yes
						}
					}
					break = yes
				}
				else_if = {	# Only def is necro
					limit = {
						event_target:tec_dak = {
							NOT = {
								tec_is_reanimator_empire = yes
							}
						}
						event_target:tec_dao = {
							tec_is_reanimator_empire = yes
						}
					}
					
					
					event_target:tec_bp = {
						if = {
							limit = { # Extracheck to avoid non necro empire benefitting
								event_target:tec_dao = {
									tec_is_reanimator_empire = yes
								}
																
							}
							create_army = { #for the defender
								name = random
								owner = event_target:tec_dao
								type = undead_army 
								species = event_target:tec_da.species
							}

							last_created_army = {
								set_army_flag = tec_delete_this_army
							}

							change_variable = {# adds variable for later winner messages
								which = tec_reanimated_armies_def
								value = 1
							}
						}
					}
					break = yes
				}
				else_if = {	# Only opponent is necro
					limit = {
						event_target:tec_dak = {
							tec_is_reanimator_empire = yes
						}
						event_target:tec_dao = {
							NOT = {
								tec_is_reanimator_empire = yes
							}
						}
					}
					
					event_target:tec_bp = {
						if = {
							limit = { 	# Extracheck to avoid non necro empire benefitting
								event_target:tec_dak = {
									tec_is_reanimator_empire = yes
								}

							}
							create_army = { # for the oponent
								name = random
								owner = event_target:tec_dak
								type = undead_army 
								species = event_target:tec_da.species
							}

							last_created_army = {
								set_army_flag = tec_delete_this_army
							}

							change_variable = { # adds variable for later winner messages
								which = tec_reanimated_armies_att
								value = 1
							}
						}
					}
					break = yes
				}
				else = {
					break = yes
				}
				
			}
		}
	}
}

#on_planet_attackers_win = {
country_event = {	# Necromancers announce
	id = tec_reanimator.20
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			tec_is_reanimator_empire = yes
			has_valid_civic = civic_tec_machine_reanimation
			has_valid_civic = civic_tec_hive_necrophage
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = {
					has_country_flag = tec_first_necro
				}
				FromFrom = {
					check_variable = {
						which = tec_reanimated_armies_att
						value > 0
					}
				}
			}
			this = {
				save_event_target_as = tec_necro_attacker
			}
			from = {
				save_event_target_as = tec_necro_attacked
			}
			FromFrom = {
				save_event_target_as = tec_assaulted_planet
			}
			if = {
				limit = {
					is_machine_empire = no
					is_hive_empire = no
				}
				country_event = {
					id = tec_reanimator.25
				}
			}
			create_message = {
				type = MESSAGE_TEC_REANIMATED_EVENT
				localization = MESSAGE_TEC_REANIMATED_ARMIES
				days = 30
				target = FromFrom
				variable = {
					type = name
					localization = PLANET
					scope = FromFrom
				}
				variable = {
					type = variable
					varname = tec_reanimated_armies_att
					localization = VALUE
					scope = FromFrom
				}
			}
			FromFrom = {
				clear_variable = tec_reanimated_armies_att
				clear_variable = tec_reanimated_armies_def
			}
		}
		
		if = {
			limit = {
				has_country_flag = tec_first_necro
				FromFrom = {
					check_variable = {
						which = tec_reanimated_armies_att
						value > 0
					}
				}
			}
			create_message = {
				type = MESSAGE_TEC_REANIMATED_EVENT
				localization = MESSAGE_TEC_REANIMATED_ARMIES
				days = 30
				target = FromFrom
				variable = {
					type = name
					localization = PLANET
					scope = FromFrom
				}
				variable = {
					type = variable
					varname = tec_reanimated_armies_att
					localization = VALUE
					scope = FromFrom
				}
			}
			FromFrom = {
				clear_variable = tec_reanimated_armies_att
				clear_variable = tec_reanimated_armies_def
			}
		}
	}

	after = {
		hidden_effect = {
			every_owned_army = {
				limit = {
					has_army_flag = tec_delete_this_army
				}
				random_list = {
					50 = {
						remove_army_flag = tec_delete_this_army
					}
					50 = {
						remove_army = yes
					}
				}
			}
		}
	}
}

# First necromancy
country_event = {	# Necromancers announce
	id = tec_reanimator.25
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = tec_first_necro
		}
		tec_is_reanimator_empire = yes
	}
	
	picture = GFX_evt_necrophage
	title = tec_reanimator.25.title
	desc = tec_reanimator.25.desc

	option = {
		name = tec_reanimator.25.excellent
	}

	immediate = {
		hidden_effect = {
			set_country_flag = tec_first_necro
		}
	}
}

#on_planet_defenders_win = {
country_event = {
	id = tec_reanimator.30
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			tec_is_reanimator_empire = yes
			has_valid_civic = civic_tec_machine_reanimation
			has_valid_civic = civic_tec_hive_necrophage
		}
	}

	immediate = {
		if = {
			limit = {
				NOT = {
					has_country_flag = tec_first_necro
				}
				FromFrom = {
					check_variable = {
						which = tec_reanimated_armies_def
						value > 0
					}
				}
			}
			from = {
				save_event_target_as = tec_necro_attacker
			}
			root = {
				save_event_target_as = tec_necro_attacked
			}
			FromFrom = {
				save_event_target_as = tec_assaulted_planet
			}
			if = {
				limit = {
					is_machine_empire = no
					is_hive_empire = no
				}
				country_event = {
					id = tec_reanimator.35
				}
			}
			create_message = {
				type = MESSAGE_TEC_REANIMATED_EVENT
				localization = MESSAGE_TEC_REANIMATED_ARMIES
				days = 30
				target = FromFrom
				variable = {
					type = name
					localization = PLANET
					scope = FromFrom
				}
				variable = {
					type = variable
					varname = tec_reanimated_armies_def
					localization = VALUE
					scope = FromFrom
				}
			}
			FromFrom = {
				clear_variable = tec_reanimated_armies_att
				clear_variable = tec_reanimated_armies_def
			}
		}
	
		if = {
			limit = {
				has_country_flag = tec_first_necro
				FromFrom = {
					check_variable = {
						which = tec_reanimated_armies_def
						value > 0
					}
				}
			}
			create_message = {
				type = MESSAGE_TEC_REANIMATED_EVENT
				localization = MESSAGE_TEC_REANIMATED_ARMIES
				days = 30
				target = FromFrom
				variable = {
					type = name
					localization = PLANET
					scope = FromFrom
				}
				variable = {
					type = variable
					varname = tec_reanimated_armies_def
					localization = VALUE
					scope = FromFrom
				}
			}
			FromFrom = {
				clear_variable = tec_reanimated_armies_att
				clear_variable = tec_reanimated_armies_def
			}
		}
	}
	after = {
		hidden_effect = {
			every_owned_army = {
				limit = {
					has_army_flag = tec_delete_this_army
				}
				random_list = {
					50 = {
						remove_army_flag = tec_delete_this_army
					}
					50 = {
						remove_army = yes
					}
				}
			}
		}
	}
}

country_event = {	# Necromancers announce
	id = tec_reanimator.35
	is_triggered_only = yes
	trigger = {
		NOT = {
			has_country_flag = tec_first_necro
		}
		tec_is_reanimator_empire = yes
	}

	picture = GFX_evt_necrophage
	title = tec_reanimator.35.title
	desc = tec_reanimator.35.desc

	option = {
		name = tec_reanimator.35.excellent
	}

	immediate = {
		hidden_effect = {
			set_country_flag = tec_first_necro
		}
	}
}

# This = Planet scope
# From = Country
# FromFrom = Pop
#Purging pops generate a dread army
planet_event = {
	id = tec_reanimator.50
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		FROM = {
			OR = {
				tec_is_reanimator_empire = yes
			}
		}
		FROMFROM = {
			is_organic_species = yes
			OR = {
				has_purge_type = {
					type = purge_normal
				}
				has_purge_type = {
					type = purge_labor_camps
				}
				has_purge_type = {
					type = purge_neutering
				}
			}
		}
		is_controlled_by = FROM
		has_building = building_dread_encampment
	}

	immediate = {
		ROOT = {
			create_army = {
				name = random
				owner = root.owner
				type = undead_army 
				species = fromfrom.species
			}
		}
	}
}

# -------------------------------------------------------
# Dread machines leader event
country_event = {
	id = tec_reanimator.101
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			owner = {
				is_same_value = root
			}
			has_level >= 2
			is_idle = no
		}
		has_valid_civic = civic_tec_machine_reanimation
	}

	immediate = {
		random = {
			chance = 50
			clone_leader = {
				target = from
				effect = {
					save_event_target_as = tec_recently_reanimated_leader
					set_owner = event_target:global_event_country	
					# moves the leader to gec
				}
			}
			last_created_leader = {
				set_leader_flag = tec_reanimated_leader_@root
			}
			root = {
				country_event = {
					id = tec_reanimator.102
					days = @tec_reanim_delay_1
				}
			}
		}
	}
}

# Announces and gives back the leader
country_event = {
	id = tec_reanimator.102
	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_reanimation
	}

	immediate = {
		event_target:global_event_country = {
			random_owned_leader = {
				limit = {
					has_leader_flag = tec_reanimated_leader_@root
				}
				save_event_target_as = tec_reanimated_leader
				set_owner = root
				
				remove_leader_flag = tec_reanimated_leader_@root
				save_event_target_as = thrl
			}
		}
		#event_target:tec_reanimated_leader = {
		#	remove_leader_flag = tec_reanimated_leader_@root
		#	save_event_target_as = thrl
		#}
	}

	picture = GFX_evt_sapient_AI
	title = tec_reanimator.102
	desc = tec_reanimator.102.desc

	option = {
		name = EXCELLENT
	}

}

#on_army_killed_in_combat
# This = owner
# From = army
# FromFrom = opponent
# FromFromFrom = planet
country_event = {
	id = tec_reanimator.110
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		From = {	# Killed army
			species = { # only robots can be raised
				OR = {
					is_robotic_species = yes
					is_archetype = REPLICANT
				}
			}
			NOR = { # Cant reanimate the reanimated
				army_type = tec_shambling_robot
			}
			
		}
		OR = {
			FromFrom = {	# Attacker
				is_machine_empire = yes
				has_valid_civic = civic_tec_machine_reanimation
				NOT = { is_country_type = "gate_builders" }
			}
			This = {	# Army owner
				is_machine_empire = yes
				has_valid_civic = civic_tec_machine_reanimation
				NOT = { is_country_type = "gate_builders" }
			}
		}

		FromFromFrom = { # tec_battle_planet
			NOT = {
				has_planet_flag = tec_recent_reanimation
			}
			OR = {
				count_ground_combat_defender = {
					limit = {
						army_type = tec_reanimator
					}
					count >= 1
				}
				count_ground_combat_attacker = {
					limit = {
						army_type = tec_reanimator
					}
					count >= 1
				}
			}
		}

	}

	immediate = {
		# Sorting event targets for clarity...
		FromFromFrom = { # tec_battle_planet
			save_event_target_as = tec_bp
		}
		FromFrom = {	# tec_deceased_army_killer
			save_event_target_as = tec_dak
		}
		From = {		#tec_deceased_army
			save_event_target_as = tec_da
		}
		This = {		#tec_deceased_army_owner
			save_event_target_as = tec_dao
		}

		event_target:tec_bp = {
			set_timed_planet_flag = {
				flag = tec_recent_reanimation
				days = 1
			}
		}

		random_list = {
			2 = {
				}
			1 = {
				if = {	# Both are necromancers
					limit = {
						event_target:tec_dak = {
							has_valid_civic = civic_tec_machine_reanimation
						}
						event_target:tec_dao = {
							has_valid_civic = civic_tec_machine_reanimation
						}

					}
					random_list = {
						60 = {
							event_target:tec_bp = { #for the defender	
								if = {
									limit = { # Extracheck to avoid non necro empire benefitting
										event_target:tec_dao = {
											has_valid_civic = civic_tec_machine_reanimation
										}
									}
									random_list = {
										30 = {	# re-reanimated robot
											if = {
												limit = {
													event_target:tec_da = {
														army_type = robotic_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = robotic_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_assault_1
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = machine_assault_1
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_assault_2
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = machine_assault_2
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = robotic_defense_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = robotic_defense_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_defense
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = machine_defense
													species = event_target:tec_da.species
												}
											}

											else = {
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = machine_assault_1
													species = event_target:tec_da.species
												}
											}
											# Megawarforms excluded, for balance sake
										}
										70 = {	# zombot
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = tec_shambling_robot
												species = event_target:tec_da.species
											}

											last_created_army = {
												set_army_flag = tec_delete_this_army
											}
										}
									}

									change_variable = {# adds variable for later winner messages
										which = tec_reanimated_armies_def
										value = 1
									}
								}
							}
							break = yes
						}
						40 = {
							event_target:tec_bp = {	# for the oponent
								if = {	# Extracheck to avoid non necro empire benefitting
									limit = {
										event_target:tec_dak = {
											has_valid_civic = civic_tec_machine_reanimation
										}
										NOR = {
											event_target:tec_da = {
												army_type = tec_shambling_robot
											}
										}
									}
									# For the oponent
									random_list = {
										30 = {	# re-reanimated robot
											if = {
												limit = {
													event_target:tec_da = {
														army_type = robotic_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = robotic_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_assault_1
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = machine_assault_1
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_assault_2
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = machine_assault_2
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = robotic_defense_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = robotic_defense_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = machine_defense
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = machine_defense
													species = event_target:tec_da.species
												}
											}

											else = {
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = machine_assault_1
													species = event_target:tec_da.species
												}
											}
											# Megawarforms excluded, for balance sake
										}
										70 = {	# zombot
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = tec_shambling_robot
												species = event_target:tec_da.species
											}

											last_created_army = {
												set_army_flag = tec_delete_this_army
											}
										}
									}
													
									change_variable = { # adds variable for later winner messages
										which = tec_reanimated_armies_att
										value = 1
									}
								}
							}
							break = yes
						}
					}
					break = yes
				}
				else_if = {	# Only def is necro
					limit = {
						event_target:tec_dak = {
							NOT = {
								has_valid_civic = civic_tec_machine_reanimation
							}
						}
						event_target:tec_dao = {
							has_valid_civic = civic_tec_machine_reanimation
						}
					}
					
					
					event_target:tec_bp = {
						if = {
							limit = { # Extracheck to avoid non necro empire benefitting
								event_target:tec_dao = {
									has_valid_civic = civic_tec_machine_reanimation
								}
																
							}
							random_list = {
								30 = {	# re-reanimated robot
									if = {
										limit = {
											event_target:tec_da = {
												army_type = robotic_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = robotic_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_assault_1
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = machine_assault_1
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_assault_2
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = machine_assault_2
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = robotic_defense_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = robotic_defense_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_defense
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = machine_defense
											species = event_target:tec_da.species
										}
									}

									else = {
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = machine_assault_1
											species = event_target:tec_da.species
										}
									}
									# Megawarforms excluded, for balance sake
								}
								70 = {	# zombot
									create_army = {
										name = random
										owner = event_target:tec_dao
										type = tec_shambling_robot
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
								}
							}

							change_variable = {# adds variable for later winner messages
								which = tec_reanimated_armies_def
								value = 1
							}
						}
					}
					break = yes
				}
				else_if = {	# Only opponent is necro
					limit = {
						event_target:tec_dak = {
							has_valid_civic = civic_tec_machine_reanimation
						}
						event_target:tec_dao = {
							NOT = {
								has_valid_civic = civic_tec_machine_reanimation
							}
						}
					}
					
					event_target:tec_bp = {
						if = {
							limit = { 	# Extracheck to avoid non necro empire benefitting
								event_target:tec_dak = {
									has_valid_civic = civic_tec_machine_reanimation
								}

							}
							# for the opponent
							random_list = {
								30 = {	# re-reanimated robot
									if = {
										limit = {
											event_target:tec_da = {
												army_type = robotic_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = robotic_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_assault_1
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = machine_assault_1
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_assault_2
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = machine_assault_2
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = robotic_defense_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = robotic_defense_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = machine_defense
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = machine_defense
											species = event_target:tec_da.species
										}
									}

									else = {
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = machine_assault_1
											species = event_target:tec_da.species
										}
									}
									# Megawarforms excluded, for balance sake
								}
								70 = {	# zombot
									create_army = {
										name = random
										owner = event_target:tec_dak
										type = tec_shambling_robot
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
								}
							}

							change_variable = { # adds variable for later winner messages
								which = tec_reanimated_armies_att
								value = 1
							}
						}
					}
					break = yes
				}
				else = {
					break = yes
				}

			}
		}
	}
}

# -------------------------------------------------------
# Dread hives event
country_event = {
	id = tec_reanimator.210
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		From = {	# Killed army
			exists = species
			species = { # only organics can be snatched
				is_organic_species = yes
			}
			
		}
		OR = {
			FromFrom = {	# Attacker
				is_hive_empire = yes
				has_valid_civic = civic_tec_hive_necrophage
				NOT = { is_country_type = "gate_builders" }
			}
			This = {	# Army owner
				is_hive_empire = yes
				has_valid_civic = civic_tec_hive_necrophage
				NOT = { is_country_type = "gate_builders" }
			}
		}

		FromFromFrom = { # tec_battle_planet
			NOT = {
				has_planet_flag = tec_recent_reanimation
			}
			OR = {
				count_ground_combat_defender = {
					limit = {
						army_type = tec_pherodrone
					}
					count >= 1
						
				}
				count_ground_combat_defender = {
					limit = {
						army_type = tec_pherodrone_def
					}
					count >= 1
						
				}
				count_ground_combat_attacker = {
					limit = {
						army_type = tec_pherodrone
					}
					count >= 1
						
				}
				count_ground_combat_attacker = {
					limit = {
						army_type = tec_pherodrone_def
					}
					count >= 1
						
				}
			}
		}

	}

	immediate = {
		# Sorting event targets for clarity...
		FromFromFrom = { # tec_battle_planet
			save_event_target_as = tec_bp
		}
		FromFrom = {	# tec_deceased_army_killer
			save_event_target_as = tec_dak
		}
		From = {		#tec_deceased_army
			save_event_target_as = tec_da
		}
		This = {		#tec_deceased_army_owner
			save_event_target_as = tec_dao
		}

		event_target:tec_bp = {
			set_timed_planet_flag = {
				flag = tec_recent_reanimation
				days = 12
			}
		}

		random_list = {
			2 = {
			}
			1 = {
				if = {	# Both are necromancers
					limit = {
						event_target:tec_dak = {
							has_valid_civic = civic_tec_hive_necrophage
						}
						event_target:tec_dao = {
							has_valid_civic = civic_tec_hive_necrophage
						}

					}
					random_list = {
						60 = {
							event_target:tec_bp = { #for the defender	
								if = {
									limit = { # Extracheck to avoid non necro empire benefitting
										event_target:tec_dao = {
											has_valid_civic = civic_tec_hive_necrophage
										}
									}
									random_list = {
										20 = {	# re-reanimated robot
											if = {
												limit = {
													event_target:tec_da = {
														army_type = assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = assault_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = gene_warrior_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = gene_warrior_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = clone_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = clone_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = titanic_azizian_assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = titanic_azizian_assault_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = titanic_assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = titanic_assault_army
													species = event_target:tec_da.species
												}
											}

											else = {
												create_army = {
													name = random
													owner = event_target:tec_dao
													type = tec_husk
													species = event_target:tec_da.species
												}
											}
											# Megawarforms excluded, for balance sake
										}
										80 = {	# zombies
											create_army = {
												name = random
												owner = event_target:tec_dao
												type = tec_husk
												species = event_target:tec_da.species
											}

											last_created_army = {
												set_army_flag = tec_delete_this_army
											}
										}
									}

									change_variable = {# adds variable for later winner messages
										which = tec_reanimated_armies_def
										value = 1
									}
								}
							}
							break = yes
						}
						40 = {
							event_target:tec_bp = {	# for the oponent
								if = {	# Extracheck to avoid non necro empire benefitting
									limit = {
										event_target:tec_dak = {
											has_valid_civic = civic_tec_hive_necrophage
										}
										NOR = {
											event_target:tec_da = {
												army_type = tec_shambling_robot
											}
										}
									}
									# For the oponent
									random_list = {
										20 = {	# re-reanimated robot
											if = {
												limit = {
													event_target:tec_da = {
														army_type = assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = assault_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = gene_warrior_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = gene_warrior_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = clone_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = clone_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = titanic_azizian_assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = titanic_azizian_assault_army
													species = event_target:tec_da.species
												}
											}

											else_if = {
												limit = {
													event_target:tec_da = {
														army_type = titanic_assault_army
													}
												}
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = titanic_assault_army
													species = event_target:tec_da.species
												}
											}

											else = {
												create_army = {
													name = random
													owner = event_target:tec_dak
													type = tec_husk
													species = event_target:tec_da.species
												}
											}
											# Megawarforms excluded, for balance sake
										}
										80 = {	# zombies
											create_army = {
												name = random
												owner = event_target:tec_dak
												type = tec_husk
												species = event_target:tec_da.species
											}

											last_created_army = {
												set_army_flag = tec_delete_this_army
											}
										}
									}
													
									change_variable = { # adds variable for later winner messages
										which = tec_reanimated_armies_att
										value = 1
									}
								}
							}
							break = yes
						}
					}
					break = yes
				}
				else_if = {	# Only def is necro
					limit = {
						event_target:tec_dak = {
							NOT = {
								has_valid_civic = civic_tec_hive_necrophage
							}
						}
						event_target:tec_dao = {
							has_valid_civic = civic_tec_hive_necrophage
						}
					}
					
					
					event_target:tec_bp = {
						if = {
							limit = { # Extracheck to avoid non necro empire benefitting
								event_target:tec_dao = {
									has_valid_civic = civic_tec_hive_necrophage
								}
																
							}
							random_list = {
								20 = {	# re-reanimated robot
									if = {
										limit = {
											event_target:tec_da = {
												army_type = assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = assault_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = gene_warrior_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = gene_warrior_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = clone_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = clone_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = titanic_azizian_assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = titanic_azizian_assault_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = titanic_assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = titanic_assault_army
											species = event_target:tec_da.species
										}
									}

									else = {
										create_army = {
											name = random
											owner = event_target:tec_dao
											type = tec_husk
											species = event_target:tec_da.species
										}
									}
									# Megawarforms excluded, for balance sake
								}
								80 = {	# zombies
									create_army = {
										name = random
										owner = event_target:tec_dao
										type = tec_husk
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
								}
							}

							change_variable = {# adds variable for later winner messages
								which = tec_reanimated_armies_def
								value = 1
							}
						}
					}
					break = yes
				}
				else_if = {	# Only opponent is necro
					limit = {
						event_target:tec_dak = {
							has_valid_civic = civic_tec_hive_necrophage
						}
						event_target:tec_dao = {
							NOT = {
								has_valid_civic = civic_tec_hive_necrophage
							}
						}
					}
					
					event_target:tec_bp = {
						if = {
							limit = { 	# Extracheck to avoid non necro empire benefitting
								event_target:tec_dak = {
									has_valid_civic = civic_tec_hive_necrophage
								}

							}
							# for the opponent
							random_list = {
								20 = {	# re-reanimated robot
									if = {
										limit = {
											event_target:tec_da = {
												army_type = assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = assault_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = gene_warrior_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = gene_warrior_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = clone_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = clone_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = titanic_azizian_assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = titanic_azizian_assault_army
											species = event_target:tec_da.species
										}
									}

									else_if = {
										limit = {
											event_target:tec_da = {
												army_type = titanic_assault_army
											}
										}
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = titanic_assault_army
											species = event_target:tec_da.species
										}
									}

									else = {
										create_army = {
											name = random
											owner = event_target:tec_dak
											type = tec_husk
											species = event_target:tec_da.species
										}
									}
									# Megawarforms excluded, for balance sake
								}
								80 = {	# zombies
									create_army = {
										name = random
										owner = event_target:tec_dak
										type = tec_husk
										species = event_target:tec_da.species
									}

									last_created_army = {
										set_army_flag = tec_delete_this_army
									}
								}
							}

							change_variable = { # adds variable for later winner messages
								which = tec_reanimated_armies_att
								value = 1
							}
						}
					}
					break = yes
				}
				else = {
					break = yes
				}
			}
		}
	}
}

# Automation Civics
# ------------------------------------------------------------
namespace = tec_automation

# Initial calc - Procedural calc when tech is researched
country_event = { # DEPRECATED
	id = tec_automation.10
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			tec_is_automated_empire = yes					# Automation
		}
		#NOT = {
		#	has_country_flag = tec_automation_checker_cd
		#}
	}

	immediate = {
		#set_timed_country_flag = {
		#	flag = tec_automation_checker_cd
		#	days = 180
		#}
		every_owned_planet = {
			limit = {
				uses_district_set = standard
			}
			export_modifier_to_variable = {	# Global job production
				modifier = planet_jobs_produces_mult
				variable = tec_planet_jobs_produces_mult
			}
			tec_recalc_energy_planet_modifiers = yes
			tec_recalc_minerals_planet_modifiers = yes
			tec_recalc_food_planet_modifiers = yes
			clear_variable = tec_planet_jobs_produces_mult
		}
	}
}

# Reiterative calc on planet
planet_event = { # DEPRECATED
	id = tec_automation.11
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			uses_district_set = standard
		}
		owner = {
			OR = {
				tec_is_automated_empire = yes					# Automation
			}
		}
		#NOT = {
		#	has_country_flag = tec_automation_checker_cd
		#}
	}

	immediate = {
		export_modifier_to_variable = {	# Global job production
			modifier = planet_jobs_produces_mult
			variable = tec_planet_jobs_produces_mult
		}
		tec_recalc_energy_planet_modifiers = yes
		tec_recalc_minerals_planet_modifiers = yes
		tec_recalc_food_planet_modifiers = yes
		clear_variable = tec_planet_jobs_produces_mult
	}
}


# Envoy Civics
# ------------------------------------------------------------
namespace = tec_envoy

leader_event = {	# Envoy is assigned on_leader_assigned
	id = tec_envoy.10
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		leader_class = envoy
		OR = {
			has_envoy_task = {
				task = improve_relations
			}
			has_envoy_task = {
				task = harm_relations
			}
			has_envoy_task = {
				task = federation
			}
			has_envoy_task = {
				task = galactic_community
			}
		}
	}

	immediate = {
		hidden_effect = {
			if = {
				limit = {
					owner = {
						is_regular_empire = yes
						is_megacorp = no
					}
				}
				break = yes
			}
			else_if = {
				limit = {
					owner = {
						is_regular_empire = yes
						is_megacorp = yes
					}
				}
				break = yes
			}
			else_if = {
				limit = {
					owner = {
						is_machine_empire = yes
					}
				}
				if = {
					limit = {
						owner = {
							has_valid_civic = civic_environmentalist
						}
					}
					break = yes
				}
			}
			else_if = {
				limit = {
					owner = {
						is_hive_empire = yes
					}
				}
				break = yes
			}
			else = {
				break = yes
			}
		}
	}
}

leader_event = {	# Envoy is unassigned
	id = tec_envoy.15
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		leader_class = envoy
		NOR = {
			has_envoy_task = {
				task = improve_relations
			}
			has_envoy_task = {
				task = harm_relations
			}
			has_envoy_task = {
				task = federation
			}
			has_envoy_task = {
				task = galactic_community
			}
		}
	}

	immediate = {
		hidden_effect = {
			
		}
	}
}

# Imperial cult
# ------------------------------------------------------------
namespace = tec_imperial_cult

# marks the leader when the civic is added

# unmarks the leader when the civic is removed, but preserves choices

# intro

# growing in power

# 


# path a - sanguine reign
# - Ruler uses the life of others for itself
# path b - clone reign
# - Ruler perpetuates itself via cloning, with a inherited dynasty
# path c - benevolent reign
# - Ruler is just an uninteresting character
# path d - cyborg god
# - Ruler uses specific cybernetic augmentations and a throne to keep himself tied up
# path e - power of the old ones
# - Ruler uses minor artifacts to empower himself

# path f - Chosen one (override)


# Percussive Hiveminds
# ------------------------------------------------------------
namespace = tec_percuhive

# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
# on_fleet_destroyed_victim
country_event = {
	id = tec_percuhive.10
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		# Somehow the ship scope is not working, i willtry to fix it
		always = no
		has_valid_civic = civic_tec_hive_percussive
		NOT = {
			has_country_flag = tec_percussive_cd
		}
		#fromfrom = {
		#	exists = leader
		#	leader = {
		#		leader_class = admiral
		#	}
		#}
	}

	immediate = {
		if = {
			limit = {
				exists = from.from.leader
				from.from.leader = {
					leader_class = admiral
				}
			}
			# Adds country flag
			set_timed_country_flag = {
				flag = tec_percussive_cd
				months = 6
			}
			# Export leader level to a var
			from.from.leader = {
				export_trigger_value_to_variable = {
					trigger = has_skill
					variable = root.tec_percussive_effect
				}
			}
			# Apply effect
			fromfrom.solar_system = {
				every_fleet_in_system = {
					add_modifier = {
						modifier = modifier_tec_percussive_modifier
						multiplier = root.tec_percussive_effect
						months = 2
					}
				}
			}
		}
		else = {
			# Adds country flag
			set_timed_country_flag = {
				flag = tec_percussive_cd
				months = 6
			}
			# Export leader level to a var
			from.from.leader = {
				export_trigger_value_to_variable = {
					trigger = has_skill
					variable = root.tec_percussive_effect
				}
			}
			# Apply effect
			fromfrom.solar_system = {
				every_fleet_in_system = {
					add_modifier = {
						modifier = modifier_tec_percussive_modifier
						multiplier = root.tec_percussive_effect
						months = 2
					}
				}
			}
		}
	}
}

# good version
# Executed as a leader has died
# This = Country
# From = Leader
#on_leader_death = {
country_event = {
	id = tec_percuhive.10
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_valid_civic = civic_tec_hive_percussive
		NOT = {
			has_country_flag = tec_percussive_cd
		}
		from = {
			leader_class = admiral
		}
	}

	immediate = {
		# Adds country flag
		set_timed_country_flag = {
			flag = tec_percussive_cd
			months = 12
		}
		# Apply effect
		add_modifier = {
			modifier = modifier_tec_percussive_modifier_good
			multiplier = from.trigger:has_skill
			months = 2
		}
	}
}

# -------------------------------------------------------
#Trait events

namespace = tec_trait
#traitchecker
planet_event = {
	id = tec_trait.10
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		always = yes
	}

	immediate = {
		# Cryptobiotic
		planet_event = {
			id = tec_trait.11
			#extra delay to ensure it works well
			days = 1
		}
	}
}

#Cryptobiotic
planet_event = {
	id = tec_trait.11
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_owned_pop = {
			has_trait = trait_tec_cryptobiotic
		}
	}

	immediate = {
		root = {
			random_owned_pop = {
				limit = {
					has_trait = trait_tec_cryptobiotic
				}
				root = {
					create_pop = {
						species = prev
					}
				}
			}
		}
	}
}


# Lithoid sedimentary
planet_event = {
	id = tec_trait.15
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = {
			has_planet_flag = tec_recent_sedimentary_colonization
		}
		any_owned_pop = {
			has_trait = trait_tec_lithoid_sedimentary
		}
	}

	immediate = {
		root = {
			set_timed_planet_flag = {
				flag = tec_recent_sedimentary_colonization
				years = 25
			}
			random_list = {
				25 = {
					while = {
						count = 3
						add_deposit = d_tec_sedimented_lithoids
					}
				}
				25 = {
					while = {
						count = 4
						add_deposit = d_tec_sedimented_lithoids
					}
				}
				25 = {
					while = {
						count = 5
						add_deposit = d_tec_sedimented_lithoids
					}
				}
			}
		}
	}
}

# Metamorphosis
pop_event = {
	id = tec_trait.20
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_trait = trait_tec_metamorphosis
	}

	immediate = {
		hidden_effect = {
			set_timed_pop_flag = {
				flag = tec_metamorphosis_phase_0
				years = 10
			}
			set_timed_pop_flag = {
				flag = tec_metamorphosis_phase_1
				years = 20
			}
		}
	}
}

# If the robot is mammalian, it changes to a mammalian appeal controlled via policy
# If the robot has a mammalian appeal, fall backs to mammalian robot if trait is out
# Synthetic skin/Nanite swarm appearance 
country_event = {
	id = tec_trait.1000
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		always = no
		from = {
			OR = {
				has_trait = @trait_tec_robot_liquid
				has_trait = @trait_tec_robot_nanitebody
			}
		}
	}

	immediate = {
		every_owned_leader = {
			limit = {
				is_same_species = from
			}
			tec_machine_organic_camouflage = yes
		}
		if = {
			limit = {
				ruler = {
					species = {
						is_same_species = from
					}
				}
			}
			ruler = {
				tec_machine_organic_camouflage = yes
			}
		}
	}
}

# Misc gestalt events
# ------------------------------------------------------------
namespace = tec_gestalt

# Assimilator fixer
country_event = {
	id = tec_gestalt.90100
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_machine_empire = yes
		has_valid_civic = civic_machine_assimilator
	}
	
	immediate = {
		every_owned_species = {
			limit = {
				has_citizenship_type = {
					type = citizenship_assimilation
				}
			}
			set_citizenship_type = {
				type = citizenship_full_machine
			}
		}
	}
}

# Empathy
# ------------------------------------------------------------
namespace = tec_gestalt_empathy

# Gestalt migration event - Manager
country_event = {	# PREV
	id = tec_gestalt_empathy.11111
	title = "tec_gestalt_empathy.11.name"
	desc = "tec_gestalt_empathy.11.desc"
	picture = GFX_evt_diplomatic_visit
	show_sound = event_ship_bridge
	
	is_triggered_only = yes

	trigger = {
		has_ethic = ethic_gestalt_empathy
		has_technology = tech_tec_gestalt_friendship
		any_playable_country = {
			NOT = {				
				has_country_flag = tec_provided_pop_@root
			}
			NOT = {
				is_at_war_with = root
			}
			OR = {
				opinion_level = {
					who = root
					level >= good
				}
				is_in_federation_with = root
				is_loyal_to = root
			}
			OR = {
				is_gestalt = no					# No other gestalts for balance reasons
				AND = {
					is_gestalt = yes			# But yes for empathic gestalt hives
					is_hive_empire = yes
					has_ethic = ethic_gestalt_empathy
				}
			}
			is_fallen_empire = no			# No fe cheese
			is_synthetic_empire = no		# No droids
		}
	}

	option = {
		name = tec_gestalt_empathy.11.a
	}

	immediate = {
		hidden_effect = {
			set_variable = {
				which = tec_empath_welcome_pops_temp
				value = 0
			}
			while = {
				count = 5
				# Marks up to 5 candidate planets to receive a pop 
				# DEPRECATED - Distribution will be random and number of pops capped to 1 per 
				#				planet to prevent overcrowding
				random_owned_planet = {
					limit = {
						is_colony = yes
						NOR = {	# Avoid organics being resettled on worlds they should not be resettled on
							uses_district_set = hive_world
							uses_district_set = machine_world
						}
						NOT = {
							has_planet_flag = tec_empathy_migration_candidate_off
						}
					}
					save_event_target_as = tec_empathy_migration_candidate
					set_timed_planet_flag = {
						flag = tec_empathy_migration_candidate_off
						years = 1
					}
				}

				# Checks up to 5 compatible countries and moves a pop to one of the candidate planets
				random_playable_country = {
					limit = {
						NOT = {				
							has_country_flag = tec_provided_pop_@root
						}
						NOT = {
							is_at_war_with = root
						}
						OR = {
							opinion_level = {
								who = root
								level >= good
							}
							is_in_federation_with = root
							is_loyal_to = root
						}
						OR = {
							is_gestalt = no					# No other gestalts for balance reasons
							AND = {
								is_gestalt = yes			# But yes for empathic gestalt hives
								is_hive_empire = yes
								has_ethic = ethic_gestalt_empathy
							}
						}
						is_fallen_empire = no			# No fe cheese
						is_synthetic_empire = no		# No droids
					}
					set_timed_country_flag = {			#Prevents repeated pops in the same sequence, diversity!
						flag = tec_provided_pop_@root
						years = 10
					}
					# Duplicates a compatible pop
					capital_scope = {
						random_owned_pop = {
							limit = {
								is_organic_species = yes
								is_enslaved = no
							}
							save_event_target_as = tec_copy_pop_@prevprev
						}
						# Aliens are friendly, we want to migrate there
						while = {
							count = 1 #test
							create_pop = {
								species = event_target:tec_copy_pop_@prev
								ethos = {
									ethic = "ethic_xenophile"		
								}
							}
						}
					}
					
					# Clears the pop category and moves it to a candidate
					last_created_pop = {
						clear_pop_category = yes
						resettle_pop = {
							pop = THIS
							planet = event_target:tec_empathy_migration_candidate
						}
					#	if = {			# too op and subspecies = bad
					#		limit = {
					#			NOT = {
					#				ideal_planet_class = event_target:tec_empathy_migration_candidate
					#			}
					#		}
					#		last_created_pop = {
					#			modify_species = {
					#				ideal_planet_class = event_target:tec_empathy_migration_candidate
					#			}
					#		}
					#	}
						
					}
					# Total welcome pops
					root = {
						change_variable = {
							which = tec_empath_welcome_pops
							value = 1
						}
					}
					# Local welcome pops for message
					root = {
						change_variable = {
							which = tec_empath_welcome_pops_temp
							value = 1
						}
					}
				}
			}
		}
	}
}

country_event = {	# Test
	id = tec_gestalt_empathy.11
	title = "tec_gestalt_empathy.11.name"
	desc = "tec_gestalt_empathy.11.desc"
	picture = GFX_evt_diplomatic_visit
	show_sound = event_ship_bridge
	
	is_triggered_only = yes

	trigger = {
		has_ethic = ethic_gestalt_empathy
		has_technology = tech_tec_gestalt_friendship
		any_playable_country = {
			NOT = {				
				has_country_flag = tec_provided_pop_@root
			}
			NOT = {
				is_at_war_with = root
			}
			OR = {
				opinion_level = {
					who = root
					level >= good
				}
				is_in_federation_with = root
				is_loyal_to = root
			}
			OR = {
				is_gestalt = no					# No other gestalts for balance reasons
				AND = {
					is_gestalt = yes			# But yes for empathic gestalt hives
					is_hive_empire = yes
					has_ethic = ethic_gestalt_empathy
				}
			}
			is_fallen_empire = no			# No fe cheese
			is_synthetic_empire = no		# No droids
		}
	}

	option = {
		name = tec_gestalt_empathy.11.a
	}

	immediate = {
		hidden_effect = {
			set_variable = {
				which = tec_empath_welcome_pops_temp
				value = 0
			}
			while = {
				count = 5
				# Marks up to 5 candidate planets to receive a pop 
				# DEPRECATED - Distribution will be random and number of pops capped to 1 per 
				#				planet to prevent overcrowding
				random_owned_planet = {
					limit = {
						is_colony = yes
						NOT = {
							has_planet_flag = tec_empathy_migration_candidate_off
						}
					}
					save_event_target_as = tec_empathy_migration_candidate
					set_timed_planet_flag = {
						flag = tec_empathy_migration_candidate_off
						years = 1
					}
				}

				# Checks up to 5 compatible countries and moves a pop to one of the candidate planets
				random_playable_country = {
					limit = {
						NOT = {				
							has_country_flag = tec_provided_pop_@root
						}
						NOT = {
							is_at_war_with = root
						}
						OR = {
							opinion_level = {
								who = root
								level >= good
							}
							is_in_federation_with = root
							is_loyal_to = root
						}
						OR = {
							is_gestalt = no					# No other gestalts for balance reasons
							AND = {
								is_gestalt = yes			# But yes for empathic gestalt hives
								is_hive_empire = yes
								has_ethic = ethic_gestalt_empathy
							}
						}
						is_fallen_empire = no			# No fe cheese
						is_synthetic_empire = no		# No droids
					}
					save_event_target_as = tec_g_m_cand
					set_timed_country_flag = {			#Prevents repeated pops in the same sequence, diversity!
						flag = tec_provided_pop_@root
						years = 10
					}
					# Duplicates a compatible pop
					random_owned_species = {
						limit = {
							is_organic_species = yes
							NOR = {
								is_archetype = BIOSERVANT
								has_trait = @trait_tec_bioservant
							}
						}
						save_event_target_as = tec_copy_pop
					}
				
					# Clears the pop category and moves it to a candidate
					event_target:tec_empathy_migration_candidate = {
						create_pop = {
							species = event_target:tec_copy_pop
							ethos = event_target:tec_g_m_cand
						}
					}
					# Total welcome pops
					root = {
						change_variable = {
							which = tec_empath_welcome_pops
							value = 1
						}
					}
					# Local welcome pops for message
					root = {
						change_variable = {
							which = tec_empath_welcome_pops_temp
							value = 1
						}
					}
				}
			}
		}
	}
}

# Cost swaps
# ------------------------------------------------------------
namespace = tec_cost_swap_civic
# Organic architecture hidden modifier
country_event = {
	id = tec_cost_swap_civic.501
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			tec_is_bioarch_empire = yes
			has_valid_civic = civic_tec_machine_digitalization
		}
		if = {
			limit = { tec_is_bioarch_empire = yes }
			NOT = {
				has_modifier = modifier_tec_hidden_organicarch_modifier
			}
		}
		if = {
			limit = { has_valid_civic = civic_tec_machine_digitalization }
			NOT = {
				has_modifier = modifier_tec_hidden_digitalization_modifier
			}
		}
	}

	immediate = {
		if = {
			limit = {
				tec_is_bioarch_empire = yes
				NOT = {
					has_modifier = modifier_tec_hidden_organicarch_modifier
				}
			}
			add_modifier = {
				modifier = modifier_tec_hidden_organicarch_modifier
				days = -1
			}
		}
		if = {
			limit = {
				has_valid_civic = civic_tec_machine_digitalization
				NOT = {
					has_modifier = modifier_tec_hidden_digitalization_modifier
				}
			}
			add_modifier = {
				modifier = modifier_tec_hidden_digitalization_modifier
				days = -1
			}
		}
	}
}

# Hive Everevolving
# ------------------------------------------------------------
namespace = tec_hive_everevolving

# Everevolving hive events - 1000-1100
country_event = {
	id = tec_hive_everevolving.1000
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_hive_everevolving
	}

	immediate = {
		add_modifier = {
			modifier = modifier_tec_everevolving_primal
			days = -1
		}
		set_variable = {
			which = modifier_tec_everevolving_checker
			value = 0
		}
	}
}

# Everevolving hive trigger
country_event = {
	id = tec_hive_everevolving.1001
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_hive_everevolving
	}
	
	immediate = {
		# 10% chance of evolving per 2 year passed, if a empire hasnt evolved in 10 years 40%
		if = {
			limit = {
				check_variable = {
					which = modifier_tec_everevolving_checker
					value < 5
				}
			}
			random_list = {
				1 = {
					# variable will be reseted anyways if conditions are met
				#	change_variable = {
				#		which = modifier_tec_everevolving_checker
				#		value = 1
				#	}
					country_event = {
						id = tec_hive_everevolving.1002
					#	days = 45
					}
				}
				9 = {
					change_variable = {
						which = modifier_tec_everevolving_checker
						value = 1
					}
					# more luck next time
				}

			}
		}
		if = {
			limit = {
				check_variable = {
					which = modifier_tec_everevolving_checker
					value >= 5
				}
			}
			random_list = {
				4 = {
					# variable will be reseted anyways if conditions are met
				#	change_variable = {
				#		which = modifier_tec_everevolving_checker
				#		value = 1
				#	}
					country_event = {
						id = tec_hive_everevolving.1002
					#	days = 45
					}
				}
				6 = {
					change_variable = {
						which = modifier_tec_everevolving_checker
						value = 1
					}
					# more luck next time
				}
			}
		}
		
	}
}

# Hive everevolving manager
country_event = {
	id = tec_hive_everevolving.1002
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_hive_everevolving
	}

	immediate = {
		hidden_effect = {
			# Primal to Young
			if = {
				limit = {
					OR = {
						num_owned_planets > 3
						years_passed > 15
						num_rare_techs > 0
					#	always = yes
					}
					NOR = {
						has_country_flag = tec_young_hive
						has_country_flag = tec_mature_hive
						has_country_flag = tec_venerable_hive
					}
				}
				set_variable = {
					which = modifier_tec_everevolving_checker
					value = 0
				}
				set_country_flag = tec_young_hive
				remove_country_flag = tec_primal_hive
				remove_modifier = modifier_tec_everevolving_primal
				add_modifier = {
					modifier = modifier_tec_everevolving_young
					days = -1
				}
				country_event = {
					id = tec_hive_everevolving.1010
				}
				break = yes
			}
			# Young to Primal - Yes, its possible to revert
			if = {
				limit = {
					always = no
					has_country_flag = tec_young_hive
					num_owned_planets < 4
					num_pops < 60
					NOR = {
						has_country_flag = tec_mature_hive
						has_country_flag = tec_venerable_hive
					}
				}
				set_variable = {
					which = modifier_tec_everevolving_checker
					value = 0
				}
				remove_country_flag = tec_young_hive
				set_country_flag = tec_primal_hive
				remove_modifier = modifier_tec_everevolving_young
				add_modifier = {
					modifier = modifier_tec_everevolving_primal
					days = -1
				}
				country_event = {
					id = tec_hive_everevolving.1011
				}
				break = yes
			}

			# Young to Mature
			if = {
				limit = {
				#	always = yes
					has_country_flag = tec_young_hive
					num_owned_planets > 3
					years_passed > 30
					num_pops > 50
					NOR = {
						has_country_flag = tec_mature_hive
						has_country_flag = tec_venerable_hive
					}
				}
				set_variable = {
					which = modifier_tec_everevolving_checker
					value = 0
				}
				remove_country_flag = tec_young_hive
				set_country_flag = tec_mature_hive
				remove_modifier = modifier_tec_everevolving_young
				add_modifier = {
					modifier = modifier_tec_everevolving_mature
					days = -1
				}
				country_event = {
					id = tec_hive_everevolving.1012
				}
				break = yes
			}
			# Mature to Venerable
			if = {
				limit = {
				#	always = yes
					has_country_flag = tec_mature_hive
					num_owned_planets > 3
					num_pops > 80
					years_passed > 50
					num_rare_techs > 1
					NOT = {
						has_country_flag = tec_venerable_hive
					}
				}
				set_variable = {
					which = modifier_tec_everevolving_checker
					value = 0
				}
				remove_country_flag = tec_mature_hive
				set_country_flag = tec_venerable_hive
				remove_modifier = modifier_tec_everevolving_mature
				add_modifier = {
					modifier = modifier_tec_everevolving_venerable
					days = -1
				}
				country_event = {
					id = tec_hive_everevolving.1013
				}
				break = yes
			}
		}
	}
}

	# evolved to young
country_event = {
	id = tec_hive_everevolving.1010
	title = tec_hive_everevolving.1010.title
	desc = tec_hive_everevolving.1010.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_alien_nature


	is_triggered_only = yes

	option = {
		name = tec_hive_everevolving.1010.a	# We shall improve, we shall evolve.
	}
}

	# devolved to feral
country_event = {
	id = tec_hive_everevolving.1011
	title = tec_hive_everevolving.1011.title
	desc = tec_hive_everevolving.1011.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_alien_nature


	is_triggered_only = yes

	option = {
		name = tec_hive_everevolving.1011.a	# Consume... Improve... Overcome...
	}
}

	# evolved to mature
country_event = {
	id = tec_hive_everevolving.1012
	title = tec_hive_everevolving.1012.title
	desc = tec_hive_everevolving.1012.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_alien_nature


	is_triggered_only = yes

	option = {
		name = tec_hive_everevolving.1012.a	# Our mind stays strong and our will is infinite.
	}
}

	# evolved to venerable
country_event = {
	id = tec_hive_everevolving.1013
	title = tec_hive_everevolving.1013.title
	desc = tec_hive_everevolving.1013.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_alien_nature


	is_triggered_only = yes

	option = {
		name = tec_hive_everevolving.1013.a	# We are one and infinite and so we will be through eons.
	}
}

# Servitors
# ------------------------------------------------------------
namespace = tec_machine_servitor
# Servitor branch migration mechanic

# Gestalt migration event - Manager
planet_event = {
	id = tec_machine_servitor.5555
	hide_window = yes
	
	is_triggered_only = yes

	trigger = {
		has_planet_flag = tec_servitor_snatcher_candidate
		has_branch_office = yes
		has_building = building_tec_machinecorp_carebots_2
		# double check just in case
		branch_office_owner = {
			is_gestalt = yes
			is_machine_empire = yes
			tec_is_symbiotic_machine = yes
		}
	}

	immediate = {
		hidden_effect = {
			random_list = {
				66 = {
					# nothing, repeats itself
				}
				33 = {
					# A happy pop moves to a servitor planet
					random_owned_pop = {
						limit = {
							has_job = tec_hedonist
							is_organic_species = yes
						}
						species = {
							save_event_target_as = tec_servitor_snatched_pop
						}
					}

					branch_office_owner = {
						change_variable = {
							which = tec_branch_snatched_pops
							value = 1
						}
						random_owned_planet = {
							limit = {
								has_available_jobs = bio_trophy
							}
							create_pop = {
								species = event_target:tec_servitor_snatched_pop
								ethos = {
									ethic = "ethic_xenophile"		
								}
							}
							last_created_pop = {
								if = {
									limit = {
										prev.owner = {
											has_technology = tech_glandular_acclimation
										}
										prev = {
											# For avoiding messy errors or op habitability
											tec_is_vanilla_habitable_regular_planet = yes
										}
										NOT = {
											ideal_planet_class = prev
										}
									}
									last_created_pop = {
										modify_species = {
											ideal_planet_class = prev
										}
									}
								}
							}
							# deliver message to the gestalt empire 
							owner = {
								create_message = {
									type = MESSAGE_TEC_SNATCHED_POP_EVENT
									localization = MESSAGE_TEC_SNATCHED_POP
									days = 30
									target = this
									variable = {
										type = name
										localization = SPECIES
										scope = event_target:tec_servitor_snatched_pop
									}
									variable = {
										type = name
										localization = OGPLANET
										scope = root
									}
									variable = {
										type = name
										localization = PLANET
										scope = prev
									}
								}
							}
							# deliver message to the branch host empire
							root.owner = {
								create_message = {
									type = MESSAGE_TEC_SNATCHED_POP_OG_EVENT
									localization = MESSAGE_TEC_SNATCHED_POP_OG
									days = 30
									target = this
									variable = {
										type = name
										localization = SPECIES
										scope = event_target:tec_servitor_snatched_pop
									}
									variable = {
										type = name
										localization = OGPLANET
										scope = root
									}
									variable = {
										type = name
										localization = PLANET
										scope = prev
									}
								}
							}
							
						}
					}
				}
			}
		}
	}

	after = {
		planet_event = {
			id = tec_machine_servitor.5555
			days = 1800
			random = 100
		}
	}
}

# Gestalt migration event - Branch office owner via message 
# will do soon tm ^_^

# Gestalt migration event - Inform the host via message
# will do soon tm ^_^


# Query Proposers
# ------------------------------------------------------------
namespace = tec_machine_pompous

country_event = {
	id = tec_machine_pompous.100
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_pompous
	}
	
	immediate = {
		export_resource_stockpile_to_variable = {
			resource = influence
			variable = tec_influence_temp
		}
		if = {		# Capped at 1000
			limit = {
				check_variable = {
					which = tec_influence_temp
					value <= 1000
				}
			}
			# Multiplies it by 0.01
			multiply_variable = {
				which = tec_influence_temp
				value = 0.05
				# 1000 influence = 50%
			}
		}
		else = {	# Over 1000 = 50% still
			set_variable = {
				which = tec_influence_temp
				value = 50
			}
		}
		remove_modifier = modifier_tec_machine_pompous
		add_modifier = {
			modifier = modifier_tec_machine_pompous
			mult = tec_influence_temp
		}
		clear_variable = tec_influence_temp
	}
}

# Impersonation Protocol
# ------------------------------------------------------------
namespace = tec_machine_impersonation
# Impersonation protocol events - 2000
# manager - on 5 year pulse
country_event = {
	id = tec_machine_impersonation.1999
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	immediate = {
		# each 10 years
		change_variable = {
			which = tec_machinebias_checker
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = tec_machinebias_checker
					value = 2
				}
			}
	
			# Procurator round to other
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_procurator
				}
				set_country_flag = tec_was_procurator_bias
				set_variable = {
					which = tec_machinebias_checker
					value = 0
				}
				# was inventor, automatically offender wins
				if = {
					limit = {
						has_country_flag = tec_was_inventor_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_offender
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2011
						days = 2
					}
				}
				# was offender, automatically inventor wins
				if = {
					limit = {
						has_country_flag = tec_was_offender_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_inventor
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2012
						days = 2
					}
				}
				# Only was procurator, never the others
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_inventor_bias
							has_country_flag = tec_was_offender_bias
						}
					}
					random_list = {
						1 = {	# offender wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
					}
				}
			}

			# Inventor round to other
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_inventor
				}
				set_country_flag = tec_was_inventor_bias
				set_variable = {
					which = tec_machinebias_checker
					value = 0
				}
				# was procurator, automatically offender wins
				if = {
					limit = {
						has_country_flag = tec_was_procurator_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_offender
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2011
						days = 2
					}
				}
				# was offender, automatically procurator wins
				if = {
					limit = {
						has_country_flag = tec_was_offender_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_procurator
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2010
						days = 2
					}
				}
				# Only was procurator, never the others
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_inventor_bias
							has_country_flag = tec_was_offender_bias
						}
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# offender wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
						
					}
				}
			}

			# offender round to other
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_offender
				}
				set_country_flag = tec_was_offender_bias
				set_variable = {
					which = tec_machinebias_checker
					value = 0
				}
				# was procurator, automatically inventor wins
				if = {
					limit = {
						has_country_flag = tec_was_procurator_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_inventor
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2012
						days = 2
					}
				}
				# was inventor, automatically procurator wins
				if = {
					limit = {
						has_country_flag = tec_was_inventor_bias
					}
					remove_modifier = modifier_tec_impersonation_neutral
					remove_modifier = modifier_tec_impersonation_procurator
					remove_modifier = modifier_tec_impersonation_offender
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_procurator
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2010
						days = 2
					}
				}
				# Only was offender, never the others
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_inventor_bias
							has_country_flag = tec_was_offender_bias
						}
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_neutral
							remove_modifier = modifier_tec_impersonation_procurator
							remove_modifier = modifier_tec_impersonation_offender
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
						
					}
				}
			}

			# prevents repetition
			if = {	# first round
				limit = {
					has_modifier = modifier_tec_impersonation_neutral
				}
				set_variable = {
					which = tec_machinebias_checker
					value = 0
				}
				random_list = {
					1 = {	# procurator wins
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}
					}
					1 = {	# offender wins
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}
					}
					1 = {	# inventor wins
						remove_modifier = modifier_tec_impersonation_neutral
						remove_modifier = modifier_tec_impersonation_procurator
						remove_modifier = modifier_tec_impersonation_offender
						remove_modifier = modifier_tec_impersonation_inventor
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}
					}
				}
			}

			# Round reset
			if = {
				limit = {
					has_country_flag = tec_was_procurator_bias
					has_country_flag = tec_was_offender_bias
					has_country_flag = tec_was_inventor_bias
				}
				if = {
					limit = {
						NOT = {
							has_modifier = modifier_tec_impersonation_procurator
						}
					}
					remove_country_flag = tec_was_procurator_bias
				}
				if = {
					limit = {
						NOT = {
							has_modifier = modifier_tec_impersonation_offender
						}
					}
					remove_country_flag = tec_was_offender_bias
				}
				if = {
					limit = {
						NOT = {
							has_modifier = modifier_tec_impersonation_inventor
						}
					}
					remove_country_flag = tec_was_inventor_bias
				}
				
			}
			
		}
		else = {
			#nothing
		}
	}
}

country_event = {
	id = tec_machine_impersonation.2000
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	immediate = {
		# each 10 years
		change_variable = {
			which = tec_machinebias_checker
			value = 1
		}
		if = {
			limit = {
				check_variable = {
					which = tec_machinebias_checker
					value = 2
				}
			}
			# reset
			set_variable = {
				which = tec_machinebias_checker
				value = 0
			}
			
		#	if = {
		#		limit = {
		#			has_country_flag = tec_was_procurator_bias
		#			has_country_flag = tec_was_offender_bias
		#			has_country_flag = tec_was_inventor_bias
		#		}
		#		remove_country_flag = tec_was_procurator_bias
		#		remove_country_flag = tec_was_offender_bias
		#		remove_country_flag = tec_was_inventor_bias
		#		random_list = {
		#	#		1 = {
		#	#			remove_country_flag = tec_was_procurator_bias
		#	#		}
		#	#		1 = {
		#	#			remove_country_flag = tec_was_offender_bias
		#	#		}
		#	#		1 = {
		#	#			remove_country_flag = tec_was_inventor_bias
		#	#		}
		#			
		#			
		#		}

			if = {	# first round
				limit = {
					has_modifier = modifier_tec_impersonation_neutral
				}
				random_list = {
					1 = {	# procurator wins
						remove_modifier = modifier_tec_impersonation_neutral
						add_modifier = {
							modifier = modifier_tec_impersonation_procurator
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2010
							days = 2
						}
					}
					1 = {	# offender wins
						remove_modifier = modifier_tec_impersonation_neutral
						add_modifier = {
							modifier = modifier_tec_impersonation_offender
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2011
							days = 2
						}
					}
					1 = {	# inventor wins
						remove_modifier = modifier_tec_impersonation_neutral
						add_modifier = {
							modifier = modifier_tec_impersonation_inventor
							days = -1
						}
						country_event = {
							id = tec_machine_impersonation.2012
							days = 2
						}
					}
				}
				break = yes
			}

			# If has Procurator
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_procurator
				}
				set_country_flag = tec_was_procurator_bias
				if = {
					limit = {
						has_country_flag = tec_was_inventor_bias
					}
					remove_modifier = modifier_tec_impersonation_procurator
					add_modifier = {
						modifier = modifier_tec_impersonation_offender
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2011
						days = 2
					}

					remove_country_flag = tec_was_inventor_bias


					break = yes
				}
				if = {
					limit = {
						has_country_flag = tec_was_offender_bias
					}
					remove_modifier = modifier_tec_impersonation_procurator
					add_modifier = {
						modifier = modifier_tec_impersonation_inventor
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2012
						days = 2
					}

					remove_country_flag = tec_was_offender_bias

					break = yes
				}
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_inventor_bias
							has_country_flag = tec_was_offender_bias	
						}
					}
					random_list = {
						1 = {	# offender wins
							remove_modifier = modifier_tec_impersonation_procurator
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_procurator
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
					}
				}

				
				
				break = yes
			}

			# If has Inventor
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_inventor
				}
				set_country_flag = tec_was_inventor_bias
				if = {
					limit = {
						has_country_flag = tec_was_procurator_bias
					}
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_procurator
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2010
						days = 2
					}

					remove_country_flag = tec_was_procurator_bias

					break = yes
				}
				if = {
					limit = {
						has_country_flag = tec_was_offender_bias
					}
					remove_modifier = modifier_tec_impersonation_inventor
					add_modifier = {
						modifier = modifier_tec_impersonation_offender
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2011
						days = 2
					}

					remove_country_flag = tec_was_offender_bias

					break = yes
				}
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_procurator_bias
							has_country_flag = tec_was_offender_bias	
						}
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_inventor
							add_modifier = {
								modifier = modifier_tec_impersonation_offender
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2011
								days = 2
							}
						}
					}
				}
				
				break = yes
			}

			
			# If has Offender
			if = {
				limit = {
					has_modifier = modifier_tec_impersonation_offender
				}
				set_country_flag = tec_was_offender_bias
				if = {
					limit = {
						has_country_flag = tec_was_procurator_bias
					}
					remove_modifier = modifier_tec_impersonation_offender
					add_modifier = {
						modifier = modifier_tec_impersonation_procurator
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2010
						days = 2
					}

					remove_country_flag = tec_was_procurator_bias

					break = yes
				}
				if = {
					limit = {
						has_country_flag = tec_was_inventor_bias
					}
					remove_modifier = modifier_tec_impersonation_offender
					add_modifier = {
						modifier = modifier_tec_impersonation_inventor
						days = -1
					}
					country_event = {
						id = tec_machine_impersonation.2012
						days = 2
					}

					remove_country_flag = tec_was_inventor_bias

					break = yes
				}
				if = {
					limit = {
						NOR = {
							has_country_flag = tec_was_procurator_bias
							has_country_flag = tec_was_inventor_bias	
						}
					}
					random_list = {
						1 = {	# procurator wins
							remove_modifier = modifier_tec_impersonation_offender
							add_modifier = {
								modifier = modifier_tec_impersonation_procurator
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2010
								days = 2
							}
						}
						1 = {	# inventor wins
							remove_modifier = modifier_tec_impersonation_offender
							add_modifier = {
								modifier = modifier_tec_impersonation_inventor
								days = -1
							}
							country_event = {
								id = tec_machine_impersonation.2012
								days = 2
							}
						}
					}
				}
				
				break = yes
			}
		}
		else = {
			break = yes
		}
	}
}

# gamestart, marks the neutral
country_event = {
	id = tec_machine_impersonation.2001
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	immediate = {
		add_modifier = {
			modifier = modifier_tec_impersonation_neutral
			days = -1
		}
	}
}

# Gets Procurator
country_event = {
	id = tec_machine_impersonation.2010
	title = "tec_machine_impersonation.2010.title"
	desc = "tec_machine_impersonation.2010.desc"
	show_sound = event_yellow_alert
	picture = GFX_evt_sapient_AI

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	option = {
		name = "tec_machine_impersonation.2010.a"
	}
}

# Gets offender
country_event = {
	id = tec_machine_impersonation.2011
	title = "tec_machine_impersonation.2011.title"
	desc = "tec_machine_impersonation.2011.desc"
	show_sound = event_yellow_alert
	picture = GFX_evt_sapient_AI

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	option = {
		name = "tec_machine_impersonation.2011.a"
	}
}

# Gets inventor
country_event = {
	id = tec_machine_impersonation.2012
	title = "tec_machine_impersonation.2012.title"
	desc = "tec_machine_impersonation.2012.desc"
	show_sound = event_yellow_alert
	picture = GFX_evt_sapient_AI

	is_triggered_only = yes

	trigger = {
		has_valid_civic = civic_tec_machine_bias
	}
	
	option = {
		name = "tec_machine_impersonation.2012.a"
	}
}

