# common\game_rules\zzzzzzzzzzzzzzzzzz_evolved_rules.txt

#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable



# This = Planet
is_new_colony = {
	NOT = {
		has_planet_flag = synth_queen_bastille
	}
	colony_age < 60
	num_pops < 10
	#OR = {
	#	has_building = building_colony_shelter
	#	has_building = building_tec_hive_sapling
	#	has_building = building_tec_cyberhive_sapling
	#}
}

# This = pop
pop_generates_crime = {
	inline_script = {
		script = tec_read_cache
		scope = pop
		trigger = tec_pop_generates_crime_trigger
	}
}

can_vote_in_democratic_election = {
	inline_script = {
		script = tec_read_cache
		scope = pop
		trigger = tec_can_vote_in_democratic_election_trigger
	}
}

#Root = planet
#This = species
species_can_live_on_planet = {
	hidden_trigger = {
		exists = root #somehow this appeared in the error log. No idea how!
		NAND = {
			root = {
				tec_is_machine_world = yes
			}
			NOR = {
				has_trait = trait_machine_unit
				has_trait = trait_mechanical
				AND = {
					tec_is_cybernetic_species = yes
					exists = root.owner
					OR = {	# Evolved
						root.owner = {
							has_country_flag = synthetic_empire
						}
						root.owner = {
							is_machine_empire = yes
							OR = {
								has_civic = civic_machine_assimilator # Assimilator empire
								has_ascension_perk = ap_mechromancy
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				root = {
					tec_is_hive_world = yes
				}
			}
			OR = {
				has_trait = trait_hive_mind
				AND = { #Necrophage Hive Mind can have Necrophytes
					exists = root.owner
					root.owner = {
						is_hive_empire = yes
						has_origin = origin_necrophage
						prev = { species_can_be_necrophaged = yes }
					}
				}
			}
		}
		if = {
			limit = {
				exists = root.owner
				root.owner = {
					has_origin = origin_clone_army
				}
				OR = {
					has_trait = trait_clone_soldier_infertile
					has_trait = trait_clone_soldier_infertile_full_potential
				}
			}
			custom_tooltip = {
				fail_text = CLONE_ARMY_FORCE_DECLINE
				root = {
					check_variable = { which = clone_pops_missing value >= 0 }
				}
			}
		}
	}
}

#This = leader
should_pay_for_leader_upkeep = {
	# Moved to the leader economy block : leaders\tec_leader_base_upkeep.txt
	always = yes
	# NOR = {
	# 	has_leader_flag = marauder_merc_leader
	# 	has_leader_flag = hired_admiral_merc_leader
	#
	# 	has_trait = leader_trait_spacebender
	# 	has_leader_flag = should_not_have_upkeep
	# }
	# Vanilla ref
	#NOR = {
	#	AND = {
	#		exists = owner
	#		owner = {
	#			is_gestalt = yes
	#		}
	#		is_councilor = yes
	#		has_trait = leader_trait_spacebender
	#		has_leader_flag = should_not_have_upkeep
	#	}
	#}
	#NOR = {
	#	has_leader_flag = marauder_merc_leader
	#	has_leader_flag = hired_admiral_merc_leader
	#}
}

#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	OR = {
		NAND = {
			NOT = {
				root = {
					OR = {
						has_technology = "tech_synthetic_leaders" 
						has_country_flag = synthetic_empire
						has_valid_civic = civic_tec_origin_mecha_perfectionists
					}
				}
			}
			has_trait = "trait_mechanical"
		}
		NAND = {
			NOT = {
				root = {
					has_technology = tech_tec_bioservant_3
				}
			}
			has_trait = trait_tec_bioservant
		}
		has_citizenship_type = { type = citizenship_full country = root }
		# Evolved
			if = {
				limit = {
					has_trait = trait_tec_se_subspecies
				}
				OR = {
					is_same_species = root
					root = {
						OR = {
							has_country_flag = tec_gene_elder_cured
							has_country_flag = tec_replicant_elder_cured
							has_country_flag = tec_biopsionic_elder_cured
						}
					}
				}
			}
		# /
	}
}

# Root = Species
# From = Country
# This = Species
species_has_happiness = {
	NOR = {
		AND = {
			has_trait = trait_machine_unit
			exists = from
			from = { is_machine_empire = yes }
		}
		has_trait = trait_hive_mind
		can_think = no

		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = { is_machine_empire = yes }
				from = { NOT = { has_technology = tech_synthetic_workers } }
				from = { has_policy_flag = ai_outlawed }
			}
		}
		AND = {
			has_trait = trait_tec_bioservant
			OR = {
				NOT = { exists = from }
				from = { is_hive_empire = yes }
				from = { has_policy_flag = intelligent_bioservants_outlawed }
				from = { NOT = { has_technology = tech_tec_bioservant_3 } }
			}
		}
		AND = {
			tec_is_cyborg_species = yes
			exists = from
			from = {
				OR = {
					AND = {
						is_machine_empire = yes
						has_civic = civic_machine_assimilator # Assimilator empire
					}
					AND = {
						is_hive_empire = yes
						tec_is_cyberhive = yes
					}
					AND = {
						has_authority = auth_democratic
						has_country_flag = cyber_collectivist
					}
				}
			}
		}
		# Mindflayers
		AND = {
			exists = from
			NOR = {
				has_citizenship_type = {
					type = citizenship_purge
					country = from
				}
				has_slavery_type = {	# They do realise they are being eaten alive
					type = slavery_livestock
					country = from
				}
			}
			from = {
				has_valid_civic = civic_tec_hive_mindflayers
			}
		}
	}
}

#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		NOR = {
			AND = {
				has_trait = trait_machine_unit
				prev.this = { is_individual_machine = no }
			}
			# Only progenitor hives can release vassals
			AND = {
				has_trait = trait_hive_mind
				NOR = {
					prev.this = { has_origin = origin_progenitor_hive }
					# centrality
					prev.this = {
						has_tradition = tr_tec_centrality_4
					}
				}
			}
			AND = {
				NOT = { has_trait = trait_hive_mind }
				prev.this = { is_hive_empire = yes }
			}
			# Only synth empires can release synth vassals
			AND = {
				has_trait = trait_mechanical
				NOR = {
					prev.this = { has_ascension_perk = ap_synthetic_evolution }
					prev.this = {
						has_tradition = tr_tec_centrality_4
					}
				}
			}
			# dumb pops can't be vassals
			can_think = no
			has_trait = trait_clone_soldier_infertile
			has_trait = trait_clone_soldier_infertile_full_potential
		}
	}
}


# Root = country
# This = species
can_modify_species = {	# TODO MACHINE AGE UPDATE - adjust to our new techs and etc
	# Can't modify root Species during Ascension Situations
	if = {
		limit = {
			is_same_species = ROOT
		}
		custom_tooltip = {
			fail_text = "ASCENSION_SITUATION_ONGOING"

			ROOT = {
				NOT = {
					any_situation = {
						has_ascension_situation_ongoing = yes
					}
				}
			}
		}
	}
	# Organic Species
	if = {
		limit = {
			OR = {
				is_archetype = BIOLOGICAL
				is_archetype = LITHOID
			}
		}
		custom_tooltip = {
			fail_text = "NEEDS_GENE_TAILORING_OR_INTERGRATED_ANATOMY"

			ROOT = {
				OR = {
					has_technology = tech_gene_tailoring
					has_active_tradition = tr_cybernetics_integrated_anatomy
					has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
				}
			}
		}
	}
	# Robots & Machines
	else_if = {
		limit = {
			OR = {
				is_archetype = ROBOT
				is_archetype = MACHINE
			}
		}
		# if = {
		# 	limit = {
		# 		ROOT = {
		# 			OR = {
		# 				AND = { ## organic trying to robomod
		# 					is_individual_machine = no
		# 					is_machine_empire = no
		# 				}
		# 				AND = { ## Machines with origins that delay them
		# 					OR = {
		# 						is_individual_machine = yes
		# 						is_machine_empire = yes
		# 					}
		# 					OR = {
		# 						has_origin = origin_life_seeded
		# 						has_origin = origin_ocean_machines
		# 						has_origin = origin_void_machines
		# 						has_origin = origin_shattered_ring
		# 					}
		# 				}
		# 			}
		# 		}
		# 	}
		# 	custom_tooltip = {
		# 		fail_text = "NEEDS_ROBOT_MODDING"
		#
		# 		ROOT = {
		# 			OR = {
		# 				has_technology = tech_robomodding
		# 				has_technology = tech_robomodding_m
		# 			}
		# 		}
		# 	}
		# }

		# NOTE: Just NO, NO NO NO NO , make them require tech to gene mod
		custom_tooltip = {
			fail_text = "NEEDS_ROBOT_MODDING"

			ROOT = {
				OR = {
					has_technology = tech_robomodding
					has_technology = tech_robomodding_m
				}
			}
		}
	}
	# Self-Modified
	custom_tooltip = {
		fail_text = "CANNOT_MODIFY_SELF_MODIFIED_SPECIES"
		AND = {
			NOT = {
				has_trait = trait_self_modified
			}
			#is_same_species = root
		}
	}
}


# Checks if a pop can be assembled
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	NOT = {
		has_trait = trait_exd
	}
	NOT = {
		AND = {
			has_trait = trait_mechanical
			root.owner = { is_individual_machine = yes }
		}
	}
	NOT = {
		AND = {
			has_virtual_species_trait = yes
			root.owner = {
				is_fallen_empire = no
				has_active_tradition = tr_virtuality_finish
			}
		}
	}
	# tec_can_assemble_species_due_to_purity_assembly_policy = yes
	has_population_control = {
		type = no
		country = root.owner
	}
	OR = {
		AND = { # Evolved - Robots/Machine units/Synths rule - can only be assembled with regular assembly
			is_robotic = yes
			root = {
				if = {
					limit = {
						prev = {
							tec_is_self_replicating_species = yes
						}
						any_owned_species = {
							is_exact_same_species = prevprev
						}
					}
					always = yes
				}
				else = {
					check_modifier_value = {
						modifier = planet_pop_assembly_add
						value > 0
					}
				}
				owner = {
					NOT = { has_country_flag = synth_assembly_stopped }
				}
			}
		}
		AND = { # Evolved - Regular Organic rule - As closer as vanilla as possible
			is_organic_species = yes
			tec_is_bioservant_species = no
			if = {
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				AND = {
					has_trait = trait_hive_mind
				}
			}
			else_if = {	# Self-replicating pop - only assembles itself
				limit = {
					tec_is_self_replicating_species = yes	# This includes budding/tiyanki
					root = {
						any_owned_species = {
							is_exact_same_species = prevprev
						}
					}
				}
				always = yes
			}
			#else_if = {	# Cyborg	TODO REMOVE
			#	limit = {
			#		root.owner = {
			#			tec_allows_machine_assembly_for_cyborg = yes
			#		}
			#	}
			#	tec_is_cyborg_species = yes
			#}
			else_if = { # Clone army thing
				limit = {	# Made the triggers for a future clone army revamp
					tec_is_clone_origin_species = yes
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					tec_has_clone_origin_buildings = yes
					# Trigger with the clone origin buildings, actually only including the vanilla one
					OR = {
						NOT = {
							check_variable = {
								which = clone_pops_missing
								value = 0
							}
						}
						# Unused flag, for now
						owner = {
							tec_waives_clone_origin_assembly_restrictions = yes
						}
					}
				}
			}
			# PD
				inline_script = {
					script = mod_support/tec_pd_uniques_present
					code = "
						else_if = {
							limit = {
								has_planetary_diversity = yes
								is_organic_fourschildren = yes
							}
							root = {
								# Event 'clones.3' should cover this, but extra safety check.
								has_building = @building_techno_04_clone_vat
								NOT = {
									check_variable = {
										which = techno_pops_missing
										value = 0
									}
								}
							}
						}
					"
				}
			# /
			else = {	# Regular assembly
				root = {
					OR = {
						tec_has_cloning_assembly_buildings = yes
						tec_has_genetic_assembly_buildings = yes
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							tec_has_zombie_assembly_buildings = yes
							owner = { tec_is_zombie_empire = yes }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
						#check_modifier_value = {	# Should work as fallback
						#	modifier = planet_pop_assembly_organic_add
						#	value > 0
						#}
					}
				}
			}
		}
		AND = {
			tec_is_bioservant_species = yes
			root = {
				tec_has_bioservant_assembly_buildings = yes
			}
		}
	}
}


# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {	# Aka can_species_grow_on_planet
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_mechanical
		has_trait = trait_tec_sterile
		has_trait = trait_limited_cybernetic
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	NOT = { has_species_flag = nivlac_no_procreation }
	# Evolved
		if = { # Apathic servitors control the population of non trophies pretty well
			limit = {
				root.owner = {
					has_valid_civic = civic_machine_servitor
					has_ethic = ethic_gestalt_apathy
				}
				NOT = {
					has_species_flag = tec_original_biotrophy_@root.owner 
				}
			}
			NOT = {
				root = {
					any_owned_species = {
						has_species_flag = tec_original_biotrophy_@root.owner 
					}
				}
			}
		}
		if = { # Upgraded replicants CAN'T grow
			limit = {
				root.owner = {
					has_country_flag = tec_replicant_upgraded
				}
			}
			NOT = {
				has_trait = trait_tec_replicant_main
			}
		}
	# /
	if = {
		limit = {
			has_cybernetic_creed_trait = yes
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					is_robotic_species = no
					has_cybernetic_creed_trait = no
				}
			}
		}
	}
	if = {
		limit = {
			has_cybernetic_creed_trait = no
		}
		root = {
			any_owned_species = {
				has_population_control = { country = root.owner type = no }
				is_robotic_species = no
				has_cybernetic_creed_trait = no
			}
		}
	}
}

# ------------------------- Unedited - for review
#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		OR = {
			is_enslaved = no
			AND = { # Evolved - Hives can use (enslaved) robots
				owner = {
					has_technology = tech_droid_workers
				}
				has_trait = trait_mechanical
			}
			AND = {
				is_enslaved = yes
				has_slavery_type = {
					type = slavery_domestic
				}
				owner = {
					has_valid_civic = civic_tec_hive_mindflayers
				}
			}
		}
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy country = owner } }
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	inline_script = {
		script = tec_read_cache_tooltip
		scope = pop
		trigger = can_fill_worker_job_trigger
		tooltip = WORKER_JOB_TRIGGER
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_specialist_job
can_fill_specialist_job = {
	inline_script = {
		script = tec_read_cache_tooltip
		scope = pop
		trigger = can_fill_specialist_job_trigger
		tooltip = SPECIALIST_JOB_TRIGGER
	}
	# Defined in 01_scripted_triggers_jobs.txt
}

#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	inline_script = {
		script = tec_read_cache_tooltip
		scope = pop
		trigger = can_fill_ruler_job_trigger
		tooltip = TEC_RULER_JOB_TRIGGER_DYNAMIC
	}
}
# -------------------------- Megacorp rules
# This = country
can_build_branch_offices = {
	OR = {
		if = {
			limit = {
				is_regular_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_MEGACORP
				has_corporate_government = yes
			}
		}
		else_if = {
			limit = {
				is_hive_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_TEC_NOT_SYMBIOTIC
				tec_is_symbiotic_hivemind = yes
			}

		}
		else_if = {
			limit = {
				is_machine_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_TEC_NOT_SYMBIOTIC_MACHINE
				OR = {
					tec_is_symbiotic_machine = yes
					tec_is_trade_machine = yes
				}
			}
		}
	}
}

# This = country
can_support_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}

	# Gestalts empathic empires can host branch offices
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_ONLY_EMPATHIC_GESTALTS
		OR = {
			is_regular_empire = yes
			AND = {
				is_gestalt = yes
				has_ethic = ethic_gestalt_empathy
			}
		}
	}
	# Primitives
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_ADVANCED_PRE_FTL
		if = {
			limit = {
				is_primitive = yes
				is_gestalt = no
			}
			OR = {
				has_pre_ftl_age = atomic_age
				has_pre_ftl_age = early_space_age
			}
		}
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NO_OBSERVATION_OUTPOST
		if = {
			limit = {
				root = { is_criminal_syndicate = yes }
				owner = { is_primitive = yes }
			}
			has_observation_outpost = yes
			observation_outpost_owner = {
				is_same_value = root
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_COOPERACORP
		exists = owner
		OR = {
			owner = {
				is_megacorp = no
			}

			AND = {
				owner = {
					is_megacorp = yes
				}
				root = {
					has_valid_civic = civic_tec_corporate_cooperacorp
				}
			}
			
			AND = {
				owner = {
					is_megacorp = yes
					has_valid_civic = civic_tec_corporate_cooperacorp
				}
				root = {
					NOT = {
						has_valid_civic = civic_tec_corporate_cooperacorp
					}
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			root = { tec_is_symbiotic_hivemind = yes }
			root = {
				tec_is_trade_machine = no
				tec_is_symbiotic_machine = yes
			}
			root = { tec_is_parasite_hivemind = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }
			AND = {
				has_observation_outpost = yes
				observation_outpost = {
					has_modifier = preftl_action_trade_pact
				}
			}

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {	# Roadd @02/12/21
				is_subject = yes
				OR = {
					has_corporate_government = yes
					# Stellaris Evolved
					tec_is_symbiotic_gestalt = yes
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			owner = {	# Roadd @02/12/21
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						has_corporate_government = yes
						# Stellaris Evolved
						tec_is_symbiotic_gestalt = yes
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								has_corporate_government = yes
								# Stellaris Evolved
								tec_is_symbiotic_gestalt = yes
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							has_corporate_government = yes
							# Stellaris Evolved
							tec_is_symbiotic_gestalt = yes
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_RELATION
		exists = owner
		OR = {
			root = { 
				has_corporate_government = yes
			}
			root = {
				tec_is_trade_machine = yes
				tec_is_symbiotic_machine = yes
			}
			root = { is_criminal_syndicate = yes }
			root = { tec_is_parasite_hivemind = yes }
			root = { tec_is_parasite_machine = yes }
			this.owner = {
				opinion_level = { who = root level >= good }
			}
			owner = { is_in_federation_with = root }
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = {
				is_criminal_syndicate = no
			}
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_PARASITE_HAS_TRUCE
		exists = owner
		OR = {
			root = {
				tec_is_parasite_hivemind = no
			}
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_PARASITE_COOLDOWN
		exists = owner
		OR = {
			root = {
				tec_is_parasite_hivemind = no
			}
			AND = {
				root = { tec_is_parasite_hivemind = yes }
				NOT = {
					has_planet_flag = parasite_branch_closed_cooldown_planet@root 
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_OWN
		exists = owner
		owner = {
			NOT = {
				is_same_value = root
			}
		}
	}
	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_NANITE_WORLD
		NOT = { is_planet_class = pc_gray_goo }
	}

	custom_tooltip = {
		fail_text = NO_BRANCH_OFFICE_ON_SYNAPTIC_LATHE
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
}

# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	OR = {
		AND = {
			has_corporate_government = yes
			has_valid_civic = civic_criminal_heritage
		}
		tec_is_parasite_hivemind = yes
	}
}

# This = leader, leader we'd like to trade
# Root = country, country that owns the leader currently
# From = country, country that would receive the leader
can_trade_leader = {
	# The leader must have a trait from a specialist subject type.
	this = {
		has_specialist_subject_leader_trait = yes
		is_councilor = no
		is_heir = no
	}
	OR = {
		AND = { # Either from subject to Overlord
			ROOT = {
				is_subject = yes
			}
			FROM = {
				is_overlord_to = ROOT
			}
		}
		AND = { # Or from a tactical cogitator empire to a NON tactical cogitator empire
			ROOT = { has_valid_civic = civic_machine_tactical_algorithms }
			FROM = {
				NOT = { has_valid_civic = civic_machine_tactical_algorithms }
				is_fallen_empire = no
				NOT = {
					any_owned_leader = {
						has_trait = leader_trait_tactical_algorithms
					}
				}
			}
		}
	}
	# The subject and overlord must both be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_machine_empire = yes
			}
			FROM = {
				is_machine_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_hive_empire = yes
			}
			FROM = {
				is_hive_empire = yes
			}
		}
		AND = { # Tactical Cogitator option
			ROOT = {
				has_valid_civic = civic_machine_tactical_algorithms
			}
			FROM = {
				OR = {
					is_regular_empire = yes
					is_hive_empire = yes
					is_machine_empire = yes
				}
				NOT = { has_country_flag = no_murdering_tactical_leaders }
				NOT = {
					any_owned_leader = {
						has_trait = leader_trait_tactical_algorithms
					}
				}
			}
		}
	}
	# Can't trade gestalt nodes
	is_gestalt_node = no
	# Evolved
	tec_is_aiauth_node = no
	# The overlord can't be a fallen or awakened empire.
	ROOT = {
		NAND = {
			is_overlord = yes
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
	NOR = {
		has_trait = leader_trait_fotd_scientist
		has_trait = leader_trait_fotd_commander
	}
}

# -------- R6A
# Root = current planet
# This = pop
# Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
can_pop_auto_migrate = {
	hidden_trigger = { #this is always true where this tooltip is called
		OR = {
			is_unemployed = yes
			# Evolved
				has_job = tec_state_worker
			# /
		}
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ASSIMILATED
		is_being_assimilated = no
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_VIRTUALITY
		has_virtual_species_trait = no
	}
	if = {
		limit = {
			OR = {
				is_shackled_robot = yes
				is_enslaved = yes
			}
		}
		custom_tooltip = {
			fail_text = AUTO_MIGRATE_SLAVE_PROCESSING
			OR = {
				planet = {
					OR = {
						has_building = building_slave_processing
						AND = {
							exists = orbital_defence
							orbital_defence = {
								exists = starbase
								starbase = {
									has_starbase_building = ring_slave_processing_facility
								}
							}
						}
					}
				}
				solar_system = {
					count_starbase_buildings = {
						type = transit_hub
						count >= 1
						include_being_constructed = no
					}
				}
			}
		}
	}
}

# This = planet
# Checked before can_pop_auto_migrate to save performance
can_planet_auto_migrate = {
	hidden_trigger = {
		if = {
			limit = {
				owner = { is_ai = yes }
			}
			 # blocks ai from relocating pops from planets with unemployment when upgrading capital
			NOR = {
				num_pops = @pops_t2
				AND = {
					num_pops = @pops_t3
					owner = { has_technology = tech_colonial_centralization }
				}
				AND = {
					num_pops = @pops_t4
					owner = { has_technology = tech_galactic_administration }
				}
				AND = {
					num_pops = @pops_t5
					owner = { has_technology = tech_tec_imperial_coordination }
				}
			}
		}
		num_sapient_pops > 1 # blocks migration cheese
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_CULTURE_SHOCK
		NOT = { has_modifier = planet_culture_shock }
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_COLONY_TOO_NEW
		OR = {
			colony_age > 60
			is_capital = yes # Don't break Doomsday!
		}
	}
	custom_tooltip = {
		fail_text = AUTO_MIGRATE_ONLY_HAS_ONE_POP
		num_sapient_pops > 1
	}
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_country_type = default
				is_country_type = awakened_fallen_empire
			}
		}
	}
}

# -------- added with toxoids
#This, root = country
can_gene_mod_habitability = {	# TODO MACHINE AGE UPDATE REVIEW
	always = yes
	# See can_change_habitability_preference in 05__scripted_triggered_traits.txt
	#OR = {
	#	has_technology = tech_glandular_acclimation
	#	has_country_flag = can_gene_mod_habitability
	#	has_country_flag = can_resequence
	#}
}

#This, root = country
can_add_advanced_traits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_enhanced_expression
		has_country_flag = can_add_advanced_traits
		has_country_flag = can_resequence
	}
}

#This, root = country
can_add_negative_traits_organic = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_resequencing
		has_active_tradition = tr_cybernetics_integrated_anatomy
		has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
		has_country_flag = can_add_negative_traits_organic
		has_country_flag = can_resequence

		has_technology = tech_tec_advanced_genemodding
	}
}

#This, root = country
can_remove_positive_traits_organic = {
	OR = {
		AND = {
			has_utopia = yes
			OR = {
				has_tradition = tr_genetics_resequencing
				has_active_tradition = tr_cybernetics_integrated_anatomy
				has_active_tradition = tr_cybernetics_assimilator_integrated_anatomy
				has_country_flag = can_remove_positive_traits_organic
				has_country_flag = can_resequence

				has_technology = tech_tec_advanced_genemodding
				# PD
				has_tradition = @pd_tr_biosynth_perk_2a 
			}
		}
		AND = {
			has_toxoids = yes
			has_origin = origin_overtuned
		}
		has_technology = tech_epigenetic_triggers
	}
}

#This, root = country
can_modify_organic_portraits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_enhanced_expression
		has_country_flag = can_modify_organic_portraits
		has_country_flag = can_resequence
		has_technology = tech_tec_appearance_recombination
	}
}

# Paragons

# this = leader
can_leader_get_council_trait = {
	tec_can_leader_get_council_trait = yes
}

# this = leader
can_leader_get_normal_trait = {
	tec_can_leader_get_normal_trait = yes
}

can_leader_get_subclass_trait = {
	tec_can_leader_get_subclass_trait = yes
}

can_leader_get_destiny_trait = {
	tec_can_leader_get_destiny_trait = yes
}

should_count_towards_leader_cap = {
	tec_should_count_towards_leader_cap = yes
}

# this = leader
can_dismiss_leader = {
	if = {
		limit = {
			leader_class = commander
			is_idle = no
			# Rulers and heirs can't be dismissed any way and can be non-idle
			is_ruler = no
			is_heir = no
		}
		custom_tooltip = {
			fail_text = "requires_fleet_control"
			exists = fleet
			fleet = {
				controller = {
					is_same_value = prev.owner
					is_same_value = prevprev.owner
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_heir = yes
				is_ruler = yes
			}
		}
		custom_tooltip = {
			always = no
			fail_text = "can_not_dismiss_rulers"
		}
	}
	if = {
		limit = {
			leader_class = scientist
		}
		custom_tooltip = {
			fail_text = "can_not_dismiss_rift_explorer"
			NAND = {
				exists = fleet
				fleet = {
					has_fleet_order = explore_astral_rift_fleet_order
				}
			}
		}
	}
	if = {	# Evolved
		limit = {
			tec_is_aiauth_planetary_governing_node = yes
		}
		custom_tooltip = {
			always = no
			fail_text = "tec_can_not_dismiss_aiauth_planetary_governing_nodes"
		}
	}
	if = {
		limit = {
			leader_class = commander
		}
		custom_tooltip = {
			fail_text = "no_dismissing_tacs"
			NOT = { has_trait = leader_trait_tactical_algorithms }
		}
	}
}


# This = leader
will_leader_retire = {
	exists = owner
	not = { has_leader_flag = use_unspecific_death_reason }
	owner = {
		is_gestalt = no
	}
	has_leader_flag = retirement_is_default # Randomized retirement instead of death in paragon.590
	tec_is_aiauth_node = no
}

# this = planet
should_ai_build_stronghold_on_vulnerable_planet = {
	always = no
	#planet_stability > 50
	#OR = {
	#	AND = {
	#		num_pops <= 5
	#		num_buildings = { type = building_stronghold value < 1 }
	#	}
	#	AND = {
	#		num_pops <= 10
	#		num_buildings = { type = building_stronghold value < 2 }
	#	}
	#	AND = {
	#		num_pops <= 15
	#		num_buildings = { type = building_stronghold value < 3 }
	#	}
	#	AND = {
	#		num_pops <= 25
	#		num_buildings = { type = building_stronghold value < 4 }
	#	}
	#}
	#
	#exists = sector
	#sector = {
	#	NOT = { has_sector_type = core_sector }
	#}
	#
	#IF = {
	#	LIMIT = {
	#		exists = owner
	#		owner = { is_gestalt = yes }
	#	}
	#	NOT = { has_available_jobs = warrior_drone }
	#	any_owned_pop = {
	#		is_unemployed = yes
	#		can_work_specific_job = warrior_drone
	#	}
	#}
	#ELSE = {
	#	NOT = { has_available_jobs = soldier }
	#	any_owned_pop = {
	#		is_unemployed = yes
	#		can_work_specific_job = soldier
	#	}
	#}
}


# This = planet
# Checked if planet is a terraforming candidate
is_terraforming_candidate = {
	OR = {
		has_modifier = terraforming_candidate
		has_modifier = frozen_terraforming_candidate
		has_modifier = toxic_terraforming_candidate
		has_modifier = pm_tec_desiccated_planet
	}
}

# Root = country
# This = planet
# Checked if the planet is special terraforming candidate and the country has the required matching ascension perk to do it
has_ascension_for_terraforming_candidate = {
	exists = root
	OR = {
		AND = {
			#No ascension perk required for terraforming_candidate modifier
			OR = {
				has_modifier = terraforming_candidate
				has_modifier = pm_tec_desiccated_planet
			}
		}
		AND = {
			root = { has_ascension_perk = ap_detox }
			has_modifier = toxic_terraforming_candidate
		}
		AND = {
			root = { has_ascension_perk = ap_hydrocentric }
			has_modifier = frozen_terraforming_candidate
		}
	}
}

#Root = country
#From = species
founder_species_uses_growth_speed = {
	OR = {
		tec_country_uses_assembly_instead_of_growth = no
		AND = {
			exists = from
			from = {
				is_robotic_species = no
				is_infertile = yes
			}
		}
	}
}

founder_species_uses_organic_assembly = {
	OR = {
		tec_country_uses_assembly_instead_of_growth = yes
		AND = {
			exists = from
			from = {
				is_robotic_species = no
				is_infertile = yes
			}
		}
	}

}

founder_species_uses_assembly = {
	exists = from
	from = {
		is_robotic_species = yes
	}
}

# Can the country have robot pop
# root: country
can_have_robot_pops = {
	exists = this
	has_authority = auth_tec_hive_biological
	NOT = { has_policy_flag = robots_outlawed }
}