#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

# This = Planet
is_new_colony = {
	colony_age < 15
	num_pops < 10
	#OR = {
	#	has_building = building_colony_shelter
	#	has_building = building_tec_hive_sapling
	#	has_building = building_tec_cyberhive_sapling
	#}
}

#Root = country
#This = pop
can_generate_leader_from_pop = {
	has_citizenship_rights = yes
	NOT = { has_trait = trait_syncretic_proles }
	can_think = yes

	OR = {
		is_robot_pop = no
		root = {
			OR = {
				has_technology = tech_synthetic_leaders
				# Evolved
				has_valid_civic = civic_tec_mecha_perfectionists
			}
		}
		root = { is_machine_empire = yes }
		root = { is_mechanical_empire = yes }
	}
	OR = {
		NOT = {
			has_trait = @trait_tec_bioservant
		}
		root = { has_technology = tech_tec_bioservant_3 }
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
	# Evolved
	NOT = { has_trait = @trait_tec_se_subspecies }
}

#Root = country
#This = species
can_generate_leader_from_species = {
	is_sapient = yes
	OR = {
		NAND = {
			NOT = {
				root = {
					OR = {
						has_technology = "tech_synthetic_leaders" 
						has_country_flag = synthetic_empire
						has_valid_civic = civic_tec_mecha_perfectionists
					}
				}
			}
			has_trait = "trait_mechanical"
		}
		NAND = {
			NOT = {
				root = {
					has_technology = tech_tec_bioservant_3
				}
			}
			has_trait = @trait_tec_bioservant
		}
		has_citizenship_type = { type = citizenship_full country = root }
		# Evolved
		NOT = { has_trait = @trait_tec_se_subspecies }
	}
}

# Root = Pop
# From = Country
# This = Pop
species_has_happiness = {
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_hive_mind
		can_think = no

		AND = {
			has_trait = trait_mechanical
			OR = {
				NOT = { exists = from }
				from = { is_machine_empire = yes }
				from = { NOT = { has_technology = tech_synthetic_workers } }
				from = { has_policy_flag = ai_outlawed }
			}
		}
		AND = {
			has_trait = @trait_tec_bioservant
			exists = from
			OR = {
				NOT = { exists = from }
				from = { is_hive_empire = yes }
				from = { has_policy_flag = intelligent_bioservants_outlawed }
				from = { NOT = { has_technology = tech_tec_bioservant_3 } }
			}
		}
		AND = {
			tec_is_cyborg_species = yes
			exists = from
			from = {
				OR = {
					AND = {
						is_machine_empire = yes
						has_civic = civic_machine_assimilator # Assimilator empire
					}
					AND = {
						is_hive_empire = yes
						tec_is_cyberhive = yes
					}
				}
			}
		}
		# Mindflayers
		AND = {
			exists = from
			NOR = {
				has_citizenship_type = {
					type = citizenship_purge
					country = from
				}
				has_slavery_type = {	# They do realise they are being eaten alive
					type = slavery_livestock
					country = from
				}
			}
			from = {
				has_valid_civic = civic_tec_hive_mindflayers
			}
		}
	}
}

#Root = species
#This = country
can_release_vassal_from_species = {
	root = {
		is_sapient = yes
		NOR = {
			# Machines can't release vassals (yet)
			has_trait = trait_machine_unit
			# Only progenitor hives can release vassals
			AND = {
				has_trait = trait_hive_mind
				NOT = { prev.this = { has_origin = origin_progenitor_hive } }
			}
			AND = {
				NOT = { has_trait = trait_hive_mind }
				prev.this = { is_hive_empire = yes }
			}
			# Only synth empires can release synth vassals
			AND = {
				has_trait = trait_mechanical
				NOT = { prev.this = { has_ascension_perk = ap_synthetic_evolution } }
			}
			# dumb pops can't be vassals
			can_think = no
		}
	}
}

# Checks if a pop can be assembled
# This = Species
# Root = Planet
# Note: Reviewed and optimized by Roadd@02/12/21
can_species_be_assembled = {
	is_sapient = yes
	tec_can_assemble_species_due_to_purity_assembly_policy = yes
	OR = {
		AND = { # Evolved - Robots/Machine units/Synths rule - can only be assembled with regular assembly
			is_robotic = yes
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_add
					value > 0
				}
				
				if = {
					limit = {
						prev = {
							tec_is_self_replicating_species = yes
						}
					}
					any_owned_species = {
						is_exact_same_species = prevprev
					}
				}
			}
		}
		AND = { # Evolved - Regular Organic rule - As closer as vanilla as possible
			is_organic_species = yes
			NOT = {
				is_archetype = BIOSERVANT
			}
			# Moved up to take priority over hive in special cases
			if = { # Clone army thing
				limit = {	# Made the triggers for a future clone army revamp
					tec_is_clone_origin_species = yes
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					tec_has_clone_origin_buildings = yes
					# Trigger with the clone origin buildings, actually only including the vanilla one
					OR = {
						NOT = {
							check_variable = {
								which = clone_pops_missing
								value = 0
							}
						}
						# Unused flag, for now
						owner = {
							tec_waives_clone_origin_assembly_restrictions = yes
						}
					}
				}
			}
			# PD
				else_if = {
					limit = {
						has_global_flag = planetarydiversity
						OR = {
							has_trait = @trait_organic_fourschildren
							has_trait = @trait_organic_fourschildren_2
						}
					}
					root = {
						# Event 'clones.3' should cover this, but extra safety check.
						has_building = @building_techno_04_clone_vat
						NOT = {
							check_variable = {
								which = techno_pops_missing
								value = 0
							}
						}
					}
				} 
			# /
			else_if = {	# Self-replicating pop - only assembles itself
				limit = {
					tec_is_self_replicating_species = yes	# This includes budding/tiyanki
				}
				root = {
					any_owned_species = {
						is_exact_same_species = prevprev
					}
					tec_blocks_organic_assembly = no
				}
				# Note: this must be placed above hive rule
			}
			else_if = {	# Hives can only assemble drones with spawning pools/queens only breed their own types
				limit = {
					root.owner = { is_hive_empire = yes }
				}
				AND = {
					has_trait = trait_hive_mind
				}
				# Stellaris Evolved
				root = {
					tec_can_assemble_organic_hive_species = yes
				}
			}
			else_if = {	# Cyborgs - this will not be present in evolved
				limit = {
					root.owner = {
						tec_allows_machine_assembly_for_cyborg = yes
					}
				}
				tec_is_cyborg_species = yes
			}
			else_if = {	# Zombies
				limit = {
					root.owner = { has_civic = civic_permanent_employment }
				}
				root = {
					has_building = building_posthumous_employment_center
				}
			}
			#else_if = {
			#	limit = {
			#		root = { has_modifier = tiyanki_trophy }
			#	}
			#}
			else = {	# Regular assembly
				root = {
					OR = {
						tec_has_cloning_buildings = yes
						tec_has_genetic_buildings = yes
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						has_planet_flag = can_organic_assemble_flag #for mod compatibility
					}
					tec_blocks_organic_assembly = no
				}
			}
		}
		AND = {	# Evolved - Bioservants rule - Can be assembled with bioservant facilities present
			has_global_flag = stellarisevolved
			is_archetype = BIOSERVANT
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
				tec_has_bioservant_buildings = yes
			}
		}
		AND = {	# Evolved - Replicants rule - Just made if assembly is present, op nanocomposition
			has_global_flag = stellarisevolved
			is_archetype = REPLICANT
			root = {
				OR = {
					check_modifier_value = {
						modifier = planet_pop_assembly_organic_add
						value > 0
					}
					check_modifier_value = {
						modifier = planet_pop_assembly_add
						value > 0
					}
				}
			}
		}
	}
	has_population_control = {
		type = no
		country = root.owner
	}
}


# Checks if a pop can procreate
# This = Species
# Root = Planet
can_species_procreate = {
	is_sapient = yes
	NOR = {
		has_trait = trait_machine_unit
		has_trait = trait_mechanical
		has_trait = trait_tec_sterile
	#	has_trait = trait_tec_enigmatic_elder
	}
	NAND = {
		root = { has_modifier = slave_colony }
		NOT = { has_citizenship_type = { type = citizenship_slavery country = root.owner } }
	}
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		NOT = {
			root = {
				any_owned_species = {
					has_population_control = { country = root.owner type = no }
					species_can_be_necrophaged = yes
				}
			}
		}
	}
	NOT = { has_species_flag = nivlac_no_procreation }
	# Evolved
	if = { # Apathic servitors control the population of non trophies pretty well
		limit = {
			root.owner = {
				tec_is_servitor_gestalt = yes
				has_ethic = ethic_gestalt_apathy
			}
			NOT = {
				has_species_flag = tec_original_biotrophy_@root.owner 
			}
		}
		NOT = {
			root = {
				any_owned_species = {
					has_species_flag = tec_original_biotrophy_@root.owner 
				}
			}
		}
	}
}

# ------------------------- Unedited - for review
#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		OR = {
			is_enslaved = no
			AND = { # Evolved - Hives can use (enslaved) robots
				owner = {
					has_technology = tech_droid_workers
				}
				has_trait = trait_mechanical
			}
			AND = {
				is_enslaved = yes
				has_slavery_type = {
					type = slavery_domestic
				}
				owner = {
					has_valid_civic = civic_tec_hive_mindflayers
				}
			}
		}
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
	}
}

#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	can_fill_worker_job = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_specialist_job
can_fill_specialist_job = {
	can_fill_specialist_job = yes
}

#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	can_fill_ruler_job = yes
}
# -------------------------- Megacorp rules
# This = country
can_build_branch_offices = {
	OR = {
		if = {
			limit = {
				is_regular_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_NOT_MEGACORP
				has_corporate_government = yes
			}
		}
		else_if = {
			limit = {
				is_hive_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_TEC_NOT_SYMBIOTIC
				tec_is_symbiotic_hivemind = yes
			}

		}
		else_if = {
			limit = {
				is_machine_empire = yes
			}
			custom_tooltip = {
				fail_text = BRANCH_OFFICE_TEC_NOT_SYMBIOTIC_MACHINE
				tec_is_symbiotic_machine = yes
			}
		}
	}
}

# This = country
can_support_branch_offices = {
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_FALLEN_EMPIRES
		NOR = {
			is_country_type = fallen_empire
			is_country_type = awakened_fallen_empire
		}
	}

	# Gestalts empathic empires can host branch offices
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_ONLY_EMPATHIC_GESTALTS
		OR = {
			is_regular_empire = yes
			AND = {
				is_gestalt = yes
				has_ethic = ethic_gestalt_empathy
			}
		}
	}
}

# This = planet
# Root = country
can_build_branch_office_on_planet = {
	custom_tooltip = {
		fail_text = requires_recipient_not_fanatic_purifiers
		exists = owner
		owner = {
			OR = {
				is_same_species = root
				NOT = { has_civic = civic_fanatic_purifiers }
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_COOPERACORP
		exists = owner
		OR = {
			owner = {
				is_megacorp = no
			}

			AND = {
				owner = {
					is_megacorp = yes
				}
				root = {
					has_valid_civic = civic_tec_corporate_cooperacorp
				}
			}
			
			AND = {
				owner = {
					is_megacorp = yes
					has_valid_civic = civic_tec_corporate_cooperacorp
				}
				root = {
					NOT = {
						has_valid_civic = civic_tec_corporate_cooperacorp
					}
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_NOT_COMMERCIAL_PACT
		exists = owner
		OR = {
			root = { is_criminal_syndicate = yes }
			root = { tec_is_symbiotic_hivemind = yes }
			root = {
				NOT = {
					has_valid_civic = civic_tec_machine_traders
				}
				tec_is_symbiotic_machine = yes
			}
			root = { tec_is_parasite_hivemind = yes }
			owner = { has_commercial_pact = root }
			owner = { is_in_federation_with = root }

			# allow branch offices in subsidiaries and vice versa (and fellow subjects)
			root = {	# Roadd @02/12/21
				is_subject = yes
				OR = {
					has_corporate_government = yes
					# Stellaris Evolved
					tec_is_symbiotic_gestalt = yes
				}
				overlord = {
					OR = {
						is_same_value = prevprev.owner
						is_same_value = prevprev.owner.overlord
					}
				}
			}
			owner = {	# Roadd @02/12/21
				is_subject = yes
				overlord = {
					OR = {
						is_same_value = root
						is_same_value = root.overlord
					}
					OR = {
						has_corporate_government = yes
						# Stellaris Evolved
						tec_is_symbiotic_gestalt = yes
					}
				}
			}
			AND = {
				root = { has_civic = civic_galactic_sovereign_megacorp }
				owner = { is_galactic_community_member = yes }
			}
			AND = {
				root = { has_modifier = imperial_charter }
				owner = { is_galactic_community_member = yes }
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_MEGACORP_OVERLORD
		exists = owner
		# failure message for having a corporate overlord

		if = {
			limit = {
				OR = {
					# Not valid if you aren't a subject.
					root = {
						is_subject = no
					}
					# Or if your overlord isn't a megacorp.
					root = {
						is_subject = yes
						overlord = {
							NOR = {
								has_corporate_government = yes
								# Stellaris Evolved
								tec_is_symbiotic_gestalt = yes
							}
						}
					}
				}
			}
			always = yes
		}
		else = {
			AND = {
				root = {
					is_subject = yes
					overlord = {
						OR = {
							has_corporate_government = yes
							# Stellaris Evolved
							tec_is_symbiotic_gestalt = yes
						}
					}
				}
				owner = {
					OR = {
						is_subject = no
						AND = {
							is_subject = yes
							overlord = { NOT = { is_same_value = root.overlord } }
						}
					}
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_RELATION
		exists = owner
		OR = {
			root = { 
				has_corporate_government = yes
			}
			root = {
				has_valid_civic = civic_tec_machine_traders
				tec_is_symbiotic_machine = yes
			}
			root = { is_criminal_syndicate = yes }
			root = { tec_is_parasite_hivemind = yes }
			root = { tec_is_parasite_machine = yes }
			this.owner = {
				opinion_level = { who = root level >= good }
			}
			owner = { is_in_federation_with = root }
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_HERITAGE_HAS_TRUCE
		exists = owner
		OR = {
			root = {
				is_criminal_syndicate = no 
			}
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_CRIMINAL_COOLDOWN
		exists = owner
		OR = {
			root = { is_criminal_syndicate = no }
			AND = {
				root = { is_criminal_syndicate = yes }
				NOT = { has_planet_flag = criminal_branch_closed_cooldown_planet@root }
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_PARASITE_HAS_TRUCE
		exists = owner
		OR = {
			root = {
				tec_is_parasite_hivemind = no
			}
			owner = {
				NOR = {
					has_truce = root
					is_at_war_with = root
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_PARASITE_COOLDOWN
		exists = owner
		OR = {
			root = {
				tec_is_parasite_hivemind = no
			}
			AND = {
				root = { tec_is_parasite_hivemind = yes }
				NOT = {
					has_planet_flag = parasite_branch_closed_cooldown_planet@root 
				}
			}
		}
	}

	custom_tooltip = {
		fail_text = BRANCH_OFFICE_TEC_NOT_OWN
		exists = owner
		owner = {
			NOT = {
				is_same_value = root
			}
		}
	}
}

# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	OR = {
		AND = {
			has_corporate_government = yes
			has_valid_civic = civic_criminal_heritage
		}
		tec_is_parasite_hivemind = yes
	}
}

# This = leader, leader we'd like to trade
# Root = country, country that owns the leader currently
# From = country, country that would receive the leader
can_trade_leader = {
	# The leader must have a trait from a specialist subject type.
	this = { has_specialist_subject_leader_trait = yes }
	# The subject and overlord must both be regular empires, machine intelligences or hive-minds.
	OR = {
		AND = {
			ROOT = {
				is_regular_empire = yes
			}
			FROM = {
				is_regular_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_machine_empire = yes
			}
			FROM = {
				is_machine_empire = yes
			}
		}
		AND = {
			ROOT = {
				is_hive_empire = yes
			}
			FROM = {
				is_hive_empire = yes
			}
		}
	}
	# The overlord can't be a fallen or awakened empire.
	ROOT = {
		NAND = {
			is_overlord = yes
			OR = {
				is_country_type = fallen_empire
				is_country_type = awakened_fallen_empire
			}
		}
	}
}

# -------- added with toxoids
#This, root = country
can_gene_mod_habitability = {
	OR = {
		has_technology = tech_glandular_acclimation
		has_country_flag = can_gene_mod_habitability
		has_country_flag = can_resequence
	}
}

#This, root = country
can_add_advanced_traits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_creation
		has_country_flag = can_add_advanced_traits
		has_country_flag = can_resequence
	}
}

#This, root = country
can_add_negative_traits_organic = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_resequencing
		has_tradition = tr_cybernetics_integrated_anatomy
		has_tradition = tr_cybernetics_assimilator_integrated_anatomy
		has_country_flag = can_add_negative_traits_organic
		has_country_flag = can_resequence
	}
}

#This, root = country
can_remove_positive_traits_organic = {
	OR = {
		AND = {
			has_utopia = yes
			OR = {
				has_tradition = tr_genetics_resequencing
				has_tradition = tr_cybernetics_integrated_anatomy
				has_tradition = tr_cybernetics_assimilator_integrated_anatomy
				has_country_flag = can_remove_positive_traits_organic
				has_country_flag = can_resequence

				# PD
				has_tradition = @pd_tr_biosynth_perk_2a 
			}
		}
		AND = {
			has_toxoids = yes
			has_origin = origin_overtuned
		}
		has_technology = tech_epigenetic_triggers
	}
}

#This, root = country
can_modify_organic_portraits = {
	has_utopia = yes
	OR = {
		has_tradition = tr_genetics_enhanced_expression
		has_country_flag = can_modify_organic_portraits
		has_country_flag = can_resequence
	}
}