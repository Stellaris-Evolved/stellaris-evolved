
#To use one of them, refer to them elsewhere in script via "value:<value>" e.g. value:example_value
#IMPORTANT NOTE: Be mindful of performance when using these in triggers that are checked often!

# example_value = {
# 	base = 10 #default: 0

# 	# List of valid mathematical operations:
# 	# 	Numerical (modifying by a number):
# 	# 	- set/weight (both do the same, replaces the current result with this value)
# 	# 	- add
# 	# 	- subtract
# 	# 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
# 	# 	- divide
# 	# 	- modulo
# 	# 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
# 	# 	- max (sets to specified value if currently above it)
# 	# 	- min (sets to specified value if currently below it)
# 	# 	Simple (do not need a number, but just "yes", e.g. "round = yes")
# 	# 	- round (sets to nearest full number)
# 	# 	- ceiling (rounds up)
# 	# 	- floor (rounds down)
# 	# 	- abs (multiply by -1 if negative)

# 	#All mathematical operations except weight and factor can be used inline e.g.
# 	add = 100
# 	multiply = value:some_other_script_value
# 	round = yes
# 	#(Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)

# 	#They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
# 	modifier = {
# 		max = owner.max_example_variable 					#Variable set by set_variable
# 		owner = { is_variable_set = max_example_variable }	#Only applied if this trigger is true
# 	}
# 	# What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.

# 	complex_trigger_modifier = { 	#This lets you get the value of a trigger that you can't use in one-liners because it uses {}
# 		trigger = count_owned_planet
# 		trigger_scope = owner 		#Lets you get the result of the trigger on a different scope. Default is "this"
# 		parameters = { 				#Stick any further information necessary in here, like you'd do within the {} of the trigger normally
# 			limit = { num_pops > 10 }
# 		}
# 		mode = add 					#Allows all numerical operations
# 		mult = 5 					#Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
# 	}
# }

# Final note: script_values use the same metascript system as scripted_triggers and scripted_effects
# This means that you can input parameters into them, in a similar fashion as described in scripted_effects/99_advanced_documentation.txt
# For format for doing so is value:my_value|PARAM1|value1|PARAM2|value2|.
# Then you can use $PARAM1$ in the script value and it will replace it with value1


tech_weight_likelihood = {
	base = 1.25
	#modifier = {
	#	add = 1.25
	#	OR = {
	#		has_valid_civic = civic_tec_regular_science_directorate
	#		has_valid_civic = civic_tec_corporate_innovative
	#		has_valid_civic = civic_tec_hive_anaxiomatic
	#	}
	#}
}

tec_conclave_election_priest_percentage_value = {
	add = value:tec_priest_jobs_value
	divide = trigger:num_pops
	mult = 200
}

conclave_election_value = {
	add = value:tec_conclave_election_priest_percentage_value

	mult = value:conclave_election_robots_value
	mult = value:conclave_election_ascension_value

	modifier = {
		factor = 1.1
		has_ethic = ethic_spiritualist
	}
	modifier = {
		factor = 1.25
		has_ethic = ethic_fanatic_spiritualist
	}
	modifier = {
		factor = 1.25
		has_tradition = tr_psionics_finish
	}
	modifier = {
		factor = 5
		exists = ruler
		ruler = { has_trait = leader_trait_chosen }
	}
	modifier = {
		factor = 1.25
		has_relic = r_severed_head
	}
	modifier = {
		factor = 1.25
		any_owned_planet = { has_modifier = holy_planet }
	}
	modifier = {
		factor = 1.25
		check_variable = {
			which = num_consecrated_worlds
			value > 2
		}
	}
	modifier = {
		factor = conclave_election_random_factor
		is_variable_set = conclave_election_random_factor
	}
	modifier = {
		factor = value:conclave_election_bribes_value
		is_variable_set = conclave_election_bribes
	}
	modifier = {
		subtract = 100
		is_gestalt = yes
	}
	modifier = {
		subtract = 1000
		is_subject = yes
	}
}

toxic_attendant_growth = {
	base = 1
	add = value:industrial_districts_value
}

species_job_modifiers_worker = {
	add = species.modifier:planet_jobs_simple_drone_produces_mult
	add = species.modifier:planet_jobs_worker_produces_mult
	add = species.modifier:planet_jobs_worker_only_produces_mult
	modifier = {
		species = {
			tec_is_psionic_species = yes
		}
		add = species.modifier:planet_jobs_psionic_worker_produces_mult
	}
	modifier = {
		species = {
			tec_is_cyborg_species = yes
		}
		add = species.modifier:planet_jobs_cyborg_worker_produces_mult
	}
}

species_job_modifiers_specialist = {
	add = species.modifier:planet_jobs_complex_drone_produces_mult
	add = species.modifier:planet_jobs_specialist_produces_mult
	add = species.modifier:planet_jobs_specialist_only_produces_mult
}

job_weights_manual_corrections = {
	inline_script = {
		script = tec_type_hint
		job = $JOB$
	}

	#What comes below fixes an annoying logical problem in the system:
	#check_economic_production_modifier_for_job checks the economic modifiers the current pop would get if it worked that job
	#But it checks based on the pop's current characteristics. Which means it evaluates triggered job output modifiers such as
	#planet_jobs_worker_produces_mult as if it were in its current pop category, which means "strong" pops would register as being
	#good at research so long as they are currently workers.

	modifier = {
		subtract = value:species_job_modifiers_worker
		NOR = {
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_worker
				job = $JOB$
			}
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_simple_drone
				job = $JOB$
			}
		}
		tec_ecocat_planet_jobs_worker = { CACHED = yes }
	}
	modifier = {
		subtract = species.modifier:planet_jobs_slave_produces_mult
		NOT = {
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_worker
				job = $JOB$
			}
		}
		tec_ecocat_planet_jobs_slave = { CACHED = yes }
	}
	modifier = {
		subtract = value:species_job_modifiers_specialist
		NOR = {
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_specialist
				job = $JOB$
			}
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_complex_drone
				job = $JOB$
			}
		}
		tec_ecocat_planet_jobs_specialist = { CACHED = yes }
	}
	modifier = {
		add = value:species_job_modifiers_specialist
		OR = {
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_specialist
				job = $JOB$
			}
			inline_script = {
				script = scripted_triggers/weight_corrections/tec_job_category_complex_drone
				job = $JOB$
			}
		}
		NOT = { tec_ecocat_planet_jobs_specialist = { CACHED = yes } }
	}
}

# Gaiaseeders
gaiaseeder_upkeep = {
	base = 1 # heck to show in database concept
	modifier = {
		set = 0
		is_scope_valid = yes
	}

	modifier = {
		add = 1
		OR = {
			is_ideal_planet_class = {
				who = owner
				status = yes
			}
			owner_main_species = {
				has_trait = trait_tec_replicant_main
			}
			owner_main_species = {
				OR = {
					has_trait = trait_tec_gene_main_t1
					has_trait = trait_tec_gene_main_t2
					has_trait = trait_tec_gene_main_t3
				}
			}
			owner = {
				is_machine_empire = yes
			}
		}
	}

	# Evolved - Machine empires pay more without techs
		modifier = {
			add = 0.5
			owner = {
				is_machine_empire = yes
				NOT = {
					has_technology = tech_terrestrial_sculpting
				}
			}
		}
		modifier = {
			add = 1
			planet = { tec_is_nuked_world = yes }
			owner = {
				is_machine_empire = yes
				NOT = {
					has_technology = tech_climate_restoration
				}
			}
		}
	# /

	modifier = {
		add = 1.25
		owner = {
			is_machine_empire = no
		}
		OR = {
			AND = {
				owner_species = {
					ideal_planet_is_wet = yes
				}
				planet = {
					is_wet = yes
					is_ideal_planet_class = {
						who = owner
						status = no
					}
				}
			}
			AND = {
				owner_species = {
					ideal_planet_is_dry = yes
				}
				planet = {
					is_dry = yes
					is_ideal_planet_class = {
						who = owner
						status = no
					}
				}
			}
			AND = {
				owner_species = {
					ideal_planet_is_cold = yes
				}
				planet = {
					is_cold = yes
					is_ideal_planet_class = {
						who = owner
						status = no
					}
				}
			}
		}
	}

	modifier = {
		add = 1.50
		owner = {
			is_machine_empire = no
		}
		OR = {
			AND = {
				owner_species = {
					ideal_planet_is_wet = yes
				}
				planet = {
					OR = {
						is_dry = yes
						is_cold = yes
					}
				}
			}
			AND = {
				owner_species = {
					ideal_planet_is_dry = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_cold = yes
					}
				}
			}
			AND = {
				owner_species = {
					ideal_planet_is_cold = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_dry = yes
					}
				}
			}
			AND = {
				owner_species = {
					ideal_planet_is_special = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_dry = yes
						is_cold = yes
					}
				}
			}
		}
	}

	modifier = {
		add = 1.75
		planet = {
			is_planet_class = pc_nuked
		}
	}

	modifier = {
		mult = 0.25
		planet = {
			is_capital = yes
		}
	}

	modifier = {
		mult = value:gaiaseeder_cost_mult
		owner = {
			tec_has_councilor = { COUNCILOR = "councilor_idyllic_bloom" }
		}
	}
}

overlord_gaiaseeder_upkeep = {
	base = 1 # heck to show in database concept
	modifier = {
		set = 0
		is_scope_valid = no
	}

	modifier = {
		add = 1
		is_ideal_planet_class = {
			who = owner.overlord
			status = yes
		}
		OR = {
			is_ideal_planet_class = {
				who = owner.overlord
				status = yes
			}
			owner.overlord.owner_main_species = {
				has_trait = trait_tec_replicant_main
			}
			owner.overlord.owner_main_species = {
				tec_has_genetic_main_traits = yes
			}
			owner.overlord = {
				is_machine_empire = yes
			}
		}
	}

	# Evolved - Machine empires pay more without techs
		modifier = {
			add = 0.5
			owner.overlord = {
				is_machine_empire = yes
				NOT = {
					has_technology = tech_terrestrial_sculpting
				}
			}
		}
		modifier = {
			add = 1
			planet = { tec_is_nuked_world = yes }
			owner.overlord = {
				is_machine_empire = yes
				NOT = {
					has_technology = tech_climate_restoration
				}
			}
		}
	# /

	modifier = {
		add = 1.25
		owner.overlord = {
			is_machine_empire = no
		}
		OR = {
			AND = {
				owner.overlord.species = {
					ideal_planet_is_wet = yes
				}
				planet = {
					is_wet = yes
					is_ideal_planet_class = {
						who = owner.overlord
						status = no
					}
				}
			}
			AND = {
				owner.overlord.species = {
					ideal_planet_is_dry = yes
				}
				planet = {
					is_dry = yes
					is_ideal_planet_class = {
						who = owner.overlord
						status = no
					}
				}
			}
			AND = {
				owner.overlord.species = {
					ideal_planet_is_cold = yes
				}
				planet = {
					is_cold = yes
					is_ideal_planet_class = {
						who = owner.overlord
						status = no
					}
				}
			}
		}
	}

	modifier = {
		add = 1.50
		owner.overlord = {
			is_machine_empire = no
		}
		OR = {
			AND = {
				owner.overlord.species = {
					ideal_planet_is_wet = yes
				}
				planet = {
					OR = {
						is_dry = yes
						is_cold = yes
					}
				}
			}
			AND = {
				owner.overlord.species = {
					ideal_planet_is_dry = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_cold = yes
					}
				}
			}
			AND = {
				owner.overlord.species = {
					ideal_planet_is_cold = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_dry = yes
					}
				}
			}
			AND = {
				owner.overlord.species = {
					ideal_planet_is_special = yes
				}
				planet = {
					OR = {
						is_wet = yes
						is_dry = yes
						is_cold = yes
					}
				}
			}
		}
	}

	modifier = {
		add = 1.75
		planet = { is_planet_class = pc_nuked }
	}
}

budding_multiplier = {
	base = 1
}

max_major_orbitals = {
	base = 0
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_artificial = no
				# Evolved
				#is_star = no
				is_astral_scar = no
				is_asteroid = no
				is_moon = no
			}
		}
		mode = add
	}
}

# Added this here as its not done in vanilla and its useful for multi-councilors
scripted_modifier_councilor_level_mult_combo = {
	base = 1
	mult = value:councilor_level_combo|COUNCILOR_1|$TYPE_1$|COUNCILOR_2|$TYPE_2$|
	mult = value:scripted_modifier_mult|MODIFIER|$MODIFIER$|
}
# mult = value:scripted_modifier_councilor_level_mult_combo|MODIFIER|modifier|TYPE_1|value|TYPE_2|value2|


living_standard_trade_value = {
	base = 0
	modifier = {
		tec_is_ruler_pop_category = yes
		add = modifier:living_standard_trade_value_rulers_add
	}
	modifier = {
		tec_is_ruler_pop_category = yes
		add = modifier:tec_ruler_lifestyle_trade_value_add
	}
	modifier = {
		tec_is_specialist_pop_category = yes
		add = modifier:living_standard_trade_value_specialists_add
	}
	modifier = {
		tec_is_specialist_pop_category = yes
		add = modifier:tec_specialist_lifestyle_trade_value_add
	}
	modifier = {
		tec_is_worker_pop_category = yes
		add = modifier:living_standard_trade_value_workers_add
	}
	modifier = {
		tec_is_worker_pop_category = yes
		add = modifier:tec_worker_lifestyle_trade_value_add
	}
	modifier = {
		is_pop_category = slave
		add = modifier:living_standard_trade_value_slaves_add
	}
	modifier = {
		is_pop_category = slave
		add = modifier:tec_slave_lifestyle_trade_value_add
	}
	modifier = {
		is_pop_category = criminal
		add = modifier:living_standard_trade_value_criminals_add
	}
	modifier = {
		is_pop_category = criminal
		add = modifier:tec_criminal_lifestyle_trade_value_add
	}
	add = modifier:tec_pop_lifestyle_trade_value_add
	add = modifier:pop_lifestyle_trade_value_add
	mult = value:scripted_modifier_mult|MODIFIER|pop_lifestyle_trade_value_mult|
}
