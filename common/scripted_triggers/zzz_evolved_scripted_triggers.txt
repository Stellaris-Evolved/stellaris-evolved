
# ETHIC TRIGGERS
	is_cooperative = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_cooperative
			has_ethic = ethic_cooperative
			
			# has_ethic = @ethic_cooperative
			# has_ethic = @ethic_fanatic_cooperative
		}
	}

	is_competitive = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_competitive
			has_ethic = ethic_competitive
			
			# has_ethic = @ethic_competitive
			# has_ethic = @ethic_fanatic_competitive
		}
	}

	is_ecologist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_ecologist
			has_ethic = ethic_ecologist

			# has_ethic = @ethic_ecocentric
			# has_ethic = @ethic_fanatic_ecocentric
		}
	}

	is_industrialist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_industrialist
			has_ethic = ethic_industrialist
			
			# has_ethic = @ethic_anthropocentric
			# has_ethic = @ethic_fanatic_anthropocentric
		}
	}

	is_elitist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_elitist 
			has_ethic = ethic_elitist 
		}
	}

	is_pluralist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_pluralist 
			has_ethic = ethic_pluralist 
		}
	}

	# Compat/Rename
	is_anthropocentric = {
		optimize_memory
		is_industrialist = yes
	}
	
	is_ecocentric = {
		optimize_memory
		is_ecologist = yes
	}

	is_industrial = {
		optimize_memory
		is_industrialist = yes
	}
# /

tec_has_enough_ethic_points = {
	calc_true_if = {
		has_ethic = ethic_authoritarian
		has_ethic = ethic_fanatic_authoritarian
		has_ethic = ethic_fanatic_authoritarian
		
		has_ethic = ethic_egalitarian
		has_ethic = ethic_fanatic_egalitarian
		has_ethic = ethic_fanatic_egalitarian
		
		has_ethic = ethic_pacifist
		has_ethic = ethic_fanatic_pacifist
		has_ethic = ethic_fanatic_pacifist
		
		has_ethic = ethic_militarist
		has_ethic = ethic_fanatic_militarist
		has_ethic = ethic_fanatic_militarist
		
		has_ethic = ethic_xenophobe
		has_ethic = ethic_fanatic_xenophobe
		has_ethic = ethic_fanatic_xenophobe
		
		has_ethic = ethic_xenophile
		has_ethic = ethic_fanatic_xenophile
		has_ethic = ethic_fanatic_xenophile
		
		has_ethic = ethic_spiritualist
		has_ethic = ethic_fanatic_spiritualist
		has_ethic = ethic_fanatic_spiritualist
		
		has_ethic = ethic_materialist
		has_ethic = ethic_fanatic_materialist
		has_ethic = ethic_fanatic_materialist
		
		has_ethic = ethic_ecologist
		has_ethic = ethic_fanatic_ecologist
		has_ethic = ethic_fanatic_ecologist
		
		has_ethic = ethic_industrialist
		has_ethic = ethic_fanatic_industrialist
		has_ethic = ethic_fanatic_industrialist
		
		has_ethic = ethic_elitist
		has_ethic = ethic_fanatic_elitist
		has_ethic = ethic_fanatic_elitist
		
		has_ethic = ethic_pluralist
		has_ethic = ethic_fanatic_pluralist
		has_ethic = ethic_fanatic_pluralist

		has_ethic = ethic_cooperative
		has_ethic = ethic_fanatic_cooperative
		has_ethic = ethic_fanatic_cooperative
		
		has_ethic = ethic_competitive
		has_ethic = ethic_fanatic_competitive
		has_ethic = ethic_fanatic_competitive

		amount = @tec_ethic_points 
	}
}


# Leader Trigger
 # Categories
	tec_is_head_researcher = {
		OR = {
			is_councilor_type = councilor_research
			is_councilor_type = councilor_gestalt_cognitive
			is_councilor_type = councilor_tec_aiauth_development
		}
	}
	tec_is_minister_defense = {
		OR = {
			is_councilor_type = councilor_defense
			is_councilor_type = councilor_gestalt_legion
			is_councilor_type = councilor_tec_aiauth_firewall
		}
	}
	tec_is_minister_state = {
		OR = {
			is_councilor_type = councilor_state
			is_councilor_type = councilor_gestalt_regulatory
			is_councilor_type = councilor_tec_aiauth_manager
		}
	}
 # /
 # Generic production
	tec_produces_unity_from_leaders = {		# Unity from ALL leaders
		always = no
	}
 # /
 # Generic upkeep
	tec_removes_unity_upkeep_from_all_leaders = {		# Upkeep from ALL leaders
		OR = {
			has_valid_civic = civic_feudal_realm

			# Paragon
			has_valid_civic = civic_hive_upkeep_twister
			has_valid_civic = civic_machine_upkeep_twister
		}
	}

	tec_add_cg_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = yes
		}
		switch = {
			trigger = leader_class
			official = {
				owner = {
					OR = {
						tec_produces_unity_from_officials = yes
						tec_produces_research_from_officials = yes
					}
				}
			}
			commander = {
				owner = {
					OR = {
						tec_produces_unity_from_commanders = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			default = {
				always = no
			}
		}
	}

	tec_add_energy_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = no
			OR = {
				tec_is_cyberhive = yes
				is_machine_empire = yes
			}
		}
		switch = {
			trigger = leader_class
			official = {
				owner = {
					OR = {
						tec_produces_unity_from_officials = yes
						tec_produces_research_from_officials = yes
					}
				}
			}
			commander = {
				owner = {
					OR = {
						tec_produces_unity_from_commanders = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			default = {
				always = no
			}
		}
	}
	tec_add_minerals_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = yes
			is_machine_empire = no
			tec_is_cyberhive = no
		}
		switch = {
			trigger = leader_class
			official = {
				owner = {
					OR = {
						tec_produces_unity_from_officials = yes
						tec_produces_research_from_officials = yes
					}
				}
			}
			commander = {
				owner = {
					OR = {
						tec_produces_unity_from_commanders = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			default = {
				always = no
			}
		}
	}
	tec_add_food_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = no
			is_machine_empire = no
			tec_is_cyberhive = no
		}
		switch = {
			trigger = leader_class
			official = {
				owner = {
					OR = {
						tec_produces_unity_from_officials = yes
						tec_produces_research_from_officials = yes
					}
				}
			}
			commander = {
				owner = {
					OR = {
						tec_produces_unity_from_commanders = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			default = {
				always = no
			}
		}
	}
 # /
 # Officials
	tec_reduces_upkeep_from_officials = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_executive_committee
			has_valid_civic = civic_tec_regular_divine_circle

			has_valid_civic = civic_tec_corporate_flagshipbureau

			has_valid_civic = civic_hive_divided_attention
			has_valid_civic = civic_tec_hive_myoneural
		}
	}

	tec_produces_energy_from_officials = {
		always = no
	}
	tec_produces_unity_from_officials = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_executive_committee
			has_valid_civic = civic_tec_regular_divine_circle
			has_valid_civic = civic_tec_corporate_flagshipbureau

			has_valid_civic = civic_hive_divided_attention
		}
	}
	tec_produces_research_from_officials = {
		has_valid_civic = civic_tec_hive_myoneural
	}
 # /
 # Scientists
	tec_reduces_upkeep_from_scientists = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_research_council
			has_valid_civic = civic_tec_regular_scientific_belief

			has_valid_civic = civic_tec_corporate_researchbureau
			has_valid_civic = civic_tec_corporate_innovative

			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}

	tec_produces_energy_from_scientists = {
		always = no
	}

	tec_produces_unity_from_scientists = {
		always = no
	}
	tec_produces_scaled_unity_from_scientists = {
		OR = {
			has_valid_civic = civic_tec_regular_scientific_belief
			has_valid_civic = civic_tec_corporate_innovative	
			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}

	tec_produces_research_from_scientists = {
		always = no
	}
	tec_produces_scaled_research_from_scientists = {
		OR = {
			has_valid_civic = civic_tec_regular_research_council
			has_valid_civic = civic_tec_corporate_researchbureau	
			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}
 # /
 # Commanders
	tec_reduces_upkeep_from_commanders = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_military_council

			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_hive_percussive
		}
	}

	tec_produces_energy_from_commanders = {
		OR = {
			always = no
		}
	}

	tec_produces_unity_from_commanders = {
		always = no
	}
	tec_produces_scaled_unity_from_commanders = {
		OR = {
			has_valid_civic = civic_tec_regular_military_council
			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_hive_percussive
		}
	}

	tec_produces_research_from_commanders = {
		always = no
	}
	tec_produces_scaled_research_from_commanders = {
		always = no
	}
 # /
 # Levels
	tec_provides_1_level_leaders = {		# Leader levels
		always = no
	}
	tec_provides_2_level_leaders = {
		always = no
	}

	tec_provides_2_level_officials = {
		always = no
	}
	tec_provides_2_level_commanders = {
		always = no
	}
	tec_provides_2_level_scientists = {
		always = no
	}
 # /

 # Swaps aiauths
	tec_aiauth_swaps_all_leaders = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_all_leaders
			has_country_flag = tec_test_aiauth
		}
	}

	tec_aiauth_swaps_leader_officials = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_officials
		}
	}

	tec_aiauth_swaps_leader_researchers = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_researchers
		}
	}

	tec_aiauth_swaps_leaders_commanders = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_commanders
		}
	}
# /

# FEATURE TRIGGERS
# ---------------------------------------------------
	tec_has_improved_designations = {	# Planet ap path
		OR = {
			always = no
		}
	}

	tec_has_statecraft_planet_designations = {	# Statecraft
		OR = {
			always = no
		}
	}


	# scope = planet
	tec_branch_has_commercial_pact = {	# Mostly used for criminals
		planet = {
			exists = branch_office_owner
			branch_office_owner = {
				has_commercial_pact = prev.owner
			}
		}
	}

# /

# T R A D I T I O N S
# -------------- MERGERS ----------------
	tec_can_adopt_outreach = {
		OR = {
			has_tradition = tr_expansion_finish
		}
	}

	tec_can_adopt_control = {
		OR = {
			has_tradition = tr_domination_finish
			has_tradition = tr_subterfuge_finish
		}
	}

	tec_can_adopt_artifice = {
		OR = {
			has_tradition = tr_prosperity_finish
			has_tradition = tr_mercantile_finish
		}
	}

	tec_can_adopt_balance = {
		always = no
		OR = {
			has_tradition = tr_harmony_finish
			has_tradition = tr_synchronicity_finish
			has_tradition = tr_versatility_finish
			has_tradition = tr_adaptability_finish
			has_tradition = tr_aptitude_finish
		}
	}

	tec_can_adopt_might = {
		OR = {
			has_tradition = tr_supremacy_finish
			has_tradition = tr_unyielding_finish
			has_tradition = tr_enmity_finish
		}
	}

	tec_can_adopt_centrality = {
		OR = {
			has_tradition = tr_diplomacy_finish
			has_tradition = tr_statecraft_finish
			has_tradition = tr_politics_finish
			has_tradition = tr_subterfuge_finish
		}
	}

	tec_can_adopt_invention = {
		OR = {
			has_tradition = tr_discovery_finish
		}
	}



	tec_has_outreach_traditions = {
		has_tradition = tr_tec_outreach_adopt
	}
	tec_has_outreach_traditions_finished = {
		has_tradition = tr_tec_outreach_finish
	}

	tec_has_control_traditions = {
		has_tradition = tr_tec_control_adopt
	}
	tec_has_control_traditions_finished = {
		has_tradition = tr_tec_control_finish
	}

	tec_has_artifice_traditions = {
		has_tradition = tr_tec_artifice_adopt
	}
	tec_has_artifice_traditions_finished = {
		has_tradition = tr_tec_artifice_finish
	}

	tec_has_balance_traditions = {
		has_tradition = tr_tec_balance_adopt
	}
	tec_has_balance_traditions_finished = {
		has_tradition = tr_tec_balance_finish
	}

	tec_has_might_traditions = {
		has_tradition = tr_tec_might_adopt
	}
	tec_has_might_traditions_finished = {
		has_tradition = tr_tec_might_finish
	}

	tec_has_statecraft_traditions = {
		has_tradition = tr_tec_centrality_adopt
	}
	tec_has_statecraft_traditions_finished = {
		has_tradition = tr_tec_centrality_finish
	}

	tec_has_invention_traditions = {
		has_tradition = tr_tec_invention_adopt
	}
	tec_has_invention_traditions_finished = {
		has_tradition = tr_tec_invention_finish
	}

	tec_has_governance_traditions = {
		always = no
	}
	tec_has_governance_traditions_finished = {
		always = no
	}

	tec_has_megalomania_traditions = {
		always = no
	}
	tec_has_megalomania_traditions_finished = {
		always = no
	}

		# and these for vanilla
	tec_has_expansion_traditions = {
		has_tradition = tr_expansion_adopt
	}
	tec_has_expansion_traditions_finished = {
		has_tradition = tr_expansion_finish
	}

	tec_has_domination_traditions = {
		has_tradition = tr_domination_adopt
	}
	tec_has_domination_traditions_finished = {
		has_tradition = tr_domination_finish
	}

	tec_has_subterfuge_traditions = {
		has_tradition = tr_subterfuge_adopt
	}
	tec_has_subterfuge_traditions_finished = {
		has_tradition = tr_subterfuge_finish
	}

	tec_has_prosperity_traditions = {
		has_tradition = tr_prosperity_adopt
	}
	tec_has_prosperity_traditions_finished = {
		has_tradition = tr_prosperity_finish
	}

	tec_has_mercantile_traditions = {
		has_tradition = tr_mercantile_adopt
	}
	tec_has_mercantile_traditions_finished = {
		has_tradition = tr_mercantile_finish
	}

	tec_has_harmony_traditions = {
		OR = {
			has_tradition = tr_harmony_adopt
			has_tradition = tr_synchronicity_adopt
		}
	}
	tec_has_harmony_traditions_finished = {
		OR = {
			has_tradition = tr_harmony_finish
			has_tradition = tr_synchronicity_finish
		}
	}

	tec_has_supremacy_traditions = {
		has_tradition = tr_supremacy_adopt
	}
	tec_has_supremacy_traditions_finished = {
		has_tradition = tr_supremacy_finish
	}

	tec_has_unyielding_traditions = {
		has_tradition = tr_unyielding_adopt
	}
	tec_has_unyielding_traditions_finished = {
		has_tradition = tr_unyielding_finish
	}

	tec_has_diplomacy_traditions = {
		OR = {
			has_tradition = tr_diplomacy_adopt
			has_tradition = tr_adaptability_adopt
		}
	}
	tec_has_diplomacy_traditions_finished = {
		OR = {
			has_tradition = tr_diplomacy_finish
			has_tradition = tr_adaptability_finish
		}
	}

	tec_has_discovery_traditions = {
		has_tradition = tr_discovery_adopt
	}
	tec_has_discovery_traditions_finished = {
		has_tradition = tr_discovery_finish
	}
# /

# ASCENSION PATHS
# -------------- MAIN PATHS ----------------
 # Common
	tec_is_ascension_hater = {	# TODO MACHINE AGE
		always = no
	}
 # /
 # Groups
 	tec_has_mystical_ascension_path = {
		OR = {
			tec_has_psionic_ascension_path = yes
			tec_has_psychic_ascension_path = yes
			tec_has_ethereal_ascension_path = yes
		}
	}
	tec_is_mystical_ascension_beeliner = {
		OR = {
			tec_is_psionic_ascension_beeliner = yes
			tec_is_psychic_ascension_beeliner = yes
			tec_is_ethereal_ascension_beeliner = yes
		}
	}

	tec_has_biological_ascension_path = {
		OR = {
			tec_has_genetic_ascension_path = yes
			tec_has_biogenic_ascension_path = yes
			#tec_has_biocreation_ascension_path = yes
		}
	}
	tec_is_biological_ascension_beeliner = {
		OR = {
			tec_is_genetic_ascension_beeliner = yes
			tec_is_biogenic_ascension_beeliner = yes
			#tec_is_biocreation_ascension_beeliner
		}
	}

	tec_has_technological_ascension_path = {
		OR = {
			# cyb
			tec_has_cybernetic_ascension_path = yes
			tec_has_bioware_ascension_path = yes
			# synth
			tec_has_synthetic_ascension_path = yes
			tec_has_digital_ascension_path = yes
		}
	}
	tec_is_technological_ascension_beeliner = {
		OR = {
			# cyb
			tec_is_cybernetic_ascension_beeliner = yes
			tec_is_bioware_ascension_beeliner = yes
			# synth
			tec_is_synthetic_ascension_beeliner = yes
			tec_is_digital_ascension_beeliner = yes
		}
	}

	tec_has_technological_cybernetic_ascension_path = {
		OR = {
			tec_has_cybernetic_ascension_path = yes
			tec_has_bioware_ascension_path = yes
		}
	}
	tec_is_technological_cybernetic_ascension_beeliner = {
		OR = {
			tec_is_cybernetic_ascension_beeliner = yes
			tec_is_bioware_ascension_beeliner = yes
		}
	}
	
	tec_has_technological_synthetic_ascension_path = {
		OR = {
			tec_has_synthetic_ascension_path = yes
			tec_has_digital_ascension_path = yes
		}
	}
	tec_is_technological_synthetic_ascension_beeliner = {
		OR = {
			tec_is_synthetic_ascension_beeliner = yes
			tec_is_digital_ascension_beeliner = yes
		}
	}
 # /
 # Psionic
	tec_has_psionic_ascension_path = {
		OR = {
			has_ascension_perk = ap_mind_over_matter		# Psi AP
			tec_has_psionic_ascension_origin = yes
		}
	}
	tec_has_psionic_ascension_origin = {
		OR = {
			has_country_flag = ratling_country
			has_origin = origin_shroudwalker_apprentice
			# Evolved
			has_origin = origin_tec_psionicspecies			# Origin
			# PD
			has_origin = @origin_pd_shroud
			# Origins Expanded
			has_origin = @origin_psionic_abilities
			# Origins Extended
			has_origin = @originsextended_psi
		}
	}

	tec_has_psionic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_psionics_finish 
		}
	}

	tec_has_any_psionic_ascension_path = {
		OR = {
			tec_has_psionic_ascension_path = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_cyberpsionic
		}
	}

	tec_has_any_psionic_ascension_finished = {
		OR = {
			tec_has_psionic_ascension_finished = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_cyberpsionic
		}
	}

	tec_is_psionic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_psionic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_psionic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /
 # Psychic
	tec_has_psychic_ascension_path = {
		always = no
		# TODO ASCENSION
	}
	tec_has_psychic_ascension_origin = {
		always = no
		# TODO ASCENSION
	}

	tec_has_psychic_ascension_finished = {
		always = no
		# TODO ASCENSION
	}

	tec_has_any_psychic_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_is_psychic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_psychic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_psychic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /

 # Ethereal
	tec_has_ethereal_ascension_path = {
		always = no
		# TODO ASCENSION
	}
	tec_has_ethereal_ascension_origin = {
		always = no
		# TODO ASCENSION
	}

	tec_has_ethereal_ascension_finished = {
		always = no
		# TODO ASCENSION
	}

	tec_has_any_ethereal_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_is_ethereal_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_ethereal_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_ethereal_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /

 # Genetic
	tec_is_genetic_ascension_empire = {
		OR = {
			# Has genetic origin
			tec_has_genetic_ascension_origin = yes
			# Has gene t1
			has_country_flag = ap_engineered_evolution_genetics
			# Unlocked the T2
			has_ascension_perk = ap_tec_genetic_perfection
		}
	}
	tec_has_genetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_engineered_evolution
			tec_has_genetic_ascension_origin = yes
		}
	}
	tec_has_genetic_ascension_origin = {
		OR = {
			has_origin = origin_tec_genetics
		}
	}

	tec_has_genetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_genetics_finish 
		}
	}

	tec_has_any_genetic_ascension_path = {
		OR = {
			tec_has_genetic_ascension_path = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_has_any_genetic_ascension_finished = {
		OR = {
			tec_has_genetic_ascension_finished = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_is_genetic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_genetic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_genetic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /
 # Biogenic
	tec_is_biogenic_ascension_empire = {
		OR = {
			# Has origin
			tec_has_biogenic_ascension_origin = yes
			# Has t1
			has_country_flag = ap_engineered_evolution_biogenics
			# Unlocked T2
			has_ascension_perk = ap_tec_biogenic_mutation
		}
	}
	tec_has_biogenic_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_has_biogenic_ascension_origin = {
		always = no
		# TODO ASCENSION
	}

	tec_has_biogenic_ascension_finished = {
		always = no
		# TODO ASCENSION
	}

	tec_has_any_biogenic_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_is_biogenic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_biogenic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_biogenic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /

 # Cybernetic
	tec_is_cybernetic_ascension_empire = {
		OR = {
			# Has origin
			tec_has_cybernetic_ascension_origin = yes
			# Has t1
			has_country_flag = ap_the_flesh_is_weak_cybernetics
			# Unlocked T2
			has_ascension_perk = ap_tec_cybernetic_revolution
		}
	}
	tec_has_cybernetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_the_flesh_is_weak						# Regular
			has_ascension_perk = ap_organo_machine_interfacing				# Hive-Mind
			has_ascension_perk = ap_organo_machine_interfacing_assimilator	# Cyborg ap
			tec_has_cybernetic_ascension_origin = yes
		}
	}
	tec_has_cybernetic_ascension_origin = {
		OR = {
			has_origin = origin_cybernetic_creed							# Early Access Origin
			has_valid_civic = civic_augmentation_bazaars
			# evolved
			has_origin = origin_tec_cyborgs					# Origin
			# Origins Extended
			has_origin = @originsextended_cyb
		}
	}

	tec_has_cybernetic_ascension_path_exception = {
		has_valid_civic = civic_machine_assimilator		# Assimilators can take cybernetic
	}

	tec_has_cybernetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_cybernetics_finish 
			has_tradition = tr_cybernetics_assimilator_finish 
		}
	}

	tec_has_any_cybernetic_ascension_path = {
		OR = {
			tec_has_cybernetic_ascension_path = yes
			has_ascension_perk = ap_tec_cyberpsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_has_any_cybernetic_ascension_finished = {
		OR = {
			tec_has_cybernetic_ascension_finished = yes
			has_ascension_perk = ap_tec_cyberpsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_is_cybernetic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_cybernetic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_cybernetic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /
 # Bioware
	tec_is_bioware_ascension_empire = {
		OR = {
			# Has origin
			tec_has_bioware_ascension_origin = yes
			# Has t1
			has_country_flag = ap_the_flesh_is_weak_bioware
			# Unlocked T2
			has_ascension_perk = ap_tec_bioware_combination
		}
	}
	tec_has_bioware_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_has_bioware_ascension_origin = {
		always = no
		# TODO ASCENSION
	}

	tec_has_bioware_ascension_finished = {
		always = no
		# TODO ASCENSION
	}

	tec_has_any_bioware_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_is_bioware_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_bioware_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_bioware_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /

 # Synthetic
	tec_is_synthetic_ascension_empire = {
		OR = {
			# Has origin
			tec_has_synthetic_ascension_origin = yes
			# Has t1
			has_country_flag = ap_synthetic_evolution_mechanical
			# Unlocked T2
			has_ascension_perk = ap_tec_synthetic_t2
		}
	}
	tec_has_synthetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_synthetic_evolution
			has_ascension_perk = ap_synthetic_age
			tec_has_synthetic_ascension_origin = yes
		}
	}
	tec_has_synthetic_ascension_origin = {
		OR = {							# Machine Intelligence
			has_origin = origin_synthetic_fertility
		}
	}

	tec_has_synthetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_synthetics_finish 
		}
	}

	tec_has_any_synthetic_ascension_path = {
		OR = {
			tec_has_synthetic_ascension_path = yes
		}
	}

	tec_has_any_synthetic_ascension_finished = {
		OR = {
			tec_has_synthetic_ascension_finished = yes
		}
	}

	tec_is_synthetic_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_synthetic_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_synthetic_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /
 # Digital
	tec_is_digital_ascension_empire = {
		OR = {
			# Has origin
			tec_has_digital_ascension_origin = yes
			# Has t1
			has_country_flag = ap_synthetic_evolution_digital
			# Unlocked T2
			has_ascension_perk = ap_tec_digital_t2
		}
	}
	tec_has_digital_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_has_digital_ascension_origin = {
		always = no
		# TODO ASCENSION
	}

	tec_has_digital_ascension_finished = {
		always = no
		# TODO ASCENSION
	}

	tec_has_any_digital_ascension_path = {
		always = no
		# TODO ASCENSION
	}

	tec_is_digital_ascension_beeliner = {
		always = no
		# TODO ASCENSION
	}

	tec_is_digital_ascension_hater = {
		OR = {
			# TODO MACHINE AGE
			tec_is_ascension_hater = yes
		}
	}
	tec_is_digital_ascension_rival = {
		# TODO ASCENSION
		always = no
	}
 # /

 # Generic
	tec_has_main_ascension_path = {
		OR = {
			tec_has_psionic_ascension_path = yes
			tec_has_genetic_ascension_path = yes
			tec_has_cybernetic_ascension_path = yes
			tec_has_synthetic_ascension_path = yes
			# evolved
			tec_has_biogenic_ascension_path = yes
			tec_has_bioware_ascension_path = yes
			tec_has_ethereal_ascension_path = yes
			tec_has_psychic_ascension_path = yes
			tec_has_digital_ascension_path = yes
			# PD
			tec_has_pd_biosynth_ascension_path = yes
		}
	}

	tec_has_main_ascension_finished = {
		OR = {
			tec_has_psionic_ascension_finished = yes
			tec_has_genetic_ascension_finished = yes
			tec_has_cybernetic_ascension_finished = yes
			tec_has_synthetic_ascension_finished = yes
			# PD
			tec_has_pd_biosynth_ascension_finished = yes
		}
	}


	tec_has_secondary_ascension_path = {
		OR = {
			has_ascension_perk = ap_tec_genetic_perfection			# perfect bio			
			has_ascension_perk = ap_tec_psionic_ascendance			# perfect psi
			has_ascension_perk = ap_tec_synthetic_singularity		# perfect synth
			has_ascension_perk = ap_tec_cybernetic_revolution		# perfect cyborg
			has_ascension_perk = ap_tec_replicant					# biorobot
			has_ascension_perk = ap_tec_cyberpsionic				# psiorobot
			has_ascension_perk = ap_tec_biopsionic					# biopsi

			has_ascension_perk = ap_tec_hive_psionic_3		# hivepsi good
			has_ascension_perk = ap_tec_hive_psionic_shatter			# hivepsi bad
		}
	}
 # /

# DECISIONS
# ---------------------------------------------------
	tec_can_enact_overstrip = {
		OR = {
			has_ethic = ethic_gestalt_overconsumption
			has_valid_civic = civic_tec_corporate_eco_exploiter_corp
			has_valid_civic = civic_tec_regular_surface_exploiters
		}
	}
# /



# PLANET SLOTS & DISTRICTS
# ---------------------------------------------------
	tec_has_all_slots_unlocked = {
		[[cached]
			has_planet_flag = tec_cache_tec_has_all_slots_unlocked
		]
		[[!cached]
		OR = {
			tec_is_city_world = yes
			tec_uses_elysium_districts = yes
			tec_is_ringworld = yes
			tec_is_uncapped_planet = yes
			AND = {
				tec_has_infinite_menial_districts = yes
				NOT = {
					uses_district_set = shattered_ring_world
				}
			}
			tec_special_infinite_buildings = yes
		}
		]
	}

	tec_has_infinite_menial_districts = {
		OR = {
			uses_district_set = hive_world
			uses_district_set = machine_world
			uses_district_set = shattered_ring_world
			AND = {
				uses_district_set = city_world
				has_planet_flag = tec_remnants_decadent_ecu
			}
			tec_is_pd_menial_uncapped = yes
		}
	}

	tec_is_uncapped_planet = {
		OR = {
			has_modifier = pm_tec_ecoworld_planet
			has_modifier = resort_colony
			tec_is_modded_uncapped_planet = yes
		}
	}

	tec_allow_research_buildings_and_districts = {
		OR = {
			NOT = { exists = owner }
			owner = {
				has_technology = tech_basic_science_lab_1
			}
		}
	}

	tec_has_any_food_district = {
		OR = {
			uses_district_set = standard
			AND = {
				tec_uses_ringworld_districts = yes
				tec_is_unspecced_ringworld = yes
			}
			AND = {
				uses_district_set = city_world
				tec_is_unspecced_ringworld = yes
			}
			AND = {
				tec_uses_elysium_districts = yes
				tec_is_unspecced_elysium = yes
			}
			AND = {
				tec_uses_habitat_districts = yes
				has_planet_flag = tec_food_habitat
				tec_is_arcology_habitat = no
			}
			uses_district_set = hive_world
			# PD
			AND = { # PD
				uses_district_set = @pdplanethab
				OR = {
					has_planet_flag = pd_farming_hab
					has_modifier = hab_terraforming_candidate
					has_modifier = hab_pdhabsubglacialocean
				}
				tec_is_arcology_habitat = no
			}
			uses_district_set = @pdexotic_standard
			# Giga
			giga_uses_farming_district = yes
			uses_district_set = @giga_alderson_gaia
			uses_district_set = @giga_birch
			uses_district_set = @flusion_gaia_ecu
			uses_district_set = @giga_frameworld
			uses_district_set = @giga_orbital
			uses_district_set = @giga_ancient_elysium
		}
	}

	tec_special_infinite_buildings = {
		OR = {
			always = no
		}
	}

	tec_disallow_menial_districts = {
		OR = {
			tec_is_special_colony_restrictive_menial = yes
			tec_has_machine_production_capital = yes
		}
	}

	tec_disallow_urban_districts = {	# TODO CODE REWORK - Improve with tooltips for megacities (tec_urban_district_unusable_megacities)
		OR = {
			tec_is_special_colony_restrictive_urban = yes
			tec_has_machine_extraction_capital = yes
			AND = {
				exists = owner
				owner = {
					tec_is_megacity_empire = yes
				}
			}
		}
	}

	tec_is_special_colony = {	# Note: Identification, sort
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
			has_modifier = penal_colony
			has_modifier = gestation_colony
			#has_modifier = pm_tec_sanctuary_colony
			#has_modifier = pm_tec_necropolis_colony
			#has_modifier = pm_tec_preserve_colony
			#has_modifier = pm_tec_heritage_colony
		}
	}

	tec_is_special_colony_restrictive_all = {	# Note: mostly used for buildings
		always = no
	}

	tec_is_special_colony_restrictive_menial = {
		OR = {
			has_modifier = resort_colony
		}
	}

	tec_is_special_colony_restrictive_urban = {
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
			has_modifier = penal_colony
		}
	}

	tec_is_special_colony_restrictive_advanced = {
		OR = {
			has_modifier = resort_colony
			#has_modifier = pm_tec_sanctuary_colony
			#has_modifier = pm_tec_necropolis_colony
		}
	}
# /

# Compatibility scripts
	tec_invalidates_arcology_project_comp = {
		OR = {
			tec_is_city_world = yes
			tec_is_special_colony = yes
			# Wenkwort
			has_modifier = pm_wenkwort_custodian

			# Planetary diversity compatibility
			is_pd_shroud_world = yes
			is_pd_unique = yes
			is_pd_planetary_megaproject = yes

			has_designation = col_nanotech_world
		}
	}

	tec_invalidates_ecoworld_project_comp = {
		OR = {
			tec_is_city_world = yes
			tec_is_special_colony = yes

			tec_is_hive_world = yes
			tec_is_machine_world = yes
			tec_is_nuked_world = yes
			tec_is_relic_world = yes

			# PD
			is_pd_wasteland = yes
			is_pd_planetary_megaproject = yes

			has_designation = col_nanotech_world
		} 
	}

	tec_has_any_menial_district = {
		OR = {
			check_variable_arithmetic = {
				which = value:farming_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:mining_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:generator_districts_value
				value > 0
			}
		}
	}

	tec_has_any_menial_building = {
		OR = {
			check_variable_arithmetic = {
				which = value:farming_buildings_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:mining_buildings_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:generator_buildings_value
				value > 0
			}
		}
	}

	tec_has_any_urban_district = {
		OR = {
			check_variable_arithmetic = {
				which = value:housing_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:industrial_districts_value
				value > 0
			}
		}
	}
# /
	
# PLANET TRIGGERS
# ---------------------------------------------------
	tec_is_modded_uncapped_planet = {
		OR = {
			has_modifier = @pleasure_palace

			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					uses_district_set = @giga_alderson
					uses_district_set = @giga_birch
				"
			}
		}

	}

	tec_is_modded_space_arcology = {
		OR = {
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_habitable_structure = yes
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_modded_space_arcology
			}
		}
	}



	tec_is_vanilla_habitable_regular_planet = {
		OR = {
			#dry
			is_planet_class = pc_desert
			is_planet_class = pc_arid
			is_planet_class = pc_savannah

			#wet
			is_planet_class = pc_tropical
			is_planet_class = pc_ocean
			is_planet_class = pc_continental
			
			#cold
			is_planet_class = pc_tundra
			is_planet_class = pc_alpine
			is_planet_class = pc_arctic
		}
	}

	tec_is_habitable_regular_planet = {
		OR = {
			tec_is_vanilla_habitable_regular_planet = yes
			# Generic
			uses_district_set = standard
			# PD

			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					is_pd_regular = yes
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_uses_ringworld_districts
			}
		}
	}

	tec_is_arcology = {
		[[cached]
		has_planet_flag = tec_cache_tec_is_arcology
		]
		[[!cached]
		OR = {
			tec_is_city_world = yes
			tec_is_space_arcology = yes

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_arcology
			}
		}
		]
	}


	tec_is_space_arcology = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_space_arcology
		]
		[[!cached]
		OR = {
			tec_is_habitat = yes
			tec_is_ringworld = yes
			tec_is_elysium = yes
			tec_is_modded_space_arcology = yes

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_space_arcology
			}
		}
		]
	}

	tec_is_habitat = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_habitat
		]
		[[!cached]
		OR = {
			uses_habitat_capitals = yes
			uses_district_set = habitat
			# PD
			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					uses_district_set = @pdplanethab
					has_planet_flag = pdiceasteroidhab
					has_planet_flag = pdcrystalasteroidhab
					has_planet_flag = pdasteroidhab
				"
			}
			# gigas
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					is_giga_habitat = yes
					is_non_giga_habitat = yes
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_habitat
			}
		}
		]
	}

	tec_is_ringworld = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_ringworld
		]
		[[!cached]
		OR = {
			uses_district_set = ring_world

			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					is_giga_ringworld = yes
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_ringworld
			}
		}
		]
	}

	tec_is_elysium = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_elysium
		]
		[[!cached]
		OR = {
			#uses_district_set = elysium_phase_0
			uses_district_set = elysium_phase_2

			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					is_planet_class = pc_giga_elysium
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_elysium
			}
		}
		]
	}

	tec_is_city_world = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_city_world
		]
		[[!cached]
		OR = {
			uses_district_set = city_world
			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					is_pd_arcology = yes
				"
			}

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_is_city_world
			}
		}
		]
	}

	tec_uses_habitat_districts = {
		OR = {
			uses_district_set = habitat

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_uses_habitat_districts
			}
		}
	}

	tec_uses_ringworld_districts = {
		OR = {
			uses_district_set = ring_world
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					AND = {
						has_stellaris_evolved_giga = yes
						OR = {
							uses_district_set = @penrose_ring
							uses_district_set = @interstellar_ring
						}
					}

				"
			}
			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_uses_ringworld_districts
			}
		}
	}

	tec_uses_elysium_districts = {
		OR = {
			uses_district_set = elysium_phase_2

			inline_script = {
				script = mod_support/tec_trigger_include
				trigger = tec_uses_elysium_districts
			}
		}
	}

	tec_planet_generates_relics_for_jobs = {
		OR = {
			tec_is_relic_world = yes
			has_deposit = d_central_spire
			has_deposit = d_former_relic_world
			has_planet_flag = tec_relic_megastructure
			uses_district_set = gpm_precursor # GPM archeopolis, aka mega relic world
		}
	}
# /

#void dweller traits
# neutral
	tec_is_viable_voidwellerneutral_planet = {
		OR = {
			tec_is_ringworld = yes
			tec_is_elysium = yes
			tec_is_city_world = yes
			tec_is_relic_world = yes
			tec_is_gaia_world = yes
			tec_is_ecoworld = yes
			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					is_pd_unique = yes
					is_pd_shroud_world = yes
				"
			}
		}
	}
# /

#Lifeaffinity traits
# only for exotic and gaia worlds
tec_is_perfect_planet = {
	[[cached]
		has_planet_flag = tec_cache_tec_is_perfect_planet
	]
	[[!cached]
	OR = {
		tec_is_gaia_world = yes
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				tec_is_pd_perfect_planets = yes
			"
		}
	}
	]
}

# for special arcologies
tec_is_neutral_planet = {
	[[cached]
		has_planet_flag = tec_cache_tec_is_neutral_planet
	]
	[[!cached]
	OR = {
		tec_is_elysium = yes
		tec_is_ringworld = yes
		tec_is_modded_space_arcology = yes
	}
	]
}

# Aquatic species
tec_is_wet_planet_exceptions = {	# Outside is_wet trigger
	inline_script = {
		script = tec_type_hint
		country_scope = $owner$
	}
	OR = {
		tec_is_gaia_world = yes
		tec_is_flooded = yes
		tec_is_wet_planet_origin_exceptions = {
			owner = $owner$
		}
		tec_is_wet_modded_planet_exceptions = {
			owner = $owner$
		}
	}
}

tec_is_wet_modded_planet_exceptions = {
	inline_script = {
		script = tec_type_hint
		country_scope = $owner$
	}
	OR = {
		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				uses_district_set = giga_birch
				uses_district_set = flusion_gaia_ecu
				uses_district_set = giga_alderson_gaia
				# Hive start
				AND = {
					$owner$ = {
						tec_has_hive_world_origin = yes
					}
					uses_district_set = giga_alderson_hive
				}
				# Machine Start
				AND = {
					$owner$ = {
						tec_has_machine_world_origin = yes
					}
					uses_district_set = giga_alderson_machine
				}
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_is_wet_modded_planet_exceptions
		}
	}
}

tec_is_wet_planet_origin_exceptions = {
	inline_script = {
		script = tec_type_hint
		country_scope = $owner$
	}
	OR = {
		# Nuked start 
		AND = {
			$owner$ = {
				tec_has_nuked_world_origin = yes
			}
			tec_is_nuked_world = yes
		}
		# Hive start
		AND = {
			$owner$ = {
				tec_has_hive_world_origin = yes
			}
			tec_is_hive_world = yes
		}
		# Machine Start
		AND = {
			$owner$ = {
				tec_has_machine_world_origin = yes
			}
			tec_is_machine_world = yes
		}
		# 
	}
}

tec_is_ecoworld = {
	has_modifier = pm_tec_ecoworld_planet
}


tec_is_modded_habitat_exception = {
	OR = {
		giga_uses_habitat_capitals = yes
		has_planet_flag = giga_habitat_capital_compat
	}
}

tec_is_upgraded_habitat = {
	optimize_memory
	OR = {
		tec_has_t3_capital = { cached = yes }
		tec_has_t4_capital = { cached = yes }
		tec_has_t5_capital = { cached = yes }
		tec_has_imperial_capital = { cached = yes }
	}
}

tec_is_fully_upgraded_habitat = {
	optimize_memory
	OR = {
		tec_has_t4_capital = { cached = yes }
		tec_has_t5_capital = { cached = yes }
		tec_has_imperial_capital = { cached = yes }
	}
}

tec_is_arcology_habitat = {
	OR = {
		has_planet_flag = tec_arcology_habitat
		has_modifier = pm_tec_arcology_habitat
	}
}
tec_is_arcology_specced_habitat = {
	OR = {
		has_planet_flag = tec_arcology_habitat
		has_modifier = pm_tec_arcology_habitat
	}
}

tec_is_hive_world = {
	OR = {
		is_planet_class = pc_hive
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				# PD
				is_pd_hive_world = yes
			"
		}
	}
}

tec_is_machine_world = {
	OR = {
		is_planet_class = pc_machine
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				# PD
				is_pd_machine = yes
			"
		}
	}
}

tec_is_nuked_world = {
	OR = {
		is_planet_class = pc_nuked
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				is_pd_nuked = yes
			"
		}
	}
}

tec_is_relic_world = {
	OR = {
		is_planet_class = pc_relic
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				is_pd_relic = yes
			"
		}
	}
}

tec_is_gaia_world = {
	OR = {
		is_planet_class = pc_gaia
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				is_pd_gaia = yes
			"
		}
	}
}

tec_is_aquatic_planet = {
	OR = {
		is_planet_class = pc_ocean
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				is_pd_planet_for_aqua_trait = yes
			"
		}
		tec_is_flooded = yes
	}
}

tec_is_standard_like_planet = {
	OR = {
		uses_district_set = standard
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				uses_district_set = @pdexotic_standard
			"
		}
	}
}

tec_has_nuked_world_origin = {
	OR = {
		is_apocalyptic_empire = yes
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				has_origin = @origin_pd_radiotrophic_mutants
			"
		}
		has_origin = @origin_disharmonious_unity
		has_origin = @originsextended_starless
		has_origin = @originsextended_magnetica
		has_origin = @originsextended_graveyard
	}
}

tec_has_hive_world_origin = {
	OR = {
		has_origin = @origin_tec_hiveplanet
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				has_origin = @origin_pd_hive
			"
		}
		has_origin = @origin_hive
		has_origin = @originsextended_infest
	}
}

tec_has_machine_world_origin = {
	OR = {
		has_origin = origin_machine
		has_origin = @originsextended_core
	}
}

tec_has_relic_world_origin = {
	OR = {
		has_origin = origin_remnants
		has_origin = @origin_reliquary
		has_origin = @origin_mem_from_the_ashes
		has_origin = @origin_mem_ceaseless_gaze
		# has_origin = @origin_pd_scrapyard_world # Commented cause not relic planet type but similar enough
	}
}

tec_has_gaia_world_origin = {
	OR = {
		has_origin = origin_life_seeded
		has_origin = @originsextended_gaia
		has_origin = @origin_resort_world
	}
}

tec_district_ecoworld_swap = {
	tec_is_ecoworld = yes
}

tec_district_organic_swap = {
	tec_is_biomorph = yes
}


# scope: country
# prev: planet
tec_generator_aqua_district_swap = {
	[[cached]
		prev = { has_planet_flag = tec_cache_tec_generator_aqua_district_swap }
	]
	[[!cached]
	tec_is_aquatic_empire = yes
	is_machine_empire = yes
	prev = {
		OR = {
			is_wet = yes
			tec_is_wet_planet_exceptions = {
				owner = prev
			}
		}
	}
	]
}


# scope: country
# prev: planet
tec_has_infinite_generator_district = {
	OR = {
		prev = {
			tec_has_infinite_menial_districts = yes
		}
	}
	# Exceptions
	if = {
		limit = {
			prev = { uses_district_set = shattered_ring_world }
		}
		OR = {
			is_gestalt = yes
			is_fallen_empire = yes
		}
	}
}

# scope: country
# prev: planet
tec_mining_aqua_district_swap = {
	[[cached]
		prev = { has_planet_flag = tec_cache_tec_mining_aqua_district_swap }
	]
	[[!cached]
	tec_is_aquatic_empire = yes
	is_lithoid_empire = yes
	is_machine_empire = no
	prev = {
		OR = {
			is_wet = yes
			tec_is_wet_planet_exceptions = {
				owner = prev
			}
		}
	}
	]
}


# scope: country
# prev: planet
tec_has_infinite_mining_district = {
	OR = {
		prev = {
			tec_has_infinite_menial_districts = yes
		}
		is_subterranean_empire = yes
	}
	# Exceptions
}

# scope: country
# prev: planet
tec_farming_aqua_district_swap = {
	[[cached]
		prev = { has_planet_flag = tec_cache_tec_farming_aqua_district_swap }
	]
	[[!cached]
	tec_is_aquatic_empire = yes
	is_lithoid_empire = no
	is_machine_empire = no
	prev = {
		planet = {
			OR = {
				is_wet = yes
				tec_is_wet_planet_exceptions = {
					owner = owner
				}
			}
		}
	}
	]
}

# scope: country
# prev: planet
tec_has_infinite_farming_district = {
	OR = {
		prev = {
			tec_has_infinite_menial_districts = yes
		}
	}
	# Exceptions
	prev = {
		NOT = {
			uses_district_set = machine_world
		}
	}
}

tec_has_standard_habitation_district = {
	OR = {
		uses_district_set = district_resort
		uses_district_set = standard
		uses_district_set = hive_world
		uses_district_set = machine_world
		uses_district_set = shattered_ring_world

		has_planet_flag = tec_remnants_decadent_ecu


		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				uses_district_set = @pdnecroplanet
				uses_district_set = @pdscrapyard
				uses_district_set = @pdbioforge
				uses_district_set = @pdbiofort
				uses_district_set = @pdfloraforge
				uses_district_set = @pdflorafort
				AND = {
					has_stellaris_evolved_pd = yes
					uses_district_set = @pdexotic_standard
				}
			"
		}
		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				AND = {
					has_stellaris_evolved_giga = yes
					giga_uses_city_district = yes
				}
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_standard_habitation_district
		}
	}
	tec_has_standard_habitation_district_block = no
}

tec_has_standard_habitation_district_block = {
	OR = {
		has_deposit = d_crashed_slaver_ship
		has_modifier = resort_colony
		has_modifier = penal_colony
		has_modifier = slave_colony
		has_planet_flag = tec_test_hiveworlds
		has_planet_flag = tec_test_machineworlds
		tec_is_ecoworld = yes

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_standard_habitation_district_block
		}
	}
}

tec_has_standard_industrial_district = {
	OR = {
		uses_district_industrial = yes
		AND = {
			has_planet_flag = tec_remnants_decadent_ecu
			NOR = {
				has_planet_flag = tec_ecumenopolis_spec_militarized
				has_planet_flag = tec_ecumenopolis_spec_science
				has_planet_flag = tec_ecumenopolis_spec_admin
			}
		}
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				uses_district_set = @pdnecroplanet
				uses_district_set = @pdscrapyard
				AND = {
					has_stellaris_evolved_pd = yes
					uses_district_set = @pdexotic_standard
				}
			"
		}

		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				giga_uses_industrial_district = yes
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_standard_industrial_district
		}
	}
}

tec_has_standard_industrial_district_block = {
	OR = {
		has_modifier = penal_colony
		has_modifier = slave_colony
		tec_is_ecoworld = yes
		has_planet_flag = tec_test_hiveworlds
		has_planet_flag = tec_test_machineworlds

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_standard_industrial_district_block
		}
	}
}

tec_has_rural_mimics = {
	OR = {
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				AND = {
					has_stellaris_evolved_pd = yes
					uses_district_set = @pdexotic_standard
				}
			"
		}
		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				AND = {
					has_stellaris_evolved_giga = yes
					OR = {
						giga_uses_farming_district = yes
						giga_uses_mining_district = yes
						giga_uses_generator_district = yes
					}
				}
			"
		}
	}
}

# B U I L D I N G S
# -------------- STATECRAFT BUILDINGS ----------------
tec_only_one_statecraft_building = {
	text = "tec_only_one_statecraft_building_on_planet"
	# hidden_trigger = {
	# 	OR = {
	# 		has_building = building_tec_tr_statecraft_fallback

	# 		has_building = building_tec_tr_nofan_diversity

	# 		# mat vs spi
	# 		has_building = building_tec_tr_mat_celestial_database
	# 		has_building = building_tec_tr_spi_manifesto_faith

	# 		# phile vs phobe
	# 		has_building = building_tec_tr_phile_tribute_unity
	# 		has_building = building_tec_tr_phobe_monument_purity

	# 		# peace vs mil
	# 		has_building = building_tec_tr_pac_garden_peace
	# 		has_building = building_tec_tr_mil_comisariat

	# 		# auth vs lib
	# 		has_building = building_tec_tr_aut_throne
	# 		has_building = building_tec_tr_lib_parliament

	# 		# green vs ind
	# 		has_building = building_tec_tr_eco_sculptor
	# 		has_building = building_tec_tr_ind_mohole
			
	# 		# comp vs coop
	# 		has_building = building_tec_tr_comp_hypermall
	# 		has_building = building_tec_tr_coop_distribution

	# 		# elit vs egal
	# 		has_building = building_tec_tr_eli_academy
	# 		has_building = building_tec_tr_ega_repository

	# 		# special gestalt ones goes here
			
	# 	}
	# }
}

# These ones are for backup
overlord_has_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_more_than_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_num_science_ships_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = science
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_more_than_num_science_ships_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = science
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

# This one is from evolved
tec_has_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
					}
				}
			}
		}
	}
}
tec_has_more_than_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
					}
				}
			}
		}
	}
}


# S H I P S
# -------------- Colossus ----------------
# De-evolution ray
tec_can_destroy_planet_with_PLANET_KILLER_TEC_DEVOLVERAY = {
	custom_tooltip = {
		fail_text = is_not_a_habitable_planet_or_megastructure
		is_a_habitable_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	custom_tooltip = {
		fail_text = is_not_hostile_or_primitive
		OR = {
			planet_is_hostile = yes
			AND = {
				exists = owner
				owner = {
					is_country_type = primitive
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = lathe_cant_colossus
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
	if = {
		limit = {
			exists = owner
			owner = { is_country_type = primitive }
		}
		custom_tooltip = {
			fail_text = tec_cannot_devolve_primitives
			always = no
		}
	}
	custom_tooltip = { # Replicants assimilate EVERYTHING
		fail_text = no_assimilatable_pops
		any_owned_pop = {
			is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
		}
	}
}
tec_is_valid_pop_for_PLANET_KILLER_TEC_REPLICANTRAY = {
	always = yes
}

tec_can_destroy_planet_with_PLANET_KILLER_TEC_REPLICANTRAY = {
	custom_tooltip = {
		fail_text = is_not_a_habitable_planet_or_megastructure
		is_a_habitable_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	custom_tooltip = {
		fail_text = is_not_hostile_or_primitive
		OR = {
			planet_is_hostile = yes
			AND = {
				exists = owner
				owner = {
					is_country_type = primitive
				}
			}
		}
	}
	if = {
		limit = {
			exists = owner
			owner = { is_country_type = primitive }
		}
		custom_tooltip = {
			fail_text = primitives_not_in_borders
			exists = space_owner
			space_owner = { is_same_value = from.owner }
		}
		custom_tooltip = {
			fail_text = primitives_not_full_interference
			from.owner = {
				OR = {
					has_policy_flag = interference_active
					has_policy_flag = interference_aggressive
				}
			}
		}
	}
	custom_tooltip = {
		fail_text = lathe_cant_colossus
		NOT = { is_planet_class = pc_cosmogenesis_world }
	}
	#custom_tooltip = { # Replicants assimilate EVERYTHING
	#	fail_text = no_assimilatable_pops
	#	any_owned_pop = {
	#		is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
	#	}
	#}
}
tec_is_valid_pop_for_PLANET_KILLER_TEC_REPLICANTRAY = {
	always = yes
}


# Specializations
tec_is_unspecced_city_planet = {
	NOR = {
		has_planet_flag = tec_ecumenopolis_spec_militarized
		has_planet_flag = tec_ecumenopolis_spec_science
		has_planet_flag = tec_ecumenopolis_spec_admin
		has_planet_flag = tec_ecumenopolis_spec_precursor
	}
}

tec_is_precursor_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_precursor 
}

tec_is_military_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_militarized 
}

tec_is_admin_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_admin 
}

tec_is_science_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_science 
}

tec_is_decadent_city_planet = {
	has_planet_flag = tec_remnants_decadent_ecu
}

tec_is_specced_ringworld = {
	OR = {
		has_planet_flag = tec_rw_spec_science
		has_planet_flag = tec_rw_spec_admin
		has_planet_flag = tec_rw_spec_industry
	}
}

tec_is_unspecced_ringworld = {
	NOR = {
		has_planet_flag = tec_rw_spec_precursor
		has_planet_flag = tec_rw_spec_science
		has_planet_flag = tec_rw_spec_admin
		has_planet_flag = tec_rw_spec_industry
	}
}

tec_is_precursor_ringworld = {
	has_planet_flag = tec_rw_spec_precursor
}

tec_is_science_ringworld = {
	has_planet_flag = tec_rw_spec_science
}

tec_is_industry_ringworld = {
	has_planet_flag = tec_rw_spec_industry
}

tec_is_admin_ringworld = { # scrapped
	has_planet_flag = tec_rw_spec_admin
}

tec_is_unspecced_elysium = {
	NOR = {
		has_planet_flag = tec_civ_elysium
		has_planet_flag = tec_mil_elysium
	}
}

tec_is_civilian_elysium = {
	has_planet_flag = tec_civ_elysium
}

tec_is_military_elysium = {
	has_planet_flag = tec_mil_elysium
}

tec_is_flooded = {
	# Can be used to allow flooded elysiums and ringworlds
	OR = {
		has_modifier = flooded_habitat
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				AND = {
					has_modifier = @hyceanfloodedhabitat
					owner = { has_origin = @origin_pd_hycean_aquatic }
				}
			"
		}
	}
}

tec_has_hired_job = {
	OR = {
		has_job = tec_hired_miner
		has_job = tec_hired_farmer
		has_job = tec_hired_technician
		has_job = tec_hired_catalytic
		has_job = tec_hired_soldier
		has_job = tec_hired_foundry
		has_job = tec_hired_artisan
		has_job = tec_hired_researcher
		has_job = tec_hired_entertainer
	}
}

tec_has_advanced_genemodding = {
	always = no
}


# Ecu decisions

tec_arcology_project_potential = {
	optimize_memory
	tec_is_relic_world = no
	tec_invalidates_arcology_project_comp = no

	habitable_structure = no
	tec_is_arcology = no

	exists = owner
	owner = {
		has_ascension_perk = ap_arcology_project
		NOT = {
			has_ethic = ethic_fanatic_ecologist
		}
		tec_is_agrarian_idyll_empire = no
	}
}

tec_arcology_project_relic_potential = {
	optimize_memory
	[[!milarc]
		is_planet_class = pc_relic
	]
	inline_script = {
		script = mod_support/tec_pd_present
		code = "
			# PD compat
			[[milarc]
				is_pd_milarc_relic = yes
			]
		"
	}
	
	tec_invalidates_arcology_project_comp = no
	habitable_structure = no
	tec_is_arcology = no
}

tec_ecoworld_project_potential = {
	tec_is_arcology = no
	tec_invalidates_ecoworld_project_comp = no

	tec_is_ecoworld = no

	habitable_structure = no

	exists = owner
		owner = {
			NOR = {
				has_ethic = ethic_fanatic_industrialist
				has_valid_civic = civic_hive_devouring_swarm
			}
			OR = {
				is_ecologist = yes
				has_ascension_perk = ap_mastery_of_nature
			}
		}
}

tec_arcology_project_allow = {
	optimize_memory
	if = {
		limit = { owner = { is_ai = no } }
		custom_tooltip = {
			# PD compat
			[[!eco]
				fail_text = decision_arcology_project_requirements
			]
			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					[[eco]
						fail_text = decision_eco_arcology_project_requirements
					]
				"
			}
			if = {
				limit = {
					owner = {
						tec_is_megacity_empire = no
					}
				}
				free_district_slots < 1

				# PD compat
				inline_script = {
					script = mod_support/tec_pd_present
					code = "
						[[eco]
							num_districts = { type = district_industrial value < 1 }
						]
					"
				}
				check_variable_arithmetic = {
					which = value:farming_districts_value
					value = 0
				}
				check_variable_arithmetic = {
					which = value:mining_districts_value
					value = 0
				}
				check_variable_arithmetic = {
					which = value:generator_districts_value
					value = 0
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_megacity_empire = yes
					}
				}
				# MEMESIS MEGACITY CHANGES
				log = "A"
			}
		}
	} else = {
		# ai checks are a bit leniant
		if = {
			limit = {
				owner = {
					tec_is_megacity_empire = no
				}
			}
			free_district_slots < 4

			# PD compat
			inline_script = {
				script = mod_support/tec_pd_present
				code = "
					[[eco]
						num_districts = { type = district_industrial value < 3 }
					]
				"
			}
			check_variable_arithmetic = {
				which = value:farming_districts_value
				value < 4
			}
			check_variable_arithmetic = {
				which = value:mining_districts_value
				value < 4
			}
			check_variable_arithmetic = {
				which = value:generator_districts_value
				value < 4
			}
		}
		if = {
			limit = {
				owner = {
					tec_is_megacity_empire = yes
				}
			}
			# MEMESIS MEGACITY CHANGES
			log = "A"
		}
	}
	custom_tooltip = {
		fail_text = legendary_leader_decision_arcology_project
		NOT = { has_planet_flag = legendary_leader_planet }
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				tec_can_enact_overstrip = yes
			}
		}
	}

	if = {
		limit = { owner = { is_ai = yes } } # block ai from being dumb
		NOR = {
			AND = {
				tec_is_ecoworld = yes
				owner = {
					NOT = { has_ethic = ethic_fanatic_industrialist }
				}
			}
			has_modifier = "holy_planet"
		}
	}
	
}

tec_arcology_project_relic_allow = {
	optimize_memory
	owner = {
		has_technology = tech_housing_2 
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				tec_can_enact_overstrip = yes
			}
		}
	}
}

tec_ecoworld_project_allow = {
	optimize_memory
	custom_tooltip = {
		fail_text = decision_tec_ecoworld_project_requirements
		OR = {
			check_variable_arithmetic = {
				which = value:farming_districts_value
				value >= 6
			}
			check_variable_arithmetic = {
				which = value:mining_districts_value
				value >= 6
			}
			check_variable_arithmetic = {
				which = value:generator_districts_value
				value >= 6
			}
		}
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				OR = {
					tec_can_enact_overstrip = yes
					tec_is_terraformer_environmentalist_empire = yes
				}
			}
		}
	}
}

tec_ecoworld_project_can_upgrade = {
	optimize_memory
	OR = {
		has_ascension_perk = ap_mastery_of_nature
		has_ethic = ethic_fanatic_ecologist
		has_ethic = ethic_gestalt_preservation
	}
}
#

tec_autocolonizes_artificial_worlds = {
	OR = {
		is_ai = yes
		has_void_dweller_origin = yes
	}
}

tec_autocolonizable_artificial_worlds = {
	OR = {
		is_artificial = yes
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				is_pd_habitat = yes # they are nor marked artificial
			"
		}
	}
}

# Gamer rules

tec_allows_machine_assembly_for_cyborg = {
	OR = {
		has_active_tradition = tr_cybernetics_finish
		has_country_flag = tec_unlock_mechadendrite_assemblers
	}
}


tec_waives_clone_origin_assembly_restrictions = {
	NOT = { has_country_flag = tec_waives_clone_origin_restrictions }
}

tec_can_assemble_bioservant_pop = {
	OR = {
		NOT = { exists = assembling_species }
		AND = {
			exists = assembling_species
			assembling_species = {
				tec_is_bioservant_species = yes
			}
		}
	}
}


tec_can_assemble_species_due_to_purity_assembly_policy = {
	if = {	# Restriction on main species with purity
		limit = {
			root.owner = { has_policy_flag = tec_purity_assembly }
		}
		is_same_species = root.owner_main_species
		# Note: Exact same species takes into account the main template, not subtemplates
		#	same species is more flexible to the system and subsystems
	}
}

# Terraforming APs

tec_blocks_terraforming_aps = {
	OR = {
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				# PD blocks hive and gaia worlds for megaflora
				has_origin = @origin_pd_tree_of_life
			"
		}
	}
}

tec_ecologists_have_modifiers_to_fix = {
	OR = {
		has_modifier = "dangerous_wildlife"
		has_modifier = "hazardous_weather"
		has_modifier = "weak_magnetic_field"
		has_modifier = "unstable_tectonics"
		has_modifier = "tidal_locked"
		has_modifier = "high_gravity"
		has_modifier = "mineral_poor"
		has_modifier = "atmospheric_aphrodisiac"
		has_modifier = "atmospheric_hallucinogen"
		has_modifier = "bleak_planet"
		has_modifier = "irradiated_planet"
		has_modifier = @gpm_unstable_tectonics_2
		has_modifier = @gpm_global_thunderstorms
		has_modifier = @gpm_thin_atmospheres
		has_modifier = @gpm_strong_volcanism
		has_modifier = @gpm_high_gravity_2
		has_modifier = @gpm_hostile_flora
		has_modifier = @gpm_toxic_gas
		has_modifier = @gpm_titanic_predators
		has_modifier = @gpm_unusual_seasons
		has_modifier = @gpm_simple_organisms
		has_modifier = @gpm_unusual_formations
		has_modifier = @gpm_great_temperature_variation
		has_modifier = @gpm_ice_age
		has_modifier = @gpm_locust_plagues
		has_modifier = @gpm_resilent_parasites
		has_modifier = @gpm_trubbles
		has_modifier = @gpm_arachnophobia
		has_modifier = @gpm_giant_worm
		has_modifier = @gpm_sandstorms
		has_modifier = @gpm_quicksand
		has_modifier = @gpm_blizzards
		has_modifier = @gpm_abominable_predators
		has_modifier = @gpm_giant_ocean_snakes
		has_modifier = @gpm_cursed_world
		has_modifier = @gpm_asteroid_impacts_2
		has_modifier = @gpm_strange_alien_eggs
		has_modifier = @gpm_living_planet
	}
}

# D E P O S I T S		AND		A I
# -------------- SPECIAL RESOURCES ----------------
tec_adds_motes_deposit = {
	check_modifier_value = {
		modifier = building_mote_harvesters_max
		value >= 1
	}
}

# Gas
tec_adds_gases_deposit = {
	check_modifier_value = {
		modifier = building_gas_extractors_max
		value >= 1
	}
}

# Crystals
tec_adds_crystals_deposit = {
	check_modifier_value = {
		modifier = building_crystal_mines_max
		value >= 1
	}
}

# Betharian
tec_has_betharian_deposit = {
	check_modifier_value = {
		modifier = building_betharian_power_plant_max
		value >= 1
	}
}


tec_has_any_sr_building_or_district = {
	check_variable_arithmetic = {
		which = value:refinery_combined_value|CACHED|yes|
		value > 0 
	}
}


tec_has_any_basic_ap = {
	OR = {
		has_ascension_perk = ap_one_vision
		has_ascension_perk = ap_tec_one_mind
		has_ascension_perk = ap_technological_ascendancy
		has_ascension_perk = ap_tec_influential
		has_ascension_perk = ap_tec_castling
	}
}



tec_allow_enhance_planet = {
	NOR = {
		has_planet_flag = tec_enhanced_by_terraformers
		has_planet_flag = tec_block_enhancing
	}
}

tec_can_environement_enhance = {
	OR = {
		tec_is_standard_like_planet = yes
		tec_is_ringworld = yes
		tec_is_elysium = yes
		tec_is_ecoworld = yes
	}
}

tec_is_minerals_production_system = {
	any_system_planet = {
		OR = {
			is_asteroid = yes
			is_planet_class = pc_black_hole

			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_is_black_hole = yes
				"
			}
		}
	}
}

tec_is_food_production_system = {
	any_system_planet = {
		OR = {
			AND = {
				is_colony = yes
				tec_has_any_food_district = yes
			}
			has_resource = { type = food amount > 0 }
		}
	}
}

tec_is_energy_production_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_neutron_star
			is_planet_class = pc_pulsar
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_is_neutron_type_star = yes
					giga_is_superpower_star = yes
					giga_is_white_hole = yes
				"
			}
		}
	}
}

tec_is_physics_research_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_black_hole
			is_planet_class = pc_pulsar

			is_astral_scar = yes

			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_is_black_hole = yes
					giga_is_white_hole = yes
				"
			}
		}
	}
}


tec_is_society_research_system = {
	any_system_planet = {
		OR = {
			AND = {
				exists = owner
				owner = {
					is_primitive = yes
				}
			}
		}
	}
}

tec_is_engineering_research_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_neutron_star
			solar_system = { # not optimal but oh well
				has_star_flag = abandoned_gateway
				has_star_flag = ruined_mega_shipyard_system
				has_star_flag = ruined_dyson_system
				has_star_flag = ruined_catapult_system
				has_star_flag = ruined_nexus_system
				has_star_flag = ruined_orbital_ring_system
				has_star_flag = ruined_sentry_system
				has_star_flag = ruined_ring_system
			}
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_is_neutron_type_star = yes
				"
			}
		}
	}
}


# ------------------------------------------------- Events
# --------------- Assimilations
	tec_has_total_assimilation = {
		optimize_memory
		OR = {
			# Counts robots and organics
			tec_has_all_species_total_assimilation = yes
			# Only organics
			tec_has_biological_total_assimilation = yes
			# Only psionics
			tec_has_psionic_total_assimilation = yes
		}
	}

	tec_has_all_species_total_assimilation = {
		optimize_memory
		OR = {
			# Pops into main synthetic species (total)
			has_country_flag = tec_synthetic_assimilation
			# Pops into replicants (total)
			has_country_flag = tec_replicant_assimilation
			# Pops into main species (debug)
			has_country_flag = tec_total_assimilation
		}
	}
	tec_has_biological_total_assimilation = {
		optimize_memory
		OR = {
			# Pops into main organic species (biological)
			has_country_flag = tec_genetic_assimilation
			# Pops into main organic species (biological)
			has_country_flag = tec_biopsionic_assimilation
			# Pops into main species (debug)
			has_country_flag = tec_total_assimilation
			# Bio pops into robots
			has_country_flag = tec_machine_encasing
		}
	}
	
	tec_has_psionic_total_assimilation = {
		optimize_memory
		OR = {
			# Psi pops into main organic species (ethereal)
			has_country_flag = tec_ethereal_assimilation
			has_country_flag = tec_psienergy_assimilation
		}
	}

	tec_has_ROBOT_into_MACHINE_assimilation = {
		optimize_memory
		OR = {	# Total assimilations
			has_country_flag = tec_replicant_assimilation
			has_country_flag = tec_genetic_assimilation
			has_country_flag = tec_synthetic_assimilation
			has_country_flag = tec_total_assimilation
		}
	}
# /

# planet
# doing this since a lot of clerks checks it
tec_is_variable_set_and_not_zero = {
	inline_script = {
		script = tec_type_hint
		variable = $VARIABLE$
	}

	is_variable_set = $VARIABLE$
	check_variable_arithmetic = {
		which = $VARIABLE$
		value != 0 
	}
}

tec_has_possible_job = {
	inline_script = {
		script = tec_type_hint
		job = $job$
	}

	OR = {
		has_forbidden_jobs = $job$
		has_available_jobs = $job$
	}
}

tec_can_reduce_job_further = {
	inline_script = {
		script = tec_type_hint
		job = $job$
	}
	OR = {
		num_assigned_jobs = { job = $job$ value > 0 }
		has_available_jobs = $job$
	}
}

tec_can_increase_job_further = {
	inline_script = {
		script = tec_type_hint
		job = $job$
	}
	OR = {
		has_forbidden_jobs = $job$
	}
}

# Machine processing

tec_has_local_machine_processing = {
	always = no
}

# Job checks

# scope: planet
tec_has_non_emigrant_pops_unemployed = {
	num_unemployed > 1
	OR = {
		free_building_slots > 0
		free_district_slots > 0
	}
}

tec_has_amenity_jobs_available = {
	if = {
		limit = {
			owner = { is_gestalt = no }
		}
		OR = {
			tec_has_possible_job = { job = entertainer }
			tec_has_possible_job = { job = duelist }
			tec_has_possible_job = { job = healthcare }
			tec_has_possible_job = { job = tec_cyborg_ripperdoc }
		}
	}
	else = {
		OR = {
			tec_has_possible_job = { job = maintenance_drone }
			tec_has_possible_job = { job = tec_spareparts_drone }
			tec_has_possible_job = { job = tec_hydrorelay_drone }
			tec_has_possible_job = { job = tec_cyborg_ripperdoc_drone }
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					tec_has_possible_job = { job = frame_maintenance_drone }
				"
			}
		}
	}
}


tec_has_crime_jobs_available = {
	OR = {
		if = {
			limit = {
				owner = { is_gestalt = no }
			}
			OR = {
				tec_has_possible_job = { job = enforcer }
				tec_has_possible_job = { job = telepath }
				tec_has_possible_job = { job = tec_transcendent }
				tec_has_possible_job = { job = tec_netrunner_enforcer }
				tec_has_possible_job = { job = tec_overseer }
				tec_has_possible_job = { job = tec_corpo_overseer }
			}
		}
		else = {
			OR = {
				tec_has_possible_job = { job = patrol_drone }
			}
		}
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_crime_jobs_available
		}
	}
}

tec_has_crime_job = {
	OR = {
		has_job = enforcer
		has_job = colonist
		has_job = telepath
		# evolved
		has_job = tec_transcendent
		has_job = tec_overseer
		has_job = tec_corpo_overseer
		has_job = tec_netrunner_enforcer
		# /
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_crime_job
		}
	}
}


tec_has_clerk_jobs_available = {
	OR = {
		tec_has_possible_job = { job = clerk }

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_clerk_jobs_available
		}
	}
}

tec_has_clerk_job = {
	OR = {
		has_job = clerk

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_clerk_job
		}
	}
}

tec_has_maintenance_drone_jobs_available = {
	OR = {
		tec_has_possible_job = { job = maintenance_drone }
		tec_has_possible_job = { job = tec_spareparts_drone }
		tec_has_possible_job = { job = tec_hydrorelay_drone }
		tec_has_possible_job = { job = tec_machine_admin_drone }
		tec_has_possible_job = { job = tec_hive_admin_drone }

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_maintenance_drone_jobs_available
		}
	}
}

tec_has_maintenance_drone_job = {
	OR = {
		has_job = maintenance_drone
		has_job = tec_spareparts_drone
		has_job = tec_hydrorelay_drone
		has_job = tec_machine_admin_drone
		has_job = tec_hive_admin_drone

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_maintenance_drone_job
		}
	}
}


tec_denies_crime_effects_job = {
	OR = {
		tec_has_crime_job = yes
		tec_has_synapse_job = yes
		tec_has_coordinator_job = yes
		tec_has_patrol_drone_job = yes
	}
}

tec_has_synapse_job = {
	OR = {
		has_job = synapse_drone
		has_job = tec_resonance_drone
		has_job = tec_network_drone
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_synapse_job
		}
	}
}

tec_has_coordinator_job = {
	OR = {
		has_job = coordinator
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_coordinator_job
		}
	}
}

tec_has_patrol_drone_job = {
	OR = {
		has_job = patrol_drone
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_patrol_drone_job
		}
	}
}

tec_has_priest_job = {
	OR = {
		has_job = high_priest
		has_job = priest
		has_job = death_priest
		has_job = mortal_initiate
		has_job = preacher
		has_job = low_tech_priest
		has_job = haruspex
		has_job = technophant
		# evolved
			has_job = tec_grand_occultist
			has_job = tec_ai_high_ordinator
			has_job = tec_minor_occultist
			has_job = tec_techno_priest
			has_job = tec_mecha_priest
			has_job = templar
			has_job = tec_transcendent
			has_job = tec_druid
		# /
		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_priest_job
		}
	}
}

tec_has_research_job = {
	OR = {
		has_job = researcher
		has_job = brain_drone
		has_job = calculator
		has_job = dimensional_portal_researcher
		has_job = dimensional_portal_researcher_gestalt
		has_job = space_time_anomaly_researcher
		has_job = space_time_anomaly_researcher_gestalt
		has_job = necromancer
		has_job = xeno_zoo_keeper
		has_job = head_researcher
		# Evolved vanilla added
		has_job = low_tech_researcher
		has_job = broken_shackles_scavenger
		has_job = archaeoengineers
		has_job = archaeo_drone
		has_job = archaeo_unit

		has_job = munitions_decommissioner
		has_job = munitions_decommissioning_unit
		has_job = munitions_decommissioning_drone

		has_job = astral_researcher
		has_job = astral_drone
		has_job = astral_unit

		has_job = astrometeorologist
		has_job = astrometeorologist_hive
		has_job = astrometeorologist_machine

		# rulers
		has_job = tec_grand_archivist
		has_job = tec_technocrat
		has_job = tec_grand_occultist
		has_job = tec_corpo_consultant
		has_job = tec_corpo_prospector
		has_job = tec_corpo_ecoprospector

		# specialists
		has_job = tec_minor_archivist
		has_job = tec_minor_occultist
		has_job = tec_geoengineer
		has_job = tec_xenobiologist
		has_job = tec_state_academic
		has_job = tec_shipyard_engineer
		has_job = tec_telecom_technician
		has_job = tec_planetdefense_technician
		has_job = tec_nanite_researcher
		# workers
		has_job = tec_labrat
		has_job = tec_hired_researcher
		# other
		has_job = gpm_tec_precursor_archaeologist_2
		has_job = gpm_tec_precursor_archaeologist_2_drone
		# drone
		has_job = tec_ecoresearcher_drone
		has_job = tec_shipyard_engineer_drone
		has_job = tec_prime_research_drone
		has_job = tec_hydrorelay_drone
		has_job = tec_nanite_researcher_drone

		# Add modded support

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_research_job
		}
	}
}

tec_has_soldier_job = {
	OR = {
		has_job = soldier
		has_job = necromancer
		has_job = tec_naval_operator
		has_job = tec_shipyard_engineer
		has_job = tec_shipyard_technician
		has_job = tec_mercenary
		has_job = tec_commander
		has_job = tec_necromonger
		#has_job = tec_corpo_parabellum
		#has_job = templar
		has_job = tec_hired_soldier
		has_job = low_tech_warrior

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_has_soldier_job
		}
	}
}


tec_is_ruler_pop_category = {
	OR = {
		is_pop_category = ruler
		is_pop_category = tec_hedonists	
	}
}

tec_has_ruler_job_category = {
	OR = {
		has_job_category = ruler
		has_job_category = tec_hedonists	
	}
}

tec_is_specialist_pop_category = {
	OR = {
		is_pop_category = specialist
	}
}
tec_has_specialist_job_category = {
	OR = {
		has_job_category = specialist
	}
}

tec_is_worker_pop_category = {
	OR = {
		is_pop_category = worker
		is_pop_category = tec_free_agent # considered worker for living standards
		is_pop_category = robot_servant
	}
}

tec_has_worker_job_category = {
	OR = {
		has_job_category = worker
		has_job_category = tec_free_agent # in case we add a job category for them with empathy gestalt rework and jobs
	}
}

tec_has_complex_drone_job_category = {
	OR = {
		has_job_category = complex_drone
		has_job_category = tec_brood_drone
		has_job_category = tec_prime_drone
	}
}

tec_has_simple_drone_job_category = {
	OR = {
		has_job_category = simple_drone
	}
}

# Paragons

# Scope: leader
tec_leader_is_at_max_skill = {
	check_variable_arithmetic = {
		which = trigger:has_skill
		value >= value:tec_max_leader_skill
	}
	has_skill = @tec_max_leader_skill_defines
}

# Scope: leader
tec_is_aiauth_councilor_node = {
	OR = {
		has_trait = leader_trait_tec_aiauth_node
		has_trait = leader_trait_tec_aiauth_ruler
	}
}

# Scope: leader
tec_is_aiauth_node = {
	OR = {
		has_trait = leader_trait_tec_aiauth_node
		has_trait = leader_trait_tec_aiauth_ruler
		has_trait = leader_trait_tec_aiauth_planetary_governing_node
	}
}

# Scope: leader
tec_is_aiauth_planetary_governing_node = {
	has_trait = leader_trait_tec_aiauth_planetary_governing_node
}

# Scope: leader
tec_leader_cannot_take_species_traits = {
	OR = {
		has_leader_flag = renowned_leader
		has_leader_flag = legendary_leader
		has_leader_flag = tec_no_species_traits
	}
}

tec_get_experiece_aiauth_node = {
	OR = {
		tec_leader_is_true_idle = no
		AND = {
			exists = owner
			owner = { has_policy_flag = policy_tec_aiauth_idle_share_policy_grow_idle }
		}
	}
}

tec_country_aiauth_has_enough_unity_to_fragment = {
	resource_stockpile_compare = {
		resource = unity
		value >= value:tec_aiauth_fragment_cost
	}

	resource_income_compare = {
		resource = sr_tec_ai_power
		value >= value:tec_aiauth_fragment_base_upkeep
	}
}

# This is used since leaders can be idle and in council 
# Scope: leader
tec_leader_is_true_idle = {
	is_idle = yes
	is_councilor = no
	is_ruler = no
}

# should_pay_for_leader_upkeep = { gamerule moved here
# Scope: leader
tec_should_pay_for_leader_upkeep = {
	NOR = {	# Gamerule moved here
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
			}
			is_councilor = yes
		}
		AND = {	# Caelum
			exists = owner
			owner = {
				tec_is_feudal_empire = yes
			}
			is_idle = no
		}

		has_leader_flag = marauder_merc_leader
		has_leader_flag = hired_admiral_merc_leader

		has_trait = leader_trait_spacebender
		has_leader_flag = should_not_have_upkeep
	}
}

# scope: leader
tec_leader_gets_starting_actions = {
	OR = {
		NOR = {
			has_leader_flag = renowned_leader
			has_leader_flag = legendary_leader
			has_leader_flag = tec_no_starting_actions
			[[flag] has_leader_flag = $flag$ ]
		}
		has_leader_flag = tec_force_starting_actions
	}
}

# scope: country
tec_country_leader_gets_starting_actions = {
	NOR = {
		has_country_flag = spawning_renowned_leader
		has_country_flag = tec_no_starting_actions
		[[flag] has_country_flag = $flag$ ]
	}
}

tec_leader_first_staring_actions_done = {
	has_leader_flag = tec_first_leader_handle_starting_modifiers_done
	NOT = {
		has_leader_flag = tec_force_starting_actions
	}
}


# for caching, checking all leaders is expensive
# scope: planet
tec_has_councilor = {
	exists = owner
	owner = {
		check_variable_arithmetic = {
			which = value:councilor_level|TYPE|$COUNCILOR$|
			value > 0
		}
	}
}

# only use on default/fallen empires, since caching
# $GT$ $GTE$ $EQ$ $LTE$ $LT$ $WHO$ $VALUE$
tec_has_opinion = {
	[[!GT]] [[!GTE]] [[!EQ]] [[!LTE]] [[!LT]]
	any_spynetwork = {
		exists = target
		target = {
			is_same_value = prev.$WHO$
		}
		is_variable_set = tec_cache_tec_opinion

		[[GT]
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value > $VALUE$
		}
		]

		[[GTE]
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value >= $VALUE$
		}
		]

		[[EQ]
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value = $VALUE$
		}
		]

		[[LTE]
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value <= $VALUE$
		}
		]

		[[LT]
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value < $VALUE$
		}
		]
	}
}

tec_their_opinion = {
	[[!GT]] [[!GTE]] [[!EQ]] [[!LTE]] [[!LT]]
	any_spynetwork = {
		exists = target
		target = {
			is_same_value = prev.$WHO$
		}
		is_variable_set = tec_cache_tec_their_opinion
		[[GT]
		check_variable_arithmetic = {
			which = tec_cache_tec_their_opinion
			value > $VALUE$
		}
		]

		[[GTE]
		check_variable_arithmetic = {
			which = tec_cache_tec_their_opinion
			value >= $VALUE$
		}
		]

		[[EQ]
		check_variable_arithmetic = {
			which = tec_cache_tec_their_opinion
			value = $VALUE$
		}
		]

		[[LTE]
		check_variable_arithmetic = {
			which = tec_cache_tec_their_opinion
			value <= $VALUE$
		}
		]

		[[LT]
		check_variable_arithmetic = {
			which = tec_cache_tec_their_opinion
			value < $VALUE$
		}
		]
	}
}

# only use on default/fallen empires, since caching
# GTE - >=
# GT - >
# EQ - =
# LT - <
# LTE - <=
# $GT$ $GTE$ $EQ$ $LTE$ $LT$ $WHO$ $EXCELLENT$ $GOOD$ $NEUTRAL$ $POOR$ $TERRIBLE$
tec_has_opinion_level = {
	[[!GT]] [[!GTE]] [[!EQ]] [[!LTE]] [[!LT]]
	[[!EXCELLENT]] [[!GOOD]] [[!NEUTRAL]] [[!POOR]] [[!TERRIBLE]]

	# we have to do this cause you cannot nest brackets xd

	any_spynetwork = {
		exists = target
		target = {
			is_same_value = prev.$WHO$
		}
		is_variable_set = tec_cache_tec_opinion_total

		# 750 - 3000
			inline_script = {
				script = conditional/tec_equal
				value = $EXCELLENT|no$
				equal = yes
				code = "
					[[GT]
					always = no
					]
					[[GTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 750
					}
					]
					[[EQ]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 750
					}
					]
					[[LTE]
					always = yes
					]
					[[LT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 750
					}
					]
				"
			}

		# 300 - 750
			inline_script = {
				script = conditional/tec_equal
				value = $GOOD|no$
				equal = yes
				code = "
					[[GT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 750
					}
					]
					[[GTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 300
					}
					]
					[[EQ]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 300
					}
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 750
					}
					]
					[[LTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 750
					}
					]
					[[LT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 300
					}
					]
				"
			}

		# -300 - 300
			inline_script = {
				script = conditional/tec_equal
				value = $NEUTRAL|no$
				equal = yes
				code = "
					[[GT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= 300
					}
					]
					[[GTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -300
					}
					]
					[[EQ]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -300
					}
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 300
					}
					]
					[[LTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < 300
					}
					]
					[[LT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -300
					}
					]
				"
			}

		# -750 - -300
			inline_script = {
				script = conditional/tec_equal
				value = $POOR|no$
				equal = yes
				code = "
					[[GT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -300
					}
					]
					[[GTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -750
					}
					]
					[[EQ]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -750
					}
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -300
					}
					]
					[[LTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -300
					}
					]
					[[LT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -750
					}
					]
				"
			}
		# -3000 - -750
			inline_script = {
				script = conditional/tec_equal
				value = $TERRIBLE|no$
				equal = yes
				code = "
					[[GT]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value >= -750
					}
					]
					[[GTE]
					always = yes
					]
					[[EQ]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -750
					}
					]
					[[LTE]
					check_variable_arithmetic = {
						which = tec_cache_tec_opinion_total
						value < -750
					}
					]
					[[LT]
					always = no
					]
				"
			}
		}

}

# scope: leader
tec_should_count_towards_leader_cap = {
	NOR = {
		is_ruler = yes
		leader_class = envoy
		check_variable_arithmetic = {
			which = value:tec_leader_not_count_towards_leader_cap_modifier_total
			value > 0
		}
		#AND = {	# Caelum - commented out but kept this
		#	owner = { is_gestalt = yes }
		#	is_councilor = yes
		#	# We count all rulers as well
		#	is_ruler = no
		#}
		#has_leader_flag = marauder_merc_leader
		is_hidden = yes
		has_leader_flag = hired_admiral_merc_leader
		has_leader_flag = legendary_leader
		has_trait = leader_trait_rift_warped
		AND = {
			has_trait_tier1or2 = { TRAIT = leader_trait_eager }
			has_skill < 4
		}
		#AND = {
		#	is_ruler = yes
		#	OR = {
		#		has_trait = leader_trait_ruler_machine_intelligence
		#		has_trait = leader_trait_ruler_hive_mind
		#	}
		#}
	}
}

tec_can_leader_get_council_trait = {
	OR = {
		AND = {
			exists = owner
			owner = { has_country_flag = tec_force_allow_all_traits }
		}
		AND = {
			exists = owner
			owner = { has_country_flag = tec_force_councilor_traits }
		}
		NOR = {
			AND = {
				exists = owner
				owner = { has_country_flag = tec_force_normal_traits }
			}
			AND = {
				exists = owner
				owner = { is_gestalt = yes }
				is_councilor = no
			}
			check_variable_arithmetic = {
				which = modifier:tec_leader_only_normal_traits
				value > 0
			}
		}
		# Caelum
		has_leader_flag = restored_node
		# 3.11
		has_leader_flag = renowned_leader
	}
	if = {
		limit = {
			exists = owner
		}
		owner = {
			is_crisis_faction = no
		}
	}
}

tec_can_leader_get_normal_trait = {
	OR = {
		AND = {
			exists = owner
			owner = { has_country_flag = tec_force_allow_all_traits }
		}
		AND = {
			exists = owner
			owner = { has_country_flag = tec_force_normal_traits }
		}
		NOR = {
			AND = {	# FORCED
				exists = owner
				owner = { has_country_flag = tec_force_councilor_traits }
			}
			check_variable_arithmetic = {
				which = modifier:tec_leader_only_councilor_traits
				value > 0
			}
			AND = {	# COUNCILOR
				OR = {
					is_councilor = yes
					# Caelum
					has_leader_flag = restored_node
				}
				exists = owner
				owner = {
					OR = {
						# short_circuit
						check_variable_arithmetic = {
							which = modifier:tec_councilor_only_councilor_traits
							value > 0
						}
						# gestalts
						is_gestalt = yes
					}
				}
			}
			AND = {	# RULER
				OR = {
					AND = {
						has_global_flag = game_started
						is_ruler = yes
						exists = owner
						owner = {
							is_autocracy = yes
						}
					}
					is_heir = yes
				}
				exists = owner
				owner = {
					# short_circuit
					check_variable_arithmetic = {
						which = modifier:tec_ruler_only_councilor_traits
						value > 0
					}
				}
			}
		}
	}
}

tec_can_leader_get_subclass_trait = {
	NAND = {
		exists = owner
		owner = { is_gestalt = yes }
		OR = {
			is_councilor = yes
			# Caelum
			has_leader_flag = restored_node
		}
	}
	NAND = {
		exists = owner
		owner = { tec_is_aiauth_empire = yes }
		tec_is_aiauth_councilor_node = yes
	}
	has_any_subclass = no
}

tec_can_leader_get_destiny_trait = {
	NAND = {
		exists = owner
		owner = { is_gestalt = yes }
	}
	exists = owner
	owner = {
		is_crisis_faction = no
	}
}

tec_always_from_param = {
	[[PARAM] always = yes ]
	[[!PARAM] always = no ]
}

tec_should_leader_be_assimilated = {
	NOR = {
		has_leader_flag = renowned_leader
		has_leader_flag = legendary_leader
		has_leader_flag = tec_do_not_assimilate
	}
}

tec_should_leader_change_portrait_on_assimilation = {
	NOR = {
		is_gestalt_node = yes
		AND = {
			tec_is_aiauth_node = yes
			is_ruler = no
		}
		has_leader_flag = tec_do_not_change_portrait_on_assimilation
	}
}

tec_is_mega_shipyard = {
	OR = {
		is_megastructure_type = mega_shipyard_1
		is_megastructure_type = mega_shipyard_2
		is_megastructure_type = mega_shipyard_3
		is_megastructure_type = mega_shipyard_restored
	}
}

tec_leader_is_gestalt = {
	OR = {
		has_ethic = ethic_gestalt_consciousness
		has_ethic = ethic_gestalt_empathy
		has_ethic = ethic_gestalt_apathy
		has_ethic = ethic_gestalt_overconsumption
		has_ethic = ethic_gestalt_preservation
		has_ethic = ethic_gestalt_introspective
		has_ethic = ethic_gestalt_extrospective
	}
}
tec_leader_already_exists_destiny_in_empire = {
	if = {
		limit = {
			exists = owner
			has_global_flag = tec_block_same_councilor_destiny_traits
		}
		owner = {
			any_owned_leader = {
				has_trait = $trait$
			}
		}
	} else = {
		always = yes
	}
}

tec_leader_trait_already_exists_in_empire = {
	inline_script = {
		script = tec_type_hint
		leader_trait = $trait$
		leader_trait_tier = $tiers$
	}

	owner = {
		any_owned_leader = {
			_tec_leader_trait_already_exists_in_empire = {
				trait = $trait$
				tiers$tiers$ = yes
			}
		}
	}
}

_tec_leader_trait_already_exists_in_empire = {
	inline_script = {
		script = tec_type_hint
		leader_trait = $trait$
		bool = $tiers1$
		bool = $tiers2$
		bool = $tiers3$
	}
	owner = {
		any_owned_leader = {
			[[tiers1]
				has_trait = $trait$
			]
			[[tiers2]
				has_trait_tier1or2 = {
					TRAIT = $trait$
				}
			]
			[[tiers3]
				has_trait_tier1or2or3 = {
					TRAIT = $trait$
				}
			]
		}
	}
}

tec_planet_has_swappable_industrial_district = {
	NOR = {
		tec_has_standard_industrial_district = yes
		OR = {
			uses_district_set = city_world
			tec_pd_arcology_arms_trigger = yes
		}
		tec_uses_habitat_districts = yes
		tec_uses_ringworld_districts = yes
		tec_uses_elysium_districts = yes
		tec_is_ecoworld = yes
	}
}

# Composer

tec_country_composer_civics_like = {
	OR = {
		tec_is_terraformer_empire = yes
		is_catalytic_empire = yes
		tec_is_idyllic_bloom_empire = yes
		has_toxic_baths = yes
		# Evolved
		tec_is_genetic_ascendancy_empire = yes
	}
}

tec_country_composer_civics_dislike = {
	OR = {
		is_relentless_industrialist_empire = yes
		tec_can_enact_overstrip = yes
	}
}

tec_country_composer_ethics_like = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]ecologist
		has_ethic = ethic_[[fanatic]fanatic_]xenophile
	}
}

tec_country_composer_ethics_dislike = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]xenophobe
		has_ethic = ethic_[[fanatic]fanatic_]industrialist
	}
}

tec_country_composer_traditions_like = {
	OR = {
		has_tradition = tr_adaptability_finish
		has_tradition = tr_tec_outreach_finish
	}
}

tec_country_composer_aps_like = {
	OR = {
		has_ascension_perk = ap_consecrated_worlds
		has_ascension_perk = ap_xeno_compatibility
		has_ascension_perk = ap_mastery_of_nature
		has_ascension_perk = ap_tec_biopsionic
	}
}

tec_country_composer_other_like = {
	NOT = {
		any_owned_planet = {
			tec_has_clinic_buildings = yes
		}
	}
}

# Eater

tec_country_eater_civics_like = {
	OR = {
		has_civic = civic_citizen_service
		has_civic = civic_fanatic_purifiers
		has_civic = civic_distinguished_admiralty
		has_civic = civic_naval_contractors
		has_civic = civic_barbaric_despoilers
		has_civic = civic_private_military_companies
		# Evolved
		has_civic = civic_tec_regular_stratocracy
		has_civic = civic_tec_regular_war_lords
		has_civic = civic_tec_regular_war_engineers
		has_civic = civic_tec_regular_secured_domain
		has_civic = civic_tec_corporate_parabellum_corp
		has_civic = civic_tec_corporate_competition_purifiers
		has_civic = civic_tec_corporate_militarybureau
		has_civic = civic_tec_corporate_navaltraders
		has_civic = civic_tec_regular_naval_traditions
		has_civic = civic_tec_regular_private_militaries
		has_civic = civic_crusader_spirit
		has_civic = civic_crusader_spirit_corporate
	}
}

tec_country_eater_civics_dislike = {
	OR = {
		has_civic = civic_inwards_perfection
		tec_is_agrarian_idyll_empire = yes
		# Evolved
		tec_has_land_of_plenty = yes
		has_civic = civic_tec_regular_peacekeepers
	}
}

tec_country_eater_ethics_like = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]militarist
	}
}

tec_country_eater_ethics_dislike = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]pacifist
	}
}

tec_country_eater_traditions_like = {
	OR = {
		has_tradition = tr_supremacy_finish
		has_tradition = tr_tec_might_finish
	}
}

tec_country_eater_aps_like = {
	OR = {
		has_ascension_perk = ap_galactic_force_projection
		has_ascension_perk = ap_interstellar_dominion
		has_ascension_perk = ap_become_the_crisis
	}
}

tec_country_eater_other_like = {
	is_at_war = yes
}

# Instruments

tec_country_instrument_civics_like = {
	OR = {
		has_civic = civic_aristocratic_elite
		has_civic = civic_feudal_realm
		is_pleasure_seeker = yes
		has_toxic_baths = yes
		tec_has_slaver_civic = yes

		# Evolved
		tec_has_land_of_plenty = yes
		tec_is_chemical_barons_empire = yes
		tec_is_hoarder_empire = yes
		has_civic = civic_tec_regular_consumerism
		has_civic = civic_tec_regular_immutable_hierarchy
	}
}

tec_country_instrument_civics_dislike = {
	OR = {
		tec_is_shared_burden_empire = yes
		# Evolved
		tec_is_worker_coop_empire = yes
		has_civic = civic_tec_regular_asceticism
		has_civic = civic_tec_regular_syndical
		has_civic = civic_tec_regular_social_prosperity
	}
}

tec_country_instrument_ethics_like = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]authoritarian
		has_ethic = ethic_[[fanatic]fanatic_]elitist
	}
}

tec_country_instrument_ethics_dislike = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]egalitarian
		has_ethic = ethic_[[fanatic]fanatic_]pluralist
	}
}

tec_country_instrument_traditions_like = {
	OR = {
		has_tradition = tr_domination_finish
		has_tradition = tr_tec_control_finish
	}
}

tec_country_instrument_aps_like = {
	OR = {
		has_ascension_perk = ap_shared_destiny
		has_ascension_perk = ap_imperial_prerogative
		has_ascension_perk = ap_tec_influential
	}
}

tec_country_instrument_other_like = {
	OR = {
		is_at_war = no
		ruler = {
			has_trait_tier1or2 = { TRAIT = leader_trait_substance_abuser }
		}
		any_owned_planet = {
			is_colony = yes
			has_designation = col_resort
		}
	}
}

# whisperers

tec_country_whisperers_civics_like = {
	OR = {
		has_civic = civic_cutthroat_politics
		has_civic = civic_technocracy
		is_scavenger = yes
		has_civic = civic_criminal_heritage
		has_civic = civic_shadow_council
		# Evolved
		#has_civic = civic_tec_regular_cyber_dictatorship
		has_civic = civic_tec_regular_cult_personality
		has_civic = civic_tec_regular_researchers_labrats
		has_civic = civic_tec_regular_scientific_belief
		has_civic = civic_tec_regular_propagandistic
		has_civic = civic_tec_regular_occultist
	}
}

tec_country_whisperers_civics_dislike = {
	OR = {
		has_civic = civic_inwards_perfection
		has_civic = civic_tec_regular_archivist
		has_civic = civic_tec_regular_universalism
		tec_is_spiritual_seekers = yes
	}
}

tec_country_whisperers_ethics_like = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]materialist
		has_ethic = ethic_[[fanatic]fanatic_]competitive
	}
}

tec_country_whisperers_ethics_dislike = {
	inline_script = {
		script = tec_type_hint
		bool = $fanatic$
	}
	OR = {
		has_ethic = ethic_[[fanatic]fanatic_]spiritualist
		has_ethic = ethic_[[fanatic]fanatic_]cooperative
	}
}

tec_country_whisperers_traditions_like = {
	OR = {
		has_tradition = tr_subterfuge_finish
		has_tradition = tr_discovery_finish
		has_tradition = tr_tec_invention_finish
	}
}

tec_country_whisperers_aps_like = {
	OR = {
		has_ascension_perk = ap_enigmatic_engineering
		has_ascension_perk = ap_technological_ascendancy
		has_ascension_perk = ap_tec_influential
	}
}

tec_country_whisperers_other_like = {
	any_envoy = {
		has_envoy_task = {
			task = spy_network
		}
	}
}



tec_ship_is_corvette = {
	OR = {
		is_ship_size = corvette
		is_ship_size = crisis_corvette
		is_ship_size = offspring_corvette
		is_ship_size = frigate
	}
}

tec_ship_is_destroyer = {
	OR = {
		is_ship_size = destroyer
		is_ship_size = offspring_destroyer
		is_ship_size = crisis_destroyer
	}
}

tec_ship_is_cruiser = {
	OR = {
		is_ship_size = cruiser
		is_ship_size = offspring_cruiser
		is_ship_size = offspring_cruiser
	}
}

tec_ship_is_battleship = {
	OR = {
		is_ship_size = battleship
		is_ship_size = offspring_battleship
	}
}

tec_ship_is_artilery = {
	design = {
		OR = {
			has_role = artillery
			has_role = artillery_stealth
		}
	}
}

tec_ship_is_carrier = {
	design = {
		OR = {
			has_role = carrier
			has_role = carrier_stealth
		}
	}
}

tec_ship_is_explosive_focused = {
	OR = {
		design = {
			OR = {
				has_role = explosive
				has_role = explosive_stealth
			}
		}
		is_ship_size = frigate
	}
}

tec_ship_is_gunship = {
	design = {
		OR = {
			has_role = gunship
			has_role = gunship_stealth
		}
	}
}

tec_can_make_trade_federation = {
	OR = {
		custom_tooltip = {
			fail_text = civic_tooltip_competitive
			is_competitive = yes
		}
		is_megacorp = yes
		tec_is_trade_gestalt = yes
		custom_tooltip = {
			fail_text = mercantile_traditions_completed
			has_active_tradition = tr_mercantile_federations_finish
		}
	}
	custom_tooltip = {
		fail_text = requires_actor_not_barbaric_despoilers
		NOT = { has_valid_civic = civic_barbaric_despoilers }
	}
}

tec_can_make_military_federation = {
	OR = {
		custom_tooltip = {
			fail_text = civic_tooltip_militarist
			is_militarist = yes
		}
		has_valid_civic = civic_hive_strength_of_legions
		has_valid_civic = civic_machine_warbots
		has_valid_civic = civic_tec_machine_warform_cluster
		custom_tooltip = {
			fail_text = unyielding_traditions_completed
			has_active_tradition = tr_unyielding_federations_finish
		}
	}
}

tec_can_make_hegemony_federation = {
	OR = {
		custom_tooltip = {
			fail_text = civic_tooltip_authoritarian
			is_authoritarian = yes
		}
		has_civic = civic_machine_servitor
		has_civic = civic_tec_hive_brood_overminds
		custom_tooltip = {
			fail_text = domination_traditions_completed
			has_active_tradition = tr_domination_federations_finish
		}
	}
}

tec_can_make_spiritualist_federation = {
	OR = {
		custom_tooltip = {
			fail_text = civic_tooltip_spiritualist
			is_spiritualist = yes
		}
		custom_tooltip = {
			fail_text = harmony_traditions_completed
			has_active_tradition = tr_harmony_federations_finish
		}
	}
	custom_tooltip = {
		fail_text = requires_actor_not_barbaric_despoilers
		NOT = { has_valid_civic = civic_barbaric_despoilers }
	}
}

tec_can_make_research_federation = {
	OR = {
		custom_tooltip = {
			fail_text = civic_tooltip_materialist
			is_materialist = yes
		}
		is_machine_empire = yes
		tec_is_cyberhive = yes
		tec_is_aiauth_empire = yes
		has_valid_civic = civic_hive_natural_neural_network
		custom_tooltip = {
			fail_text = discovery_traditions_completed
			has_active_tradition = tr_discovery_federations_finish
		}
	}
	custom_tooltip = {
		fail_text = requires_actor_not_barbaric_despoilers
		NOT = { has_valid_civic = civic_barbaric_despoilers }
	}
}

# yes i know i simplified, but my god, who decided this was a good idea ?!?!
# this event was check for every pop against every other pop
# Added also the check for kinship civic in pop categories...
# we can technically move these back there if those checks remain cause it will only happen
# in one empire or so, but better net, less calculations the better

tec_planet_selective_kinship_likes = {
	[[cached]
		has_planet_flag = tec_cache_tec_planet_selective_kinship_likes
	]
	[[!cached]
		any_owned_pop = {
			NOT = { is_same_species = owner }
			is_same_species_class = owner
		}
	]
}

tec_planet_selective_kinship_hates = {
	[[cached]
		has_planet_flag = tec_cache_tec_planet_selective_kinship_likes
	]
	[[!cached]
		any_owned_pop = {
			NOT = { is_same_species_class = owner }
		}
	]
}

tec_pop_under_worker_ownership = {
	exists = owner
	OR = {
		has_living_standard = {
			country = owner
			type = living_standard_worker_ownership
		}
		has_living_standard = {
			country = owner
			type = living_standard_tec_shared_ownership
		}
	}
}

tec_blocks_regular_designations = {
	OR = {
		is_special_colony_type = yes
		is_planet_class = pc_nanotech
		uses_district_set = cosmogenesis_world

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_blocks_regular_designations
		}
	}
}

tec_blocks_urban_designations = {
	OR = {
		uses_district_set = machine_world
		uses_district_set = hive_world
		uses_district_set = city_world
		tec_uses_ringworld_districts = yes
		uses_district_set = habitat
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				tec_is_pd_nonconventional_world = yes
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_blocks_urban_designations
		}
	}
}

tec_blocks_rural_designations = {
	OR = {
		uses_district_set = city_world
		tec_uses_ringworld_districts = yes
		uses_district_set = habitat
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				tec_is_pd_nonconventional_world = yes
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_blocks_rural_designations
		}
	}
}

tec_blocks_industrial_designations = {
	OR = {
		uses_district_set = city_world
		uses_district_set = machine_world
		uses_district_set = hive_world
		uses_district_set = habitat
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				tec_is_pd_nonconventional_world = yes
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_blocks_industrial_designations
		}
	}
}

tec_blocks_non_industrial_designations = {
	OR = {
		uses_district_set = city_world
		uses_district_set = habitat
		tec_uses_ringworld_districts = yes

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = tec_blocks_non_industrial_designations
		}
	}
}

tec_pop_generates_crime_trigger = {
	[[cached]
		has_pop_flag = tec_cache_tec_pop_generates_crime_trigger
	]
	[[!cached]
		is_sapient = yes
		NOT = { tec_is_non_sapient_robot = { cached = yes } }
		NOT = { tec_is_non_sapient_bioservant = { cached = yes } }
		is_being_assimilated = no
	]

}

tec_can_vote_in_democratic_election_trigger = {
	[[cached]
		has_pop_flag = tec_cache_tec_can_vote_in_democratic_election_trigger
	]
	[[!cached]
		has_citizenship_rights = yes
		is_sapient = yes
		is_enslaved = no
		is_being_purged = no
	]
}

tec_species_in_country_other_are_free_xenos = {
	inline_script = {
		script = tec_type_hint
		country_scope = $country$
	}
	[[cached]
		has_species_flag = tec_cache_tec_species_in_country_other_are_free_xenos@$country$
	]
	[[!cached]
		$country$ = {
			any_owned_pop = {
				not = { is_same_species = prevprev }
				is_enslaved = no
				is_being_purged = no
				is_sapient = yes
				is_robot_pop = no
			}
		}
	]
}

tec_planet_prosperity_gospel_check_trigger = {
	exists = owner
	OR = {
		owner = { has_valid_civic = civic_gospel_of_the_masses }
		AND = {
			has_branch_office = yes
			branch_office_owner = { has_valid_civic = civic_gospel_of_the_masses }
		}
	}
}


tec_planet_centrality_is_core = {
	OR = {
		AND = {
			exists = sector
			sector = {
				has_sector_type = core_sector
			}
		}
		AND = {
			exists = leader
			leader = {
				leader_class = official
			}
		}
	}
}