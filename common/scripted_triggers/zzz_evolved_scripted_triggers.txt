
# ETHIC TRIGGERS
	is_socialism = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_socialism
			has_ethic = ethic_socialism
			
			# has_ethic = @ethic_cooperative
			# has_ethic = @ethic_fanatic_cooperative
		}
	}

	is_capitalism = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_capitalism
			has_ethic = ethic_capitalism
			
			# has_ethic = @ethic_competitive
			# has_ethic = @ethic_fanatic_competitive
		}
	}

	is_ecologist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_green
			has_ethic = ethic_green

			# has_ethic = @ethic_ecocentric
			# has_ethic = @ethic_fanatic_ecocentric
		}
	}

	is_industrialist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_industrial
			has_ethic = ethic_industrial
			
			# has_ethic = @ethic_anthropocentric
			# has_ethic = @ethic_fanatic_anthropocentric
		}
	}

	is_elitist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_elitist 
			has_ethic = ethic_elitist 
		}
	}

	is_pluralist = {
		optimize_memory
		OR = {
			has_ethic = ethic_fanatic_pluralist 
			has_ethic = ethic_pluralist 
		}
	}

	# Compat/Rename
	is_anthropocentric = {
		optimize_memory
		is_industrialist = yes
	}
	
	is_ecocentric = {
		optimize_memory
		is_ecologist = yes
	}

	is_green = { # ugh added for consistency. rodah plox let use rename all of them and rip the bandage
		optimize_memory
		is_ecologist = yes 
	}

	is_industrial = {
		optimize_memory
		is_industrialist = yes
	}
	
	is_competitive = {
		optimize_memory
		is_capitalism = yes
	}
	
	is_cooperative = {
		optimize_memory
		is_socialism = yes
	}
# /

# Leader Trigger
	tec_produces_unity_from_leaders = {		# Unity from ALL leaders
		always = no
	}

	tec_removes_unity_upkeep_from_all_leaders = {		# Upkeep from ALL leaders
		OR = {
			has_valid_civic = civic_feudal_realm

			# Paragon
			has_valid_civic = civic_hive_upkeep_twister
			has_valid_civic = civic_machine_upkeep_twister
		}
	}

	tec_add_cg_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = yes
		}
		switch = {
			trigger = leader_class
			governor = {
				owner = {
					OR = {
						tec_produces_unity_from_governors = yes
						tec_produces_research_from_governors = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			admiral = {
				owner = {
					OR = {
						tec_produces_unity_from_admirals = yes
					}
				}
			}
			general = {
				owner = {
					tec_produces_unity_from_generals = yes
				}
			}
			default = {
				always = no
			}
		}
	}

	tec_add_energy_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = no
			OR = {
				tec_is_cyberhive = yes
				is_machine_empire = yes
			}
		}
		switch = {
			trigger = leader_class
			governor = {
				owner = {
					OR = {
						tec_produces_unity_from_governors = yes
						tec_produces_research_from_governors = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			admiral = {
				owner = {
					OR = {
						tec_produces_unity_from_admirals = yes
					}
				}
			}
			general = {
				owner = {
					tec_produces_unity_from_generals = yes
				}
			}
			default = {
				always = no
			}
		}
	}
	tec_add_minerals_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = yes
			is_machine_empire = no
			tec_is_cyberhive = no
		}
		switch = {
			trigger = leader_class
			governor = {
				owner = {
					OR = {
						tec_produces_unity_from_governors = yes
						tec_produces_research_from_governors = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			admiral = {
				owner = {
					OR = {
						tec_produces_unity_from_admirals = yes
					}
				}
			}
			general = {
				owner = {
					tec_produces_unity_from_generals = yes
				}
			}
			default = {
				always = no
			}
		}
	}
	tec_add_food_upkeep_to_leaders = {
		is_idle = no
		exists = owner
		owner = {
			is_regular_empire = no
			is_lithoid_empire = no
			is_machine_empire = no
			tec_is_cyberhive = no
		}
		switch = {
			trigger = leader_class
			governor = {
				owner = {
					OR = {
						tec_produces_unity_from_governors = yes
						tec_produces_research_from_governors = yes
					}
				}
			}
			scientist = {
				owner = {
					OR = {
						tec_produces_unity_from_scientists = yes
						tec_produces_research_from_scientists = yes
					}
				}
			}
			admiral = {
				owner = {
					OR = {
						tec_produces_unity_from_admirals = yes
					}
				}
			}
			general = {
				owner = {
					tec_produces_unity_from_generals = yes
				}
			}
			default = {
				always = no
			}
		}
	}

	# Governors
	tec_removes_unity_upkeep_from_governors = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_executive_committee
			has_valid_civic = civic_tec_regular_divine_circle

			has_valid_civic = civic_tec_corporate_flagshipbureau

			has_valid_civic = civic_hive_divided_attention
			has_valid_civic = civic_tec_hive_myoneural
		}
	}

	tec_produces_energy_from_governors = {
		always = no
	}
	tec_produces_unity_from_governors = {
		OR = {
			has_valid_civic = civic_tec_regular_executive_committee
			has_valid_civic = civic_tec_regular_divine_circle
			has_valid_civic = civic_tec_corporate_flagshipbureau

			has_valid_civic = civic_hive_divided_attention
		}
	}
	tec_produces_research_from_governors = {
		has_valid_civic = civic_tec_hive_myoneural
	}

	# Scientists
	tec_is_head_researcher = {
		OR = {
			is_councilor_type = councilor_research
			is_councilor_type = councilor_gestalt_scientist
		}
	}

	tec_removes_unity_upkeep_from_scientists = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_research_council
			has_valid_civic = civic_tec_regular_scientific_belief

			has_valid_civic = civic_tec_corporate_researchbureau
			has_valid_civic = civic_tec_corporate_innovative

			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}

	tec_produces_energy_from_scientists = {
		always = no
	}

	tec_produces_unity_from_scientists = {
		always = no
	}
	tec_produces_scaled_unity_from_scientists = {
		OR = {
			has_valid_civic = civic_tec_regular_scientific_belief
			has_valid_civic = civic_tec_corporate_innovative	
			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}

	tec_produces_research_from_scientists = {
		always = no
	}
	tec_produces_scaled_research_from_scientists = {
		OR = {
			has_valid_civic = civic_tec_regular_research_council
			has_valid_civic = civic_tec_corporate_researchbureau	
			has_valid_civic = civic_tec_hive_anaxiomatic
		}
	}

	# Admirals
	tec_removes_unity_upkeep_from_admirals = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_military_council

			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_hive_percussive
		}
	}

	tec_produces_energy_from_admirals = {
		OR = {
			always = no
		}
	}

	tec_produces_unity_from_admirals = {
		always = no
	}
	tec_produces_scaled_unity_from_admirals = {
		OR = {
			has_valid_civic = civic_tec_regular_military_council
			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_corporate_militarybureau

			has_valid_civic = civic_tec_hive_percussive
		}
	}

	tec_produces_research_from_admirals = {
		always = no
	}
	tec_produces_scaled_research_from_admirals = {
		always = no
	}

	# Generals
	tec_removes_unity_upkeep_from_generals = {
		OR = {
			has_valid_civic = civic_feudal_realm
			has_valid_civic = civic_tec_regular_military_council
			has_valid_civic = civic_tec_corporate_militarybureau
		}
	}

	tec_produces_energy_from_generals = {
		OR = {
			always = no
		}
	}

	tec_produces_unity_from_generals = {
		OR = {
			always = no	# Exploity 
		}
	}

	tec_produces_research_from_generals = {
		OR = {
			always = no	# Exploity 
		}
	}


	tec_provides_1_level_leaders = {		# Leader levels
		always = no
	}
	tec_provides_2_level_leaders = {
		always = no
	}

	tec_provides_2_level_governors = {
		always = no
	}
	tec_provides_2_level_scientists = {
		always = no
	}
	tec_provides_2_level_admirals = {
		always = no
	}
	tec_provides_2_level_generals = {
		always = no
	}

	tec_aiauth_swaps_all_leaders = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_all_leaders
			has_country_flag = tec_test_aiauth
		}
	}

	tec_aiauth_swaps_leader_governors = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_governors
		}
	}

	tec_aiauth_swaps_leader_researchers = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_researchers
		}
	}

	tec_aiauth_swaps_leaders_militars = {	# self descriptive
		OR = {
			#has_valid_civic = civic_tec_ai_leaders
			has_country_flag = tec_test_aiauth_swaps_militars
		}
	}
# /

# FEATURE TRIGGERS
# ---------------------------------------------------
	tec_has_improved_designations = {	# Planet ap path
		OR = {
			always = no
		}
	}

	tec_has_statecraft_planet_designations = {	# Statecraft
		OR = {
			always = no
		}
	}
# /

# T R A D I T I O N S
# -------------- MERGERS ----------------
	tec_can_adopt_outreach = {
		OR = {
			has_tradition = tr_expansion_finish
		}
	}

	tec_can_adopt_control = {
		OR = {
			has_tradition = tr_domination_finish
			has_tradition = tr_subterfuge_finish
		}
	}

	tec_can_adopt_artifice = {
		OR = {
			has_tradition = tr_prosperity_finish
			has_tradition = tr_mercantile_finish
		}
	}

	tec_can_adopt_balance = {
		always = no
		OR = {
			has_tradition = tr_harmony_finish
			has_tradition = tr_synchronicity_finish
			has_tradition = tr_aptitude_finish
		}
	}

	tec_can_adopt_might = {
		OR = {
			has_tradition = tr_supremacy_finish
			has_tradition = tr_unyielding_finish
		}
	}

	tec_can_adopt_statecraft = {
		always = no
		OR = {
			has_tradition = tr_diplomacy_finish
			has_tradition = tr_versatility_finish
			has_tradition = tr_adaptability_finish
			has_tradition = tr_statecraft_finish
		}
	}

	tec_can_adopt_invention = {
		OR = {
			has_tradition = tr_discovery_finish
		}
	}



	tec_has_outreach_traditions = {
		has_tradition = tr_tec_outreach_adopt
	}
	tec_has_outreach_traditions_finished = {
		has_tradition = tr_tec_outreach_finish
	}

	tec_has_control_traditions = {
		has_tradition = tr_tec_control_adopt
	}
	tec_has_control_traditions_finished = {
		has_tradition = tr_tec_control_finish
	}

	tec_has_artifice_traditions = {
		has_tradition = tr_tec_artifice_adopt
	}
	tec_has_artifice_traditions_finished = {
		has_tradition = tr_tec_artifice_finish
	}

	tec_has_balance_traditions = {
		has_tradition = tr_tec_balance_adopt
	}
	tec_has_balance_traditions_finished = {
		has_tradition = tr_tec_balance_finish
	}

	tec_has_might_traditions = {
		has_tradition = tr_tec_might_adopt
	}
	tec_has_might_traditions_finished = {
		has_tradition = tr_tec_might_finish
	}

	tec_has_statecraft_traditions = {
		has_tradition = tr_tec_statecraft_adopt
	}
	tec_has_statecraft_traditions_finished = {
		has_tradition = tr_tec_statecraft_finish
	}

	tec_has_invention_traditions = {
		has_tradition = tr_tec_invention_adopt
	}
	tec_has_invention_traditions_finished = {
		has_tradition = tr_tec_invention_finish
	}

	tec_has_governance_traditions = {
		always = no
	}
	tec_has_governance_traditions_finished = {
		always = no
	}

	tec_has_megalomania_traditions = {
		always = no
	}
	tec_has_megalomania_traditions_finished = {
		always = no
	}

		# and these for vanilla
	tec_has_expansion_traditions = {
		has_tradition = tr_expansion_adopt
	}
	tec_has_expansion_traditions_finished = {
		has_tradition = tr_expansion_finish
	}

	tec_has_domination_traditions = {
		has_tradition = tr_domination_adopt
	}
	tec_has_domination_traditions_finished = {
		has_tradition = tr_domination_finish
	}

	tec_has_subterfuge_traditions = {
		has_tradition = tr_subterfuge_adopt
	}
	tec_has_subterfuge_traditions_finished = {
		has_tradition = tr_subterfuge_finish
	}

	tec_has_prosperity_traditions = {
		has_tradition = tr_prosperity_adopt
	}
	tec_has_prosperity_traditions_finished = {
		has_tradition = tr_prosperity_finish
	}

	tec_has_mercantile_traditions = {
		has_tradition = tr_mercantile_adopt
	}
	tec_has_mercantile_traditions_finished = {
		has_tradition = tr_mercantile_finish
	}

	tec_has_harmony_traditions = {
		OR = {
			has_tradition = tr_harmony_adopt
			has_tradition = tr_synchronicity_adopt
		}
	}
	tec_has_harmony_traditions_finished = {
		OR = {
			has_tradition = tr_harmony_finish
			has_tradition = tr_synchronicity_finish
		}
	}

	tec_has_supremacy_traditions = {
		has_tradition = tr_supremacy_adopt
	}
	tec_has_supremacy_traditions_finished = {
		has_tradition = tr_supremacy_finish
	}

	tec_has_unyielding_traditions = {
		has_tradition = tr_unyielding_adopt
	}
	tec_has_unyielding_traditions_finished = {
		has_tradition = tr_unyielding_finish
	}

	tec_has_diplomacy_traditions = {
		OR = {
			has_tradition = tr_diplomacy_adopt
			has_tradition = tr_adaptability_adopt
		}
	}
	tec_has_diplomacy_traditions_finished = {
		OR = {
			has_tradition = tr_diplomacy_finish
			has_tradition = tr_adaptability_finish
		}
	}

	tec_has_discovery_traditions = {
		has_tradition = tr_discovery_adopt
	}
	tec_has_discovery_traditions_finished = {
		has_tradition = tr_discovery_finish
	}
# /

# ASCENSION PATHS
# -------------- MAIN PATHS ----------------
 # Psionic
	tec_has_psionic_ascension_path = {
		OR = {
			has_ascension_perk = ap_mind_over_matter		# Psi AP
			tec_has_psionic_ascension_origin = yes
		}
	}
	tec_has_psionic_ascension_origin = {
		OR = {
			has_origin = origin_shroudwalker_apprentice		# Origin
			has_origin = origin_tec_psionicspecies			# Origin
			# PD
			has_origin = @origin_pd_shroud
			# Origins Expanded
			has_origin = @origin_psionic_abilities
			# Origins Extended
			has_origin = @originsextended_psi
		}
	}

	tec_has_psionic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_psionics_finish 
		}
	}

	tec_has_any_psionic_ascension_path = {
		OR = {
			tec_has_psionic_ascension_path = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_cyberpsionic
		}
	}

	tec_has_any_psionic_ascension_finished = {
		OR = {
			tec_has_psionic_ascension_finished = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_cyberpsionic
		}
	}
 # /

 # Genetic
	tec_has_genetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_engineered_evolution
			tec_has_genetic_ascension_origin = yes
		}
	}
	tec_has_genetic_ascension_origin = {
		OR = {
			has_origin = origin_tec_genetics
		}
	}

	tec_has_genetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_genetics_finish 
		}
	}

	tec_has_any_genetic_ascension_path = {
		OR = {
			tec_has_genetic_ascension_path = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_has_any_genetic_ascension_finished = {
		OR = {
			tec_has_genetic_ascension_finished = yes
			has_ascension_perk = ap_tec_biopsionic
			has_ascension_perk = ap_tec_replicant
		}
	}
 # /

 # Cybernetic
	tec_has_cybernetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_the_flesh_is_weak		# Cyborg ap
			tec_has_cybernetic_ascension_origin = yes
		}
	}
	tec_has_cybernetic_ascension_origin = {
		OR = {
			has_origin = origin_tec_cyborgs					# Origin
			# Origins Extended
			has_origin = @originsextended_cyb
		}
	}

	tec_has_cybernetic_ascension_path_exception = {
		OR = {
			has_valid_civic = civic_machine_assimilator		# Assimilators can take cybernetic
			tec_is_cyberhive = yes							# Cyberhives 
		}
	}

	tec_has_cybernetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_cybernetics_finish 
			has_tradition = tr_cybernetics_assimilator_finish 
		}
	}

	tec_has_any_cybernetic_ascension_path = {
		OR = {
			tec_has_cybernetic_ascension_path = yes
			has_ascension_perk = ap_tec_cyberpsionic
			has_ascension_perk = ap_tec_replicant
		}
	}

	tec_has_any_cybernetic_ascension_finished = {
		OR = {
			tec_has_cybernetic_ascension_finished = yes
			has_ascension_perk = ap_tec_cyberpsionic
			has_ascension_perk = ap_tec_replicant
		}
	}
 # /

 # Synthetic
	tec_has_synthetic_ascension_path = {
		OR = {
			has_ascension_perk = ap_synthetic_evolution
			has_ascension_perk = ap_synthetic_age
			tec_has_synthetic_ascension_origin = yes
		}
	}
	tec_has_synthetic_ascension_origin = {
		OR = {
			always = no
		}
	}

	tec_has_synthetic_ascension_finished = {
		OR = {
			# Might include hybrid paths
			has_tradition = tr_synthetics_finish 
		}
	}

	tec_has_any_synthetic_ascension_path = {
		OR = {
			tec_has_synthetic_ascension_path = yes
		}
	}

	tec_has_any_synthetic_ascension_finished = {
		OR = {
			tec_has_synthetic_ascension_finished = yes
		}
	}
 # /

 # Generic
	tec_has_main_ascension_path = {
		OR = {
			tec_has_psionic_ascension_path = yes
			tec_has_genetic_ascension_path = yes
			tec_has_cybernetic_ascension_path = yes
			tec_has_synthetic_ascension_path = yes
			# PD
			tec_has_pd_biosynth_ascension_path = yes
		}
	}

	tec_has_main_ascension_finished = {
		OR = {
			tec_has_psionic_ascension_finished = yes
			tec_has_genetic_ascension_finished = yes
			tec_has_cybernetic_ascension_finished = yes
			tec_has_synthetic_ascension_finished = yes
			# PD
			tec_has_pd_biosynth_ascension_finished = yes
		}
	}


	tec_has_secondary_ascension_path = {
		OR = {
			has_ascension_perk = ap_tec_genetic_perfection			# perfect bio			
			has_ascension_perk = ap_tec_psionic_ascendance			# perfect psi
			has_ascension_perk = ap_tec_synthetic_singularity		# perfect synth
			has_ascension_perk = ap_tec_cybernetic_revolution		# perfect cyborg
			has_ascension_perk = ap_tec_replicant					# biorobot
			has_ascension_perk = ap_tec_cyberpsionic				# psiorobot
			has_ascension_perk = ap_tec_biopsionic					# biopsi

			has_ascension_perk = ap_tec_hive_psionic_3		# hivepsi good
			has_ascension_perk = ap_tec_hive_psionic_shatter			# hivepsi bad
		}
	}
 # /

# DECISIONS
# ---------------------------------------------------
	tec_can_enact_overstrip = {
		OR = {
			has_ethic = ethic_gestalt_disregard
			has_valid_civic = civic_tec_corporate_eco_exploiter_corp
			has_valid_civic = civic_tec_regular_surface_exploiters
		}
	}
# /



# PLANET SLOTS & DISTRICTS
# ---------------------------------------------------
	tec_has_all_slots_unlocked = {
		[[cached]
			has_planet_flag = tec_cache_tec_has_all_slots_unlocked
		]
		[[!cached]
		OR = {
			tec_is_city_world = yes
			tec_is_elysium = yes
			tec_is_ringworld = yes
			tec_is_uncapped_planet = yes
			AND = {
				tec_has_infinite_menial_districts = yes
				NOT = {
					uses_district_set = shattered_ring_world
				}
			}
			tec_special_infinite_buildings = yes
		}
		]
	}

	tec_has_infinite_menial_districts = {
		OR = {
			uses_district_set = hive_world
			uses_district_set = machine_world
			uses_district_set = shattered_ring_world
			AND = {
				uses_district_set = city_world
				has_planet_flag = tec_remnants_decadent_ecu
			}
			tec_is_pd_menial_uncapped = yes
		}
	}

	tec_is_uncapped_planet = {
		OR = {
			has_modifier = pm_tec_ecoworld_planet
			has_modifier = resort_colony
			tec_is_modded_uncapped_planet = yes
		}
	}

	tec_has_any_food_district = {
		OR = {
			uses_district_set = standard
			AND = {
				tec_uses_ringworld_districts = yes
				tec_is_unspecced_ringworld = yes
			}
			AND = {
				uses_district_set = city_world
				tec_is_unspecced_ringworld = yes
			}
			AND = {
				tec_is_elysium = yes
				tec_is_unspecced_elysium = yes
			}
			AND = {
				tec_uses_habitat_districts = yes
				has_planet_flag = tec_food_habitat
				tec_is_arcology_habitat = no
			}
			uses_district_set = hive_world
			# PD
			AND = { # PD
				uses_district_set = @pdplanethab
				OR = {
					has_planet_flag = pd_farming_hab
					has_modifier = hab_terraforming_candidate
					has_modifier = hab_pdhabsubglacialocean
				}
				tec_is_arcology_habitat = no
			}
			uses_district_set = @pdexotic_standard
			# Giga
			giga_uses_farming_district = yes
			uses_district_set = @giga_alderson_gaia
			uses_district_set = @giga_birch
			uses_district_set = @flusion_gaia_ecu
			uses_district_set = @giga_frameworld
			uses_district_set = @giga_orbital
			uses_district_set = @giga_ancient_elysium
		}
	}

	tec_special_infinite_buildings = {
		OR = {
			always = no
		}
	}

	tec_is_special_colony = {	# Note: Identification, sort
		OR = {
			has_modifier = resort_colony
			has_modifier = slave_colony
			has_modifier = penal_colony
			has_modifier = crucible_colony
			#has_modifier = pm_tec_sanctuary_colony
			#has_modifier = pm_tec_necropolis_colony
			#has_modifier = pm_tec_preserve_colony
			#has_modifier = pm_tec_heritage_colony
		}
	}

	tec_is_special_colony_restrictive_all = {	# Note: mostly used for buildings
		always = no
	}

	tec_is_special_colony_restrictive_menial = {
		OR = {
			has_modifier = resort_colony
			has_modifier = crucible_colony
		}
	}

	tec_is_special_colony_restrictive_advanced = {
		OR = {
			has_modifier = resort_colony
			#has_modifier = pm_tec_sanctuary_colony
			#has_modifier = pm_tec_necropolis_colony
		}
	}
# /

# Compatibility scripts
	tec_invalidates_arcology_project_comp = {
		OR = {
			tec_is_city_world = yes
			tec_is_special_colony = yes
			# Wenkwort
			has_modifier = pm_wenkwort_custodian

			# Planetary diversity compatibility
			is_pd_shroud_world = yes
			is_pd_unique = yes
			is_pd_planetary_megaproject = yes
		}
	}

	tec_invalidates_ecoworld_project_comp = {
		OR = {
			tec_is_city_world = yes
			tec_is_special_colony = yes

			tec_is_hive_world = yes
			tec_is_machine_world = yes
			tec_is_nuked_world = yes
			tec_is_relic_world = yes

			# PD
			is_pd_wasteland = yes
			is_pd_planetary_megaproject = yes
		} 
	}

	tec_has_any_menial_district = {
		OR = {
			check_variable_arithmetic = {
				which = value:farming_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:mining_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:generator_districts_value
				value > 0
			}
		}
	}

	tec_has_any_menial_building = {
		OR = {
			check_variable_arithmetic = {
				which = value:farming_buildings_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:mining_buildings_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:generator_buildings_value
				value > 0
			}
		}
	}

	tec_has_any_urban_district = {
		OR = {
			check_variable_arithmetic = {
				which = value:housing_districts_value
				value > 0
			}
			check_variable_arithmetic = {
				which = value:industrial_districts_value
				value > 0
			}
		}
	}
# /
	
# PLANET TRIGGERS
# ---------------------------------------------------
	tec_is_modded_uncapped_planet = {
		OR = {
			has_modifier = @pleasure_palace
			uses_district_set = @giga_alderson
			uses_district_set = @giga_birch
		}

	}

	tec_is_modded_space_arcology = {
		OR = {
			giga_habitable_structure = yes
		}
	}



	tec_is_vanilla_habitable_regular_planet = {
		OR = {
			#dry
			is_planet_class = pc_desert
			is_planet_class = pc_arid
			is_planet_class = pc_savannah

			#wet
			is_planet_class = pc_tropical
			is_planet_class = pc_ocean
			is_planet_class = pc_continental
			
			#cold
			is_planet_class = pc_tundra
			is_planet_class = pc_alpine
			is_planet_class = pc_arctic
		}
	}

	tec_is_habitable_regular_planet = {
		OR = {
			tec_is_vanilla_habitable_regular_planet = yes
			# Generic
			uses_district_set = standard
			# PD
			is_pd_regular = yes
		}
	}

	tec_is_arcology = {
		[[cached]
		has_planet_flag = tec_cache_tec_is_arcology
		]
		[[!cached]
		OR = {
			tec_is_city_world = yes
			tec_is_space_arcology = yes
		}
		]
	}


	tec_is_space_arcology = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_space_arcology
		]
		[[!cached]
		OR = {
			tec_is_habitat = yes
			tec_is_ringworld = yes
			tec_is_elysium = yes
			tec_is_modded_space_arcology = yes
		}
		]
	}

	tec_is_habitat = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_habitat
		]
		[[!cached]
		OR = {
			uses_district_set = habitat
			# PD
			uses_district_set = @pdplanethab
			# gigas
			is_giga_habitat = yes
		}
		]
	}

	tec_is_ringworld = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_ringworld
		]
		[[!cached]
		OR = {
			uses_district_set = ring_world
			is_giga_ringworld = yes
		}
		]
	}

	tec_is_elysium = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_elysium
		]
		[[!cached]
		OR = {
			#uses_district_set = elysium_phase_0
			uses_district_set = elysium_phase_2
		}
		]
	}

	tec_is_city_world = {
		[[cached]
			has_planet_flag = tec_cache_tec_is_city_world
		]
		[[!cached]
		OR = {
			uses_district_set = city_world
			is_pd_arcology = yes
		}
		]
	}

	tec_uses_habitat_districts = {
		OR = {
			uses_district_set = habitat
		}
	}

	tec_uses_ringworld_districts = {
		OR = {
			uses_district_set = ring_world
			AND = {
				has_stellaris_evolved_giga = yes
				OR = {
					uses_district_set = @penrose_ring
					uses_district_set = @interstellar_ring
				}
			}
		}
	}

	tec_planet_generates_relics_for_jobs = {
		OR = {
			tec_is_relic_world = yes
			has_deposit = d_central_spire
			has_deposit = d_former_relic_world
			has_planet_flag = tec_relic_megastructure
		}
	}
# /

#void dweller traits
# neutral
	tec_is_viable_voidwellerneutral_planet = {
		OR = {
			tec_is_ringworld = yes
			tec_is_elysium = yes
			tec_is_city_world = yes
			tec_is_relic_world = yes
			tec_is_gaia_world = yes
			tec_is_ecoworld = yes
			is_pd_unique = yes
			is_pd_shroud_world = yes
		}
	}
# /

#Lifeaffinity traits
# only for exotic and gaia worlds
tec_is_perfect_planet = {
	[[cached]
		has_planet_flag = tec_cache_tec_is_perfect_planet
	]
	[[!cached]
	OR = {
		tec_is_gaia_world = yes
		tec_is_pd_perfect_planets = yes
	}
	]
}

# for special arcologies
tec_is_neutral_planet = {
	[[cached]
		has_planet_flag = tec_cache_tec_is_neutral_planet
	]
	[[!cached]
	OR = {
		tec_is_elysium = yes
		tec_is_ringworld = yes
		tec_is_modded_space_arcology = yes
	}
	]
}

# Aquatic species
tec_is_wet_planet_exceptions = {	# Outside is_wet trigger
	OR = {
		tec_is_gaia_world = yes
		tec_is_flooded = yes
		tec_is_wet_planet_origin_exceptions = {
			owner = $owner$
		}
		tec_is_wet_modded_planet_exceptions = {
			owner = $owner$
		}
	}
}

tec_is_wet_modded_planet_exceptions = {
	[[owner]]
	OR = {
		uses_district_set = giga_birch
		uses_district_set = flusion_gaia_ecu
		uses_district_set = giga_alderson_gaia
		# Hive start
		AND = {
			$owner$ = {
				tec_has_hive_world_origin = yes
			}
			uses_district_set = giga_alderson_hive
		}
		# Machine Start
		AND = {
			$owner$ = {
				tec_has_machine_world_origin = yes
			}
			uses_district_set = giga_alderson_machine
		}
	}
}

tec_is_wet_planet_origin_exceptions = {
	OR = {
		# Nuked start 
		AND = {
			$owner$ = {
				tec_has_nuked_world_origin = yes
			}
			tec_is_nuked_world = yes
		}
		# Hive start
		AND = {
			$owner$ = {
				tec_has_hive_world_origin = yes
			}
			tec_is_hive_world = yes
		}
		# Machine Start
		AND = {
			$owner$ = {
				tec_has_machine_world_origin = yes
			}
			tec_is_machine_world = yes
		}
		# 
	}
}

tec_is_ecoworld = {
	has_modifier = pm_tec_ecoworld_planet
}


tec_is_modded_habitat_exception = {
	OR = {
		giga_uses_habitat_capitals = yes
		has_planet_flag = giga_habitat_capital_compat
	}
}

tec_is_upgraded_habitat = {
	OR = {
		has_planet_flag = advanced_habitat
		has_planet_flag = advanced_habitat_2
		has_planet_flag = payback_habitat # Payback hab is considered fully upgraded
		tec_is_modded_habitat_exception = yes
	}
}

tec_is_fully_upgraded_habitat = {
	OR = {
		has_planet_flag = advanced_habitat_2
		has_planet_flag = payback_habitat # Payback hab is considered fully upgraded
		tec_is_modded_habitat_exception = yes
	}
}

tec_is_arcology_habitat = {
	OR = {
		has_planet_flag = tec_arcology_habitat
		has_modifier = pm_tec_arcology_habitat
	}
}

tec_is_hive_world = {
	OR = {
		is_planet_class = pc_hive
		# PD
		is_pd_hive_world = yes
	}
}

tec_is_machine_world = {
	OR = {
		is_planet_class = pc_machine
		# PD
		is_pd_machine = yes
	}
}

tec_is_nuked_world = {
	OR = {
		is_planet_class = pc_nuked
		is_pd_nuked = yes
	}
}

tec_is_relic_world = {
	OR = {
		is_planet_class = pc_relic
		tec_is_pd_relic_world = yes
	}
}

tec_is_gaia_world = {
	OR = {
		is_planet_class = pc_gaia
		is_pd_gaia = yes
	}
}

tec_is_aquatic_planet = {
	OR = {
		is_planet_class = pc_ocean
		is_pd_planet_for_aqua_trait = yes
		tec_is_flooded = yes
	}
}

tec_is_standard_like_planet = {
	OR = {
		uses_district_set = standard
		uses_district_set = @pdexotic_standard
	}
}

tec_has_nuked_world_origin = {
	OR = {
		has_origin = origin_post_apocalyptic
		has_origin = @origin_pd_radiotrophic_mutants
		has_origin = @origin_disharmonious_unity
		has_origin = @originsextended_starless
		has_origin = @originsextended_magnetica
		has_origin = @originsextended_graveyard
	}
}

tec_has_hive_world_origin = {
	OR = {
		has_origin = @origin_tec_hiveplanet
		has_origin = @origin_pd_hive
		has_origin = @origin_hive
		has_origin = @originsextended_infest
	}
}

tec_has_machine_world_origin = {
	OR = {
		has_origin = origin_machine
		has_origin = @originsextended_core
	}
}

tec_has_relic_world_origin = {
	OR = {
		has_origin = origin_remnants
		has_origin = @origin_reliquary
		has_origin = @origin_mem_from_the_ashes
		has_origin = @origin_mem_ceaseless_gaze
		# has_origin = @origin_pd_scrapyard_world # Commented cause not relic planet type but similar enough
	}
}

tec_has_gaia_world_origin = {
	OR = {
		has_origin = origin_life_seeded
		has_origin = @originsextended_gaia
		has_origin = @origin_resort_world
	}
}

tec_district_ecoworld_swap = {
	tec_is_ecoworld = yes
}

tec_district_organic_swap = {
	tec_is_biomorph = yes
}

tec_generator_aqua_district_swap = {
	tec_is_aquatic_empire = yes
	is_machine_empire = yes
	root = {
		OR = {
			is_wet = yes
			tec_is_wet_planet_exceptions = {
				owner = prev
			}
		}
	}
}

tec_has_infinite_generator_district = {
	OR = {
		root = {
			tec_has_infinite_menial_districts = yes
		}
	}
	# Exceptions
	if = {
		limit = {
			root = { uses_district_set = shattered_ring_world }
		}
		OR = {
			is_gestalt = yes
			is_fallen_empire = yes
		}
	}
}

tec_mining_aqua_district_swap = {
	tec_is_aquatic_empire = yes
	is_lithoid_empire = yes
	is_machine_empire = no
	root = {
		OR = {
			is_wet = yes
			tec_is_wet_planet_exceptions = {
				owner = prev
			}
		}
	}
}


tec_has_infinite_mining_district = {
	OR = {
		root = {
			tec_has_infinite_menial_districts = yes
		}
		is_subterranean_empire = yes
	}
	# Exceptions
}

tec_farming_aqua_district_swap = {
	tec_is_aquatic_empire = yes
	is_lithoid_empire = no
	is_machine_empire = no
	root = {
		OR = {
			is_wet = yes
			tec_is_wet_planet_exceptions = {
				owner = prev
			}
		}
	}
}

tec_has_infinite_farming_district = {
	OR = {
		root = {
			tec_has_infinite_menial_districts = yes
		}
	}
	# Exceptions
	root = {
		NOT = {
			uses_district_set = machine_world
		}
	}
}

tec_has_standard_habitation_district = {
	NOT = { has_deposit = d_crashed_slaver_ship }
	OR = {
		uses_district_set = standard
		uses_district_set = hive_world
		uses_district_set = machine_world
		uses_district_set = shattered_ring_world
		uses_district_set = @pdnecroplanet
		uses_district_set = @pdscrapyard
		uses_district_set = @pdbioforge
		uses_district_set = @pdbiofort
		uses_district_set = @pdfloraforge
		uses_district_set = @pdflorafort
		has_planet_flag = tec_remnants_decadent_ecu
		AND = {
			has_stellaris_evolved_pd = yes
			uses_district_set = @pdexotic_standard
		}
		AND = {
			has_stellaris_evolved_giga = yes
			giga_uses_city_district = yes
		}
	}
	tec_is_ecoworld = no
	NOT = { has_deposit = d_crashed_slaver_ship }
}

tec_has_standard_industrial_district = {
	OR = {
		uses_district_industrial = yes
		uses_district_set = @pdnecroplanet
		uses_district_set = @pdscrapyard
		AND = {
			has_stellaris_evolved_pd = yes
			uses_district_set = @pdexotic_standard
		}
		AND = {
			has_planet_flag = tec_remnants_decadent_ecu
			NOR = {
				has_planet_flag = tec_ecumenopolis_spec_militarized
				has_planet_flag = tec_ecumenopolis_spec_science
				has_planet_flag = tec_ecumenopolis_spec_admin
			}
		}
	}
	tec_is_ecoworld = no
}

tec_has_rural_mimics = {
	OR = {
		AND = {
			has_stellaris_evolved_pd = yes
			uses_district_set = @pdexotic_standard
		}
		AND = {
			has_stellaris_evolved_giga = yes
			OR = {
				giga_uses_farming_district = yes
				giga_uses_mining_district = yes
				giga_uses_generator_district = yes
			}
		}
	}
}

# B U I L D I N G S
# -------------- STATECRAFT BUILDINGS ----------------
tec_only_one_statecraft_building = {
	text = "tec_only_one_statecraft_building_on_planet"
	# hidden_trigger = {
	# 	OR = {
	# 		has_building = building_tec_tr_statecraft_fallback

	# 		has_building = building_tec_tr_nofan_diversity

	# 		# mat vs spi
	# 		has_building = building_tec_tr_mat_celestial_database
	# 		has_building = building_tec_tr_spi_manifesto_faith

	# 		# phile vs phobe
	# 		has_building = building_tec_tr_phile_tribute_unity
	# 		has_building = building_tec_tr_phobe_monument_purity

	# 		# peace vs mil
	# 		has_building = building_tec_tr_pac_garden_peace
	# 		has_building = building_tec_tr_mil_comisariat

	# 		# auth vs lib
	# 		has_building = building_tec_tr_aut_throne
	# 		has_building = building_tec_tr_lib_parliament

	# 		# green vs ind
	# 		has_building = building_tec_tr_eco_sculptor
	# 		has_building = building_tec_tr_ind_mohole
			
	# 		# comp vs coop
	# 		has_building = building_tec_tr_comp_hypermall
	# 		has_building = building_tec_tr_coop_distribution

	# 		# elit vs egal
	# 		has_building = building_tec_tr_eli_academy
	# 		has_building = building_tec_tr_ega_repository

	# 		# special gestalt ones goes here
			
	# 	}
	# }
}

# These ones are for backup
overlord_has_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_more_than_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_num_science_ships_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = science
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

overlord_has_more_than_num_science_ships_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = science
						exists = owner
						exists = ROOT.owner
						ROOT.owner = { has_overlord = PREV.owner }
					}
				}
			}
		}
	}
}

# This one is from evolved
tec_has_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count = $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
					}
				}
			}
		}
	}
}
tec_has_more_than_num_constructors_in_orbit = {
	planet = {
		count_fleet_in_orbit = {
			count > $NUM$
			limit = {
				count_controlled_ship = {
					count = all
					limit = {
						is_ship_size = constructor
					}
				}
			}
		}
	}
}


# S H I P S
# -------------- Colossus ----------------
# De-evolution ray
tec_can_destroy_planet_with_PLANET_KILLER_TEC_DEVOLVERAY = {
	custom_tooltip = {
		fail_text = is_not_a_habitable_planet_or_megastructure
		is_a_habitable_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	custom_tooltip = {
		fail_text = is_not_hostile_or_primitive
		OR = {
			planet_is_hostile = yes
			AND = {
				exists = owner
				owner = {
					is_country_type = primitive
				}
			}
		}
	}
	if = {
		limit = {
			exists = owner
			owner = { is_country_type = primitive }
		}
		custom_tooltip = {
			fail_text = tec_cannot_devolve_primitives
			always = no
		}
	}
	custom_tooltip = { # Replicants assimilate EVERYTHING
		fail_text = no_assimilatable_pops
		any_owned_pop = {
			is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
		}
	}
}
tec_is_valid_pop_for_PLANET_KILLER_TEC_REPLICANTRAY = {
	always = yes
}

tec_can_destroy_planet_with_PLANET_KILLER_TEC_REPLICANTRAY = {
	custom_tooltip = {
		fail_text = is_not_a_habitable_planet_or_megastructure
		is_a_habitable_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	custom_tooltip = {
		fail_text = is_not_hostile_or_primitive
		OR = {
			planet_is_hostile = yes
			AND = {
				exists = owner
				owner = {
					is_country_type = primitive
				}
			}
		}
	}
	if = {
		limit = {
			exists = owner
			owner = { is_country_type = primitive }
		}
		custom_tooltip = {
			fail_text = primitives_not_in_borders
			exists = space_owner
			space_owner = { is_same_value = from.owner }
		}
		custom_tooltip = {
			fail_text = primitives_not_full_interference
			from.owner = {
				OR = {
					has_policy_flag = interference_active
					has_policy_flag = interference_aggressive
				}
			}
		}
	}
	#custom_tooltip = { # Replicants assimilate EVERYTHING
	#	fail_text = no_assimilatable_pops
	#	any_owned_pop = {
	#		is_valid_pop_for_PLANET_KILLER_NANOBOTS = yes
	#	}
	#}
}
tec_is_valid_pop_for_PLANET_KILLER_TEC_REPLICANTRAY = {
	always = yes
}


# Specializations
tec_is_unspecced_city_planet = {
	NOR = {
		has_planet_flag = tec_ecumenopolis_spec_militarized
		has_planet_flag = tec_ecumenopolis_spec_science
		has_planet_flag = tec_ecumenopolis_spec_admin
		has_planet_flag = tec_ecumenopolis_spec_precursor
	}
}

tec_is_precursor_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_precursor 
}

tec_is_military_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_militarized 
}

tec_is_admin_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_admin 
}

tec_is_science_city_planet = {
	has_planet_flag = tec_ecumenopolis_spec_science 
}

tec_is_decadent_city_planet = {
	has_planet_flag = tec_remnants_decadent_ecu
}

tec_is_specced_ringworld = {
	OR = {
		has_planet_flag = tec_rw_spec_science
		has_planet_flag = tec_rw_spec_admin
		has_planet_flag = tec_rw_spec_industry
	}
}

tec_is_unspecced_ringworld = {
	NOR = {
		has_planet_flag = tec_rw_spec_precursor
		has_planet_flag = tec_rw_spec_science
		has_planet_flag = tec_rw_spec_admin
		has_planet_flag = tec_rw_spec_industry
	}
}

tec_is_precursor_ringworld = {
	has_planet_flag = tec_rw_spec_precursor
}

tec_is_science_ringworld = {
	has_planet_flag = tec_rw_spec_science
}

tec_is_industry_ringworld = {
	has_planet_flag = tec_rw_spec_industry
}

tec_is_admin_ringworld = { # scrapped
	has_planet_flag = tec_rw_spec_admin
}

tec_is_unspecced_elysium = {
	NOR = {
		has_planet_flag = tec_civ_elysium
		has_planet_flag = tec_mil_elysium
	}
}

tec_is_civilian_elysium = {
	has_planet_flag = tec_civ_elysium
}

tec_is_military_elysium = {
	has_planet_flag = tec_mil_elysium
}

tec_is_flooded = {
	# Can be used to allow flooded elysiums and ringworlds
	OR = {
		has_modifier = flooded_habitat
		AND = {
			has_modifier = @hyceanfloodedhabitat
			owner = { has_origin = @origin_pd_hycean_aquatic }
		}
	}
}

tec_has_hired_job = {
	OR = {
		has_job = tec_hired_miner
		has_job = tec_hired_farmer
		has_job = tec_hired_technician
		has_job = tec_hired_catalytic
		has_job = tec_hired_soldier
		has_job = tec_hired_foundry
		has_job = tec_hired_artisan
		has_job = tec_hired_researcher
		has_job = tec_hired_entertainer
		# Preacher here too
		has_job = preacher
	}
}

tec_has_advanced_genemodding = {
	always = no
}


# Ecu decisions

tec_arcology_project_potential = {
	optimize_memory
	tec_is_relic_world = no
	tec_invalidates_arcology_project_comp = no

	habitable_structure = no
	tec_is_arcology = no

	exists = owner
	owner = {
		has_ascension_perk = ap_arcology_project
		NOT = {
			has_ethic = ethic_fanatic_green
		}
		NOR = {
			has_civic = civic_agrarian_idyll
		}
	}
}

tec_arcology_project_relic_potential = {
	optimize_memory
	# PD compat
	is_planet_class = pc_[[milarc]milarc_]relic
	
	tec_invalidates_arcology_project_comp = no
	habitable_structure = no
	tec_is_arcology = no
}

tec_ecoworld_project_potential = {
	tec_is_arcology = no
	tec_invalidates_ecoworld_project_comp = no

	tec_is_ecoworld = no

	habitable_structure = no

	exists = owner
		owner = {
			NOR = {
				has_ethic = ethic_fanatic_industrial
				has_valid_civic = civic_hive_devouring_swarm
			}
			OR = {
				is_ecologist = yes
				has_ascension_perk = ap_mastery_of_nature
			}
		}
}

tec_arcology_project_allow = {
	optimize_memory
	if = {	# Note: I feel this extremely cheesy, but whatever
		limit = { owner = { is_ai = no } }
		custom_tooltip = {
			# PD compat
			fail_text = decision_[[eco]eco_]arcology_project_requirements
			if = {
				limit = {
					owner = {
						tec_is_megacity_empire = no
					}
				}
				free_district_slots < 1

				# PD compat
				[[eco]num_districts = { type = district_industrial value < 1 }]
				check_variable_arithmetic = {
					which = value:farming_districts_value
					value = 0
				}
				check_variable_arithmetic = {
					which = value:mining_districts_value
					value = 0
				}
				check_variable_arithmetic = {
					which = value:generator_districts_value
					value = 0
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_megacity_empire = yes
					}
				}
				# MEMESIS MEGACITY CHANGES
				log = "A"
			}
		}
		custom_tooltip = {
			fail_text = legendary_leader_decision_arcology_project
			NOT = { has_planet_flag = legendary_leader_planet }
		}
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				tec_can_enact_overstrip = yes
			}
		}
	}

	if = {
		limit = { owner = { is_ai = yes } } # block ai from being dumb
		NOR = {
			AND = {
				tec_is_ecoworld = yes
				owner = {
					NOT = { has_ethic = ethic_fanatic_industrial }
				}
			}
			has_modifier = "holy_planet"
		}
	}
	
}

tec_arcology_project_relic_allow = {
	optimize_memory
	owner = { 
		has_technology = tech_housing_2 
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				tec_can_enact_overstrip = yes
			}
		}
	}
}

tec_ecoworld_project_allow = {
	optimize_memory
	custom_tooltip = {
		fail_text = decision_tec_ecoworld_project_requirements
		OR = {
			check_variable_arithmetic = {
				which = value:farming_districts_value
				value >= 6
			}
			check_variable_arithmetic = {
				which = value:mining_districts_value
				value >= 6
			}
			check_variable_arithmetic = {
				which = value:generator_districts_value
				value >= 6
			}
		}
	}
	custom_tooltip = {
		fail_text = decision_tec_arcology_blocker_tweaks
		OR = {
			num_uncleared_blockers < 1
			owner = {
				tec_can_enact_overstrip = yes
			}
		}
	}
}

tec_ecoworld_project_can_upgrade = {
	optimize_memory
	OR = {
		has_ascension_perk = ap_mastery_of_nature
		has_ethic = ethic_fanatic_green
		has_ethic = ethic_gestalt_preservation
	}
}
#

tec_autocolonizes_artificial_worlds = {
	OR = {
		is_ai = yes
		has_origin = origin_void_dwellers
	}
}

tec_autocolonizable_artificial_worlds = {
	OR = {
		is_artificial = yes
		is_pd_habitat = yes # they are nor marked artificial
	}
}

# Gamer rules

tec_allows_machine_assembly_for_cyborg = {
	OR = {
		has_active_tradition = tr_cybernetics_assembly_standards
		has_country_flag = tec_unlock_mechadendrite_assemblers
	}
}


tec_waives_clone_origin_assembly_restrictions = {
	NOT = { has_country_flag = tec_waives_clone_origin_restrictions }
}

tec_can_assemble_bioservant_pop = {
	OR = {
		NOT = { exists = assembling_species }
		AND = {
			exists = assembling_species
			assembling_species = {
				tec_is_bioservant_species = yes
			}
		}
	}
}


tec_can_assemble_species_due_to_purity_assembly_policy = {
	if = {	# Restriction on main species with purity
		limit = {
			root.owner = { has_policy_flag = tec_purity_assembly }
		}
		is_same_species = root.owner_main_species
		# Note: Exact same species takes into account the main template, not subtemplates
		#	same species is more flexible to the system and subsystems
	}
}

# Terraforming APs

tec_blocks_terraforming_aps = {
	OR = {
		# PD blocks hive and gaia worlds for megaflora
		has_origin = @origin_pd_tree_of_life
	}
}

tec_ecologists_have_modifiers_to_fix = {
	OR = {
		has_modifier = "dangerous_wildlife"
		has_modifier = "hazardous_weather"
		has_modifier = "weak_magnetic_field"
		has_modifier = "unstable_tectonics"
		has_modifier = @gpm_unstable_tectonics_2
		has_modifier = "tidal_locked"
		has_modifier = "high_gravity"
		has_modifier = "mineral_poor"
		has_modifier = "atmospheric_aphrodisiac"
		has_modifier = "atmospheric_hallucinogen"
		has_modifier = "bleak_planet"
		has_modifier = "irradiated_planet"
		has_modifier = @gpm_global_thunderstorms
		has_modifier = @gpm_thin_atmospheres
		has_modifier = @gpm_strong_volcanism
		has_modifier = @gpm_high_gravity_2
		has_modifier = @gpm_hostile_flora
		has_modifier = @gpm_toxic_gas
		has_modifier = @gpm_titanic_predators
		has_modifier = @gpm_unusual_seasons
		has_modifier = @gpm_simple_organisms
		has_modifier = @gpm_unusual_formations
		has_modifier = @gpm_great_temperature_variation
		has_modifier = @gpm_ice_age
		has_modifier = @gpm_locust_plagues
		has_modifier = @gpm_resilent_parasites
		has_modifier = @gpm_trubbles
		has_modifier = @gpm_arachnophobia
		has_modifier = @gpm_giant_worm
		has_modifier = @gpm_sandstorms
		has_modifier = @gpm_quicksand
		has_modifier = @gpm_blizzards
		has_modifier = @gpm_abominable_predators
		has_modifier = @gpm_giant_ocean_snakes
		has_modifier = @gpm_cursed_world
		has_modifier = @gpm_asteroid_impacts_2
		has_modifier = @gpm_strange_alien_eggs
		has_modifier = @gpm_living_planet
	}
}

# D E P O S I T S  AND  A I
# -------------- SPECIAL RESOURCES ----------------
tec_adds_motes_deposit = {
	check_modifier_value = {
		modifier = building_mote_harvesters_max
		value >= 1
	}
}

# Gas
tec_adds_gases_deposit = {
	check_modifier_value = {
		modifier = building_gas_extractors_max
		value >= 1
	}
}

# Crystals
tec_adds_crystals_deposit = {
	check_modifier_value = {
		modifier = building_crystal_mines_max
		value >= 1
	}
}

# Betharian
tec_has_betharian_deposit = {
	check_modifier_value = {
		modifier = building_betharian_power_plant_max
		value >= 1
	}
}


tec_has_any_sr_building_or_district = {
	check_variable_arithmetic = {
		which = value:refinery_combined_value
		value > 0 
	}
}


tec_has_any_basic_ap = {
	OR = {
		has_ascension_perk = ap_one_vision
		has_ascension_perk = ap_tec_one_mind
		has_ascension_perk = ap_technological_ascendancy
		has_ascension_perk = ap_tec_influential
	}
}



tec_allow_enhance_planet = {
	NOR = {
		has_planet_flag = tec_enhanced_by_terraformers
		has_planet_flag = tec_block_enhancing
	}
}

tec_can_environement_enhance = {
	OR = {
		tec_is_standard_like_planet = yes
		tec_is_ringworld = yes
		tec_is_elysium = yes
		tec_is_ecoworld = yes
	}
}

tec_is_minerals_production_system = {
	any_system_planet = {
		OR = {
			is_asteroid = yes
			is_planet_class = pc_black_hole
		}
	}
}

tec_is_food_production_system = {
	any_system_planet = {
		OR = {
			AND = {
				is_colony = yes
				tec_has_any_food_district = yes
			}
			has_resource = { type = food amount > 0 }
		}
	}
}

tec_is_energy_production_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_neutron_star
			is_planet_class = pc_pulsar
		}
	}
}

tec_is_physics_research_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_black_hole
			is_planet_class = pc_pulsar
		}
	}
}


tec_is_society_research_system = {
	any_system_planet = {
		OR = {
			AND = {
				exists = owner
				owner = {
					is_primitive = yes
				}
			}
		}
	}
}

tec_is_engineering_research_system = {
	any_system_planet = {
		OR = {
			is_planet_class = pc_neutron_star
		}
	}
}


# ------------------------------------------------- Events
# --------------- Assimilations
	tec_has_total_assimilation = {
		optimize_memory
		OR = {
			# Counts robots and organics
			tec_has_all_species_total_assimilation = yes
			# Only organics
			tec_has_biological_total_assimilation = yes
			# Only psionics
			tec_has_psionic_total_assimilation = yes
		}
	}

	tec_has_all_species_total_assimilation = {
		optimize_memory
		OR = {
			# Pops into main synthetic species (total)
			has_country_flag = tec_synthetic_assimilation
			# Pops into replicants (total)
			has_country_flag = tec_replicant_assimilation
			# Pops into main species (debug)
			has_country_flag = tec_total_assimilation
		}
	}
	tec_has_biological_total_assimilation = {
		optimize_memory
		OR = {
			# Pops into main organic species (biological)
			has_country_flag = tec_genetic_assimilation
			# Pops into main organic species (biological)
			has_country_flag = tec_biopsionic_assimilation
			# Pops into main species (debug)
			has_country_flag = tec_total_assimilation
			# Bio pops into robots
			has_country_flag = tec_machine_encasing
		}
	}
	
	tec_has_psionic_total_assimilation = {
		optimize_memory
		OR = {
			# Psi pops into main organic species (ethereal)
			has_country_flag = tec_ethereal_assimilation
			has_country_flag = tec_psienergy_assimilation
		}
	}

	tec_has_ROBOT_into_MACHINE_assimilation = {
		optimize_memory
		OR = {	# Total assimilations
			has_country_flag = tec_replicant_assimilation
			has_country_flag = tec_genetic_assimilation
			has_country_flag = tec_synthetic_assimilation
			has_country_flag = tec_total_assimilation
		}
	}
# /

# planet
# doing this since shit ton of clerks checking it

tec_is_variable_set_and_not_zero = {
	is_variable_set = $VARIABLE$
	check_variable_arithmetic = {
		which = $VARIABLE$
		value != 0 
	}
}

tec_has_possible_job = {
	OR = {
		has_forbidden_jobs = $job$
		has_available_jobs = $job$
	}
}

# Machine processing

tec_has_local_machine_processing = {
	always = no
}

# Job checks

# scope: planet
tec_has_non_emigrant_pops_unemployed = {
	num_unemployed > 0
	OR = {
		free_building_slots > 0
		free_district_slots > 0
	}
}

tec_has_amenity_jobs_available = {
	if = {
		limit = {
			owner = { is_gestalt = no }
		}
		OR = {
			tec_has_possible_job = { job = entertainer }
			tec_has_possible_job = { job = duelist }
			tec_has_possible_job = { job = healthcare }
			tec_has_possible_job = { job = tec_cyborg_ripperdoc }
		}
	}
	else = {
		OR = {
			tec_has_possible_job = { job = maintenance_drone }
			tec_has_possible_job = { job = tec_spareparts_drone }
			tec_has_possible_job = { job = tec_hydrorelay_drone }
			tec_has_possible_job = { job = tec_cyborg_ripperdoc_drone }
			tec_has_possible_job = { job = frame_maintenance_drone }
		}
	}
}


tec_has_crime_jobs_available = {
	if = {
		limit = {
			owner = { is_gestalt = no }
		}
		OR = {
			tec_has_possible_job = { job = enforcer }
			tec_has_possible_job = { job = telepath }
			tec_has_possible_job = { job = transcend }
		}
	}
	else = {
		OR = {
			tec_has_possible_job = { job = patrol_drone }
		}
	}
}

tec_is_crime_job = {
	OR = {
		has_job = enforcer
		has_job = telepath
		has_job = transcend
	}
}


# Paragons

# Scope: leader
tec_leader_is_at_max_skill = {
	check_variable_arithmetic = {
		which = value:tec_max_leader_skill 
		value <= trigger:has_skill
	}
}

# Scope: leader
tec_is_aiauth_councilor_node = {
	OR = {
		has_trait = trait_tec_aiauth_node
		has_trait = trait_tec_aiauth_ruler
	}
}

# Scope: leader
tec_is_aiauth_node = {
	OR = {
		has_trait = trait_tec_aiauth_node
		has_trait = trait_tec_aiauth_ruler
		has_trait = trait_tec_aiauth_planetary_node
	}
}

# Scope: leader
tec_is_aiauth_planetary_node = {
	has_trait = trait_tec_aiauth_planetary_node
}

# Scope: leader
tec_leader_cannot_take_species_traits = {
	OR = {
		has_leader_flag = renowned_leader
		has_leader_flag = legendary_leader
		has_leader_flag = tec_no_species_traits
	}
}

tec_get_experiece_aiauth_node = {
	OR = {
		tec_leader_is_true_idle = no
		owner = { has_policy_flag = policy_tec_aiauth_idle_share_policy_grow_idle }
	}
}

# This is used since leaders can be idle and in council 
# Scope: leader
tec_leader_is_true_idle = {
	is_idle = yes
	is_councilor = no
	is_ruler = no
}

# should_pay_for_leader_upkeep = { gamerule moved here
# Scope: leader
tec_should_pay_for_leader_upkeep = {
	NOT = {	# Gamerule moved here
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
			}
			is_councilor = yes
		}
	}
}

# for caching, checking all leaders is expensive
# scope: planet
tec_has_councilor = { # NOTE: adjust tec_cache_country_councilor_triggers with each councilor you want cached
	exists = owner
	owner = { 
		has_country_flag = tec_cache_tec_has_councilor_$COUNCILOR$
	}
}

# only use on default/fallen empires, since caching
# $GT$ $GTE$ $EQ$ $LTE$ $LT$ $WHO$ $VALUE$
tec_has_opinion = {
	[[!GT]] [[!GTE]] [[!EQ]] [[!LTE]] [[!LT]]
	[[ GT ] 
	any_spynetwork = {
		target = {
			is_same_value = prev.$WHO$
		}
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value > $VALUE$
		}
	}
	]
	[[ GTE ] 
	any_spynetwork = {
		target = {
			is_same_value = prev.$WHO$
		}
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value >= $VALUE$
		}
	}
	]
	[[ EQ ] 
	any_spynetwork = {
		target = {
			is_same_value = prev.$WHO$
		}
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value = $VALUE$
		}
	}
	]
	[[ LTE ] 
	any_spynetwork = {
		target = {
			is_same_value = prev.$WHO$
		}
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value <= $VALUE$
		}
	}
	]
	[[ LT ] 
	any_spynetwork = {
		target = {
			is_same_value = prev.$WHO$
		}
		check_variable_arithmetic = {
			which = tec_cache_tec_opinion
			value < $VALUE$
		}
	}
	]
}

# only use on default/fallen empires, since caching
# GTE - >=
# GT - >
# EQ - =
# LT - <
# LTE - <=
# $GT$ $GTE$ $EQ$ $LTE$ $LT$ $WHO$ $EXCELLENT$ $GOOD$ $NEUTRAL$ $POOR$ $TERRIBLE$
tec_has_opinion_level = {
	[[!GT]] [[!GTE]] [[!EQ]] [[!LTE]] [[!LT]]
	[[!EXCELLENT]] [[!GOOD]] [[!NEUTRAL]] [[!POOR]] [[!TERRIBLE]]

	# we have to do this cause you cannot nest brackets xd

	if = { 
		limit = {
			always = $EXCELLENT|no$
		}
	# 750 - 3000
		[[GT] 
		always = no
		]
		[[GTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 750
			}
		}
		]
		[[EQ] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 750
			}
		}
		]
		[[LTE] 
		always = yes
		]
		[[LT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 750
			}
		}
		]
	}
	else_if = {
		limit = {
			always = $GOOD|no$
		}
	# 300 - 750
		[[GT]
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 750
			}
		}
		]
		[[GTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 300
			}
		}
		]
		[[EQ] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 300
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 750
			}
		}
		]
		[[LTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 750
			}
		}
		]
		[[LT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 300
			}
		}
		]
	}
	else_if = {
		limit = {
			always = $NEUTRAL|no$
		}
	# -300 - 300
		[[GT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= 300
			}
		}
		]
		[[GTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -300
			}
		}
		]
		[[EQ] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -300
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 300
			}
		}
		]
		[[LTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < 300
			}
		}
		]
		[[LT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -300
			}
		}
		]
	}
	else_if = {
		limit = {
			always = $POOR|no$
		}
	# -750 - -300
		[[GT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -300
			}
		}
		]
		[[GTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -750
			}
		}
		]
		[[EQ] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -750
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -300
			}
		}
		]
		[[LTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -300
			}
		}
		]
		[[LT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -750
			}
		}
		]
	}
	else_if = {
		limit = {
			always = $TERRIBLE|no$
		}
	# -3000 - -750
		[[GT] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value >= -750
			}
		}
		]
		[[GTE] 
		always = yes
		]
		[[EQ] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -750
			}
		}
		]
		[[LTE] 
		any_spynetwork = {
			target = {
				is_same_value = prev.$WHO$
			}
			check_variable_arithmetic = {
				which = tec_cache_tec_opinion
				value < -750
			}
		}
		]
		[[LT] 
		always = no
		]
	}
}
