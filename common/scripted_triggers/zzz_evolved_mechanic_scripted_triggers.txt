# common\scripted_triggers\zzz_evolved_mechanic_scripted_triggers.txt

# Authority Triggers
 # Biological swarm checker
	# Drones produce biomatter, 1 per drone
	# Cattle produce 2, shaper drones generate 2 extra
	#tec_has_enough_biomatter = {
	#	custom_tooltip = {
	#		custom_tooltip = tec_requires_biomatter
	#		fail_text = tec_not_enough_biomatter
	#		check_modifier_value = {
	#			modifier = tec_biomatter
	#			value >= $VALUE$
	#		}
	#	}
	#}
 # /
# /

# Civic Triggers
 # Megacity trigger
	#tec_has_megacity_trigger = {
	#	custom_tooltip = {
	#		custom_tooltip = tec_requires_biomatter
	#		fail_text = tec_not_enough_biomatter
	#		check_modifier_value = {
	#			modifier = tec_biomatter
	#			value >= $VALUE$
	#		}
	#	}
	#}
 # /
# /

# Megastructure triggers
	tec_is_non_productive_megastructure = {
		# Spammy megas
		is_megastructure_type = gateway_0
		is_megastructure_type = gateway_derelict
		is_megastructure_type = gateway_final
		is_megastructure_type = gateway_restored
		is_megastructure_type = gateway_ruined
		
		is_megastructure_type = hyper_relay
		is_megastructure_type = hyper_relay_restored
		is_megastructure_type = hyper_relay_ruined

		is_megastructure_type = lgate_base

		# Not productive
		is_megastructure_type = habitat_central_complex
		is_megastructure_type = habitat_central_complex_restored
		is_megastructure_type = habitat_central_complex_ruined

		is_megastructure_type = orbital_arc_furnace_1
		is_megastructure_type = orbital_arc_furnace_2
		is_megastructure_type = orbital_arc_furnace_3
		is_megastructure_type = orbital_arc_furnace_4
		is_megastructure_type = orbital_arc_furnace_destroyed
		is_megastructure_type = orbital_arc_furnace_restored

		# Stage 0 and ruined
		is_megastructure_type = dyson_sphere_0
		is_megastructure_type = dyson_sphere_restored
		is_megastructure_type = dyson_sphere_disco_restored
		is_megastructure_type = dyson_sphere_ruined
		is_megastructure_type = dyson_sphere_permanently_ruined

		is_megastructure_type = dyson_swarm_1
		is_megastructure_type = dyson_swarm_2
		is_megastructure_type = dyson_swarm_3

		is_megastructure_type = matter_decompressor_0
		is_megastructure_type = matter_decompressor_restored
		is_megastructure_type = matter_decompressor_ruined
		is_megastructure_type = matter_decompressor_permanently_ruined

		is_megastructure_type = interstellar_assembly_0
		is_megastructure_type = interstellar_assembly_restored
		is_megastructure_type = interstellar_assembly_ruined
		is_megastructure_type = interstellar_assembly_permanently_ruined

		is_megastructure_type = mega_shipyard_0
		is_megastructure_type = mega_shipyard_1
		is_megastructure_type = mega_shipyard_2
		is_megastructure_type = mega_shipyard_3
		is_megastructure_type = mega_shipyard_restored
		is_megastructure_type = mega_shipyard_ruined
		is_megastructure_type = mega_shipyard_permanently_ruined

		is_megastructure_type = orbital_ring
		is_megastructure_type = orbital_ring_restored
		is_megastructure_type = orbital_ring_ruined

		is_megastructure_type = quantum_catapult_0
		is_megastructure_type = quantum_catapult_1
		is_megastructure_type = quantum_catapult_2
		is_megastructure_type = quantum_catapult_3
		is_megastructure_type = quantum_catapult_improved_slingshot
		is_megastructure_type = quantum_catapult_restored
		is_megastructure_type = quantum_catapult_restored_slingshot
		is_megastructure_type = quantum_catapult_ruined
		is_megastructure_type = quantum_catapult_permanently_ruined
		is_megastructure_type = quantum_catapult_ruined_slingshot

		is_megastructure_type = ring_world_1
		is_megastructure_type = ring_world_2
		is_megastructure_type = ring_world_2_intermediate
		is_megastructure_type = ring_world_3_intermediate
		is_megastructure_type = ring_world_restored
		is_megastructure_type = ring_world_ruined

		is_megastructure_type = spy_orb_0
		is_megastructure_type = spy_orb_1
		is_megastructure_type = spy_orb_2
		is_megastructure_type = spy_orb_3
		is_megastructure_type = spy_orb_4
		is_megastructure_type = spy_orb_restored
		is_megastructure_type = spy_orb_ruined
		is_megastructure_type = spy_orb_permanently_ruined

		is_megastructure_type = strategic_coordination_center_0
		is_megastructure_type = strategic_coordination_center_1
		is_megastructure_type = strategic_coordination_center_2
		is_megastructure_type = strategic_coordination_center_3
		is_megastructure_type = strategic_coordination_center_restored
		is_megastructure_type = strategic_coordination_center_ruined
		is_megastructure_type = strategic_coordination_center_permanently_ruined
 
		# Crisis
		is_megastructure_type = crisis_sphere_0
		is_megastructure_type = crisis_sphere_1
		is_megastructure_type = crisis_sphere_2
		is_megastructure_type = crisis_sphere_3
		is_megastructure_type = crisis_sphere_4
		is_megastructure_type = crisis_sphere_ruined

		is_megastructure_type = cosmogenesis_needle

		# Evolved
		is_megastructure_type = tec_protoworld_0
		is_megastructure_type = tec_protoworld_1
		is_megastructure_type = tec_protoworld_2

		is_megastructure_type = tec_elysian_ring_0
		is_megastructure_type = tec_elysian_ring_1
		is_megastructure_type = tec_elysian_ring_2
		is_megastructure_type = tec_elysium_restored
		is_megastructure_type = tec_elysium_ruined

		is_megastructure_type = tec_arkship_0

		#is_megastructure_type = tec_shieldworld_0
		#is_megastructure_type = tec_shieldworld_1
		#is_megastructure_type = tec_shieldworld_2

		# TODO GIGAS
	}

# /

# Ascension triggers
 # TODO ASCENSION
	tec_has_genetic_ascension_t1_techs = {
		has_technology = tech_gene_tailoring
	}

	tec_has_cybernetic_ascension_t1_techs = {
		if = {
			limit = {
				is_machine_empire = yes
			}
			always = yes
		}
		else = {
			has_technology = tech_neuro_quantum_links
		}
	}

	tec_has_synthetic_ascension_t1_techs = {
		if = {
			limit = {
				is_gestalt = yes
			}
			has_technology = tech_robomodding_m
		}
		else = {
			has_technology = tech_synthetic_workers
			has_technology = tech_synthetic_leaders
		}
	}

	tec_has_mystical_ascension_t1_techs = {
		if = {
			limit = {
				is_gestalt = yes
			}
			# Psi theory is diff to find for hives
			always = yes
		}
		else = {
			has_technology = tech_psionic_theory
			has_technology = tech_telepathy
		}
	}
 # /
 # Genetics
	tec_has_genetic_perfection_traits = {
		OR = {
			# Cortex T1
			has_trait = trait_tec_gene_main_t1
			has_trait = trait_tec_gene_main_t2
			has_trait = trait_tec_gene_main_t3
			
			has_trait = trait_tec_gene_main_cloning_t1
			has_trait = trait_tec_gene_main_cloning_t2
			has_trait = trait_tec_gene_main_cloning_t3

			# Automodding
			has_trait = trait_tec_gene_automodding_t1
			has_trait = trait_tec_gene_automodding_t2
			has_trait = trait_tec_gene_automodding_t3

			# Normal traits
			has_trait = trait_tec_gene_genius_t1
			has_trait = trait_tec_gene_genius_t2
			has_trait = trait_tec_gene_genius_t3

			has_trait = trait_tec_gene_will_t1
			has_trait = trait_tec_gene_will_t2
			has_trait = trait_tec_gene_will_t3

			has_trait = trait_tec_gene_fertile_t1
			has_trait = trait_tec_gene_fertile_t2
			has_trait = trait_tec_gene_fertile_t3

			has_trait = trait_tec_gene_robust_t1
			has_trait = trait_tec_gene_robust_t2
			has_trait = trait_tec_gene_robust_t3

			has_trait = trait_tec_gene_audacious_t1
			has_trait = trait_tec_gene_audacious_t2
			has_trait = trait_tec_gene_audacious_t3

			has_trait = trait_tec_gene_lifespan_t1
			has_trait = trait_tec_gene_lifespan_t2
			has_trait = trait_tec_gene_lifespan_t3

			has_trait = trait_tec_gene_metabolic_t1
			has_trait = trait_tec_gene_metabolic_t2
			has_trait = trait_tec_gene_metabolic_t3

			has_trait = trait_tec_gene_energy_t1
			has_trait = trait_tec_gene_energy_t2
			has_trait = trait_tec_gene_energy_t3

			has_trait = trait_tec_gene_mining_t1
			has_trait = trait_tec_gene_mining_t2
			has_trait = trait_tec_gene_mining_t3

			has_trait = trait_tec_gene_farming_t1
			has_trait = trait_tec_gene_farming_t2
			has_trait = trait_tec_gene_farming_t3

			has_trait = trait_tec_gene_research_t1
			has_trait = trait_tec_gene_research_t2
			has_trait = trait_tec_gene_research_t3

			has_trait = trait_tec_gene_unity_t1
			has_trait = trait_tec_gene_unity_t2
			has_trait = trait_tec_gene_unity_t3

			has_trait = trait_tec_gene_industry_t1
			has_trait = trait_tec_gene_industry_t2
			has_trait = trait_tec_gene_industry_t3

			has_trait = trait_tec_gene_amenities_t1
			has_trait = trait_tec_gene_amenities_t2
			has_trait = trait_tec_gene_amenities_t3

			has_trait = trait_tec_gene_trade_t1
			has_trait = trait_tec_gene_trade_t2
			has_trait = trait_tec_gene_trade_t3

			#Resequenced
			#has_trait = trait_tec_gene_resequenced_dragon
			#has_trait = trait_tec_gene_resequenced_voidspawn
			#has_trait = trait_tec_gene_resequenced_tiyanki

			#has_trait = trait_tec_gene_resequenced_warmblood
			#has_trait = trait_tec_gene_resequenced_coldblood
			#has_trait = trait_tec_gene_resequenced_vegetal
			#has_trait = trait_tec_gene_resequenced_lithoid
			#has_trait = trait_tec_gene_resequenced_necroid
			#has_trait = trait_tec_gene_resequenced_toxoid
		}
	}
	tec_has_genetic_t3_traits = {
		OR = {
			# Cortex T1
			has_trait = trait_tec_gene_main_t3
			
			has_trait = trait_tec_gene_main_cloning_t3

			# Automodding
			has_trait = trait_tec_gene_automodding_t3

			# Normal traits
			has_trait = trait_tec_gene_genius_t3

			has_trait = trait_tec_gene_will_t3

			has_trait = trait_tec_gene_fertile_t3

			has_trait = trait_tec_gene_robust_t3

			has_trait = trait_tec_gene_audacious_t3

			has_trait = trait_tec_gene_lifespan_t3

			has_trait = trait_tec_gene_metabolic_t3

			has_trait = trait_tec_gene_energy_t3

			has_trait = trait_tec_gene_mining_t3

			has_trait = trait_tec_gene_farming_t3

			has_trait = trait_tec_gene_research_t3

			has_trait = trait_tec_gene_unity_t3

			has_trait = trait_tec_gene_industry_t3

			has_trait = trait_tec_gene_amenities_t3

			has_trait = trait_tec_gene_trade_t3

			#Resequenced
			#has_trait = trait_tec_gene_resequenced_dragon
			#has_trait = trait_tec_gene_resequenced_voidspawn
			#has_trait = trait_tec_gene_resequenced_tiyanki

			#has_trait = trait_tec_gene_resequenced_warmblood
			#has_trait = trait_tec_gene_resequenced_coldblood
			#has_trait = trait_tec_gene_resequenced_vegetal
			#has_trait = trait_tec_gene_resequenced_lithoid
			#has_trait = trait_tec_gene_resequenced_necroid
			#has_trait = trait_tec_gene_resequenced_toxoid
		}
	}
	tec_has_genetic_main_traits = {
		OR = {
			has_trait = trait_tec_gene_main_t1
			has_trait = trait_tec_gene_main_t2
			has_trait = trait_tec_gene_main_t3
		}
	}
	tec_has_genetic_resequence_traits = {
		OR = {
			#Resequenced
			#has_trait = trait_tec_gene_resequenced_dragon
			#has_trait = trait_tec_gene_resequenced_voidspawn
			#has_trait = trait_tec_gene_resequenced_tiyanki

			#has_trait = trait_tec_gene_resequenced_warmblood
			#has_trait = trait_tec_gene_resequenced_coldblood
			#has_trait = trait_tec_gene_resequenced_vegetal
			#has_trait = trait_tec_gene_resequenced_lithoid
			#has_trait = trait_tec_gene_resequenced_necroid
			#has_trait = trait_tec_gene_resequenced_toxoid
		}
	}
	tec_has_all_genetic_perfection_upgraded_trait_flags = {
		# Has unlocked all the upgradable traits
		# Main
		#has_country_flag = unlocked_trait_tec_gene_main_t1
		has_country_flag = unlocked_trait_tec_gene_main_t2
		has_country_flag = unlocked_trait_tec_gene_main_t3
		# Advanced
		has_country_flag = unlocked_trait_tec_gene_automodding_t2
		has_country_flag = unlocked_trait_tec_gene_automodding_t3
		has_country_flag = unlocked_trait_tec_gene_genius_t2
		has_country_flag = unlocked_trait_tec_gene_genius_t3
		has_country_flag = unlocked_trait_tec_gene_will_t2
		has_country_flag = unlocked_trait_tec_gene_will_t3
		has_country_flag = unlocked_trait_tec_gene_fertile_t2
		has_country_flag = unlocked_trait_tec_gene_fertile_t3
		has_country_flag = unlocked_trait_tec_gene_robust_t2
		has_country_flag = unlocked_trait_tec_gene_robust_t3
		has_country_flag = unlocked_trait_tec_gene_audacious_t2
		has_country_flag = unlocked_trait_tec_gene_audacious_t3
		has_country_flag = unlocked_trait_tec_gene_lifespan_t2
		has_country_flag = unlocked_trait_tec_gene_lifespan_t3
		has_country_flag = unlocked_trait_tec_gene_metabolic_t2
		has_country_flag = unlocked_trait_tec_gene_metabolic_t3
		# Basic
		has_country_flag = unlocked_trait_tec_gene_energy_t2
		has_country_flag = unlocked_trait_tec_gene_energy_t3
		has_country_flag = unlocked_trait_tec_gene_mining_t2
		has_country_flag = unlocked_trait_tec_gene_mining_t3
		has_country_flag = unlocked_trait_tec_gene_farming_t2
		has_country_flag = unlocked_trait_tec_gene_farming_t3
		has_country_flag = unlocked_trait_tec_gene_research_t2
		has_country_flag = unlocked_trait_tec_gene_research_t3
		has_country_flag = unlocked_trait_tec_gene_unity_t2
		has_country_flag = unlocked_trait_tec_gene_unity_t3
		has_country_flag = unlocked_trait_tec_gene_industry_t2
		has_country_flag = unlocked_trait_tec_gene_industry_t3
		has_country_flag = unlocked_trait_tec_gene_amenities_t2
		has_country_flag = unlocked_trait_tec_gene_amenities_t3
		has_country_flag = unlocked_trait_tec_gene_trade_t2
		has_country_flag = unlocked_trait_tec_gene_trade_t3
	}
	tec_has_all_genetic_perfection_main_trait_flags = {
		# Main
		#has_country_flag = unlocked_trait_tec_gene_main_t1
		has_country_flag = unlocked_trait_tec_gene_main_t2
		has_country_flag = unlocked_trait_tec_gene_main_t3
	}
	tec_has_all_genetic_perfection_advanced_trait_flags = {
		# Advanced
		has_country_flag = unlocked_trait_tec_gene_automodding_t2
		has_country_flag = unlocked_trait_tec_gene_automodding_t3
		has_country_flag = unlocked_trait_tec_gene_genius_t2
		has_country_flag = unlocked_trait_tec_gene_genius_t3
		has_country_flag = unlocked_trait_tec_gene_will_t2
		has_country_flag = unlocked_trait_tec_gene_will_t3
		has_country_flag = unlocked_trait_tec_gene_fertile_t2
		has_country_flag = unlocked_trait_tec_gene_fertile_t3
		has_country_flag = unlocked_trait_tec_gene_robust_t2
		has_country_flag = unlocked_trait_tec_gene_robust_t3
		has_country_flag = unlocked_trait_tec_gene_audacious_t2
		has_country_flag = unlocked_trait_tec_gene_audacious_t3
		has_country_flag = unlocked_trait_tec_gene_lifespan_t2
		has_country_flag = unlocked_trait_tec_gene_lifespan_t3
		has_country_flag = unlocked_trait_tec_gene_metabolic_t2
		has_country_flag = unlocked_trait_tec_gene_metabolic_t3
	}
	tec_has_all_genetic_perfection_normal_trait_flags = {
		# Basic
		has_country_flag = unlocked_trait_tec_gene_energy_t2
		has_country_flag = unlocked_trait_tec_gene_energy_t3
		has_country_flag = unlocked_trait_tec_gene_mining_t2
		has_country_flag = unlocked_trait_tec_gene_mining_t3
		has_country_flag = unlocked_trait_tec_gene_farming_t2
		has_country_flag = unlocked_trait_tec_gene_farming_t3
		has_country_flag = unlocked_trait_tec_gene_research_t2
		has_country_flag = unlocked_trait_tec_gene_research_t3
		has_country_flag = unlocked_trait_tec_gene_unity_t2
		has_country_flag = unlocked_trait_tec_gene_unity_t3
		has_country_flag = unlocked_trait_tec_gene_industry_t2
		has_country_flag = unlocked_trait_tec_gene_industry_t3
		has_country_flag = unlocked_trait_tec_gene_amenities_t2
		has_country_flag = unlocked_trait_tec_gene_amenities_t3
		has_country_flag = unlocked_trait_tec_gene_trade_t2
		has_country_flag = unlocked_trait_tec_gene_trade_t3
	}
	tec_has_all_genetic_perfection_recombined_trait_flags = {
		always = no
	}
	tec_gene_automod_checker = {
		hidden_trigger = {
			exists = from
			[[T1]
			# T1 should not trigger if the t2 or t3 is available
			switch = {
				trigger = has_trait
				trait_tec_gene_automodding_t2 = {
					from = {
						NOR = {
							has_country_flag = unlocked_$TRAIT$_t2
							has_country_flag = unlocked_$TRAIT$_t3
						}
					}
				}
				trait_tec_gene_automodding_t3 = {
					from = {
						NOR = {
							has_country_flag = unlocked_$TRAIT$_t2
							has_country_flag = unlocked_$TRAIT$_t3
						}
					}
				}
			}
			]
			[[!T1]]
			[[T2]
			# T2 should appear for t2 or t3
			NOT = {
				has_trait = trait_tec_gene_automodding_t1
			}
			switch = {
				trigger = has_trait
				trait_tec_gene_automodding_t2 = {
					from = {
						NOT = {
							has_country_flag = unlocked_$TRAIT$_t3
						}
					}
				}
				trait_tec_gene_automodding_t3 = {
					from = {
						NOT = {
							has_country_flag = unlocked_$TRAIT$_t3
						}
					}
				}
			}
			]
			[[!T2]]
			[[T3]
			NOR = {
				has_trait = trait_tec_gene_automodding_t1
				has_trait = trait_tec_gene_automodding_t2
			}
			]
			[[!T3]]
		}
	}
 # /
 # Cybernetics
	tec_has_cybernetic_dangerous_traits = {
		OR = {
			# Cortex T1
			has_trait = trait_tec_cyborg_cortex_research
			has_trait = trait_tec_cyborg_cortex_unity
			#has_trait = trait_tec_cyborg_cortex_ram
			#has_trait = trait_tec_cyborg_cortex_neuroconductor
			# Cortex T2
			has_trait = trait_tec_cyborg_cortex_science
			has_trait = trait_tec_cyborg_cortex_intralink
			has_trait = trait_tec_cyborg_cortex_memory
			has_trait = trait_tec_cyborg_cortex_relic
			# Internal T1
			has_trait = trait_tec_cyborg_internal_organs
			has_trait = trait_tec_cyborg_internal_septic
			has_trait = trait_tec_cyborg_internal_retrofit
			has_trait = trait_tec_cyborg_internal_integumentary
			# Internal T2
			has_trait = trait_tec_cyborg_internal_servos
			has_trait = trait_tec_cyborg_internal_printer
			#has_trait = trait_tec_cyborg_internal_maintenance
			has_trait = trait_tec_cyborg_internal_vital
			# External T1
			has_trait = trait_tec_cyborg_external_worker
			has_trait = trait_tec_cyborg_external_weaponry
			#has_trait = trait_tec_cyborg_external_aesthetic
			has_trait = trait_tec_cyborg_external_skin
			#has_trait = trait_tec_cyborg_external_connector
			#has_trait = trait_tec_cyborg_external_climate_dry
			#has_trait = trait_tec_cyborg_external_climate_wet
			#has_trait = trait_tec_cyborg_external_climate_cold
			# External T2
			has_trait = trait_tec_cyborg_external_specialist
			has_trait = trait_tec_cyborg_external_multilimb
			has_trait = trait_tec_cyborg_external_climate_multi

			# Deck T1
			has_trait = trait_tec_cyborg_deck_loyalty
			has_trait = trait_tec_cyborg_deck_trading
			#has_trait = trait_tec_cyborg_deck_joywire
			# Deck T2
			has_trait = trait_tec_cyborg_deck_stappled
			has_trait = trait_tec_cyborg_deck_servient
			has_trait = trait_tec_cyborg_deck_automodding
		}
	}
	tec_cybernetic_trait_risk_tooltip = {
		# From SHOULD be indicated in the trait_tooltip trigger
		#TODO ASCENSION - Warning when having 3+ cybernetic traits
		# for t2, warning when having 5+ cybernetic traits
	}
	# Mainframe
	tec_has_cybernetic_mainframe_trait = {
		OR = {
			# Mainframe T1
			has_trait = trait_tec_cyborg_mainframe_basic
			has_trait = trait_tec_cyborg_mainframe_adaptive
			has_trait = trait_tec_cyborg_mainframe_mech
			# Mainframe T2
			has_trait = trait_tec_cyborg_mainframe_advanced
			has_trait = trait_tec_cyborg_mainframe_super_adaptive
		}
	}
	tec_cybernetic_mainframe_trait_tooltip = {
		hidden_trigger = {
			exists = from
		}
		if = {	# Limited Cybernetics (0)
			limit = {
				OR = {
					has_trait = trait_limited_cybernetic
					has_trait = trait_tec_bioware_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t1
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_full_cyborgs_support_mainframes
				always = no
			}
		}
		else_if = {	# Cybernetics (1)
			limit = {
				OR = {
					has_trait = trait_cybernetic
					has_trait = trait_tec_replicant_main
					has_trait = trait_tec_cyberpsionic_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t2
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_1_cybernetic_mainframe_trait
				calc_true_if = {
					amount < 1
					# Mainframe T1
					has_trait = trait_tec_cyborg_mainframe_basic
					has_trait = trait_tec_cyborg_mainframe_adaptive
					has_trait = trait_tec_cyborg_mainframe_mech
					# Mainframe T2
					has_trait = trait_tec_cyborg_mainframe_advanced
					has_trait = trait_tec_cyborg_mainframe_super_adaptive
				}
			}
		}
		else_if = {	# Superior Cybernetics (1)
			limit = {
				OR = {
					has_trait = trait_tec_superior_cybernetics_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t3
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_2_cybernetic_deck_trait
				calc_true_if = {
					amount < 1
					# Mainframe T1
					has_trait = trait_tec_cyborg_mainframe_basic
					has_trait = trait_tec_cyborg_mainframe_adaptive
					has_trait = trait_tec_cyborg_mainframe_mech
					# Mainframe T2
					has_trait = trait_tec_cyborg_mainframe_advanced
					has_trait = trait_tec_cyborg_mainframe_super_adaptive
				}
			}
		}
		else = {	# No Cybernetics (0)
			custom_tooltip = {
				fail_text = tec_no_cybernetic_trait
				always = no
			}
		}
	}
	# Cortex
	tec_has_cybernetic_cortex_trait = {
		OR = {
			# Cortex T1
			has_trait = trait_tec_cyborg_cortex_research
			has_trait = trait_tec_cyborg_cortex_unity
			has_trait = trait_tec_cyborg_cortex_ram
			has_trait = trait_tec_cyborg_cortex_neuroconductor
			# Cortex T2
			has_trait = trait_tec_cyborg_cortex_science
			has_trait = trait_tec_cyborg_cortex_intralink
			has_trait = trait_tec_cyborg_cortex_memory
			has_trait = trait_tec_cyborg_cortex_relic
		}
	}
	tec_cybernetic_cortex_trait_tooltip = {
		hidden_trigger = {
			exists = from
		}
		if = {	# Limited Cybernetics (1)
			limit = {
				OR = {
					has_trait = trait_limited_cybernetic
					has_trait = trait_tec_bioware_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t1
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_1_cybernetic_cortex_trait
				calc_true_if = {
					amount < 1
					# Cortex T1
					has_trait = trait_tec_cyborg_cortex_research
					has_trait = trait_tec_cyborg_cortex_unity
					has_trait = trait_tec_cyborg_cortex_ram
					has_trait = trait_tec_cyborg_cortex_neuroconductor
					# Cortex T2
					has_trait = trait_tec_cyborg_cortex_science
					has_trait = trait_tec_cyborg_cortex_memory
					has_trait = trait_tec_cyborg_cortex_intralink
					has_trait = trait_tec_cyborg_cortex_relic
				}
			}
		}
		else_if = {	# Cybernetics (2)
			limit = {
				OR = {
					has_trait = trait_cybernetic
					has_trait = trait_tec_replicant_main
					has_trait = trait_tec_cyberpsionic_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t2
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_2_cybernetic_cortex_trait
				calc_true_if = {
					amount < 2
					# Cortex T1
					has_trait = trait_tec_cyborg_cortex_research
					has_trait = trait_tec_cyborg_cortex_unity
					has_trait = trait_tec_cyborg_cortex_ram
					has_trait = trait_tec_cyborg_cortex_neuroconductor
					# Cortex T2
					has_trait = trait_tec_cyborg_cortex_science
					has_trait = trait_tec_cyborg_cortex_memory
					has_trait = trait_tec_cyborg_cortex_intralink
					has_trait = trait_tec_cyborg_cortex_relic
				}
			}
		}
		else_if = {	# Superior Cybernetics (3)
			limit = {
				OR = {
					has_trait = trait_tec_superior_cybernetics_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t3
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_3_cybernetic_cortex_trait
				calc_true_if = {
					amount < 3
					# Cortex T1
					has_trait = trait_tec_cyborg_cortex_research
					has_trait = trait_tec_cyborg_cortex_unity
					has_trait = trait_tec_cyborg_cortex_ram
					has_trait = trait_tec_cyborg_cortex_neuroconductor
					# Cortex T2
					has_trait = trait_tec_cyborg_cortex_science
					has_trait = trait_tec_cyborg_cortex_memory
					has_trait = trait_tec_cyborg_cortex_intralink
					has_trait = trait_tec_cyborg_cortex_relic
				}
			}
		}
		else = {	# No Cybernetics (0)
			custom_tooltip = {
				fail_text = tec_no_cybernetic_trait
				always = no
			}
		}
	}
	# Internal
	tec_has_cybernetic_internal_trait = {
		OR = {
			# Internal T1
			has_trait = trait_tec_cyborg_internal_organs
			has_trait = trait_tec_cyborg_internal_septic
			has_trait = trait_tec_cyborg_internal_retrofit
			has_trait = trait_tec_cyborg_internal_integumentary
			# Internal T2
			has_trait = trait_tec_cyborg_internal_servos
			has_trait = trait_tec_cyborg_internal_printer
			has_trait = trait_tec_cyborg_internal_maintenance
			has_trait = trait_tec_cyborg_internal_vital
		}
	}
	tec_cybernetic_internal_trait_tooltip = {
		hidden_trigger = {
			exists = from
		}
		if = {	# Limited Cybernetics (1)
			limit = {
				OR = {
					has_trait = trait_limited_cybernetic
					has_trait = trait_tec_bioware_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t1
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_1_cybernetic_internal_trait
				calc_true_if = {
					amount < 1
					# Internal T1
					has_trait = trait_tec_cyborg_internal_organs
					has_trait = trait_tec_cyborg_internal_septic
					has_trait = trait_tec_cyborg_internal_retrofit
					has_trait = trait_tec_cyborg_internal_integumentary
					# Internal T2
					has_trait = trait_tec_cyborg_internal_servos
					has_trait = trait_tec_cyborg_internal_printer
					has_trait = trait_tec_cyborg_internal_maintenance
					has_trait = trait_tec_cyborg_internal_vital
				}
			}
		}
		else_if = {	# Cybernetics (2)
			limit = {
				OR = {
					has_trait = trait_cybernetic
					has_trait = trait_tec_replicant_main
					has_trait = trait_tec_cyberpsionic_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t2
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_2_cybernetic_internal_trait
				calc_true_if = {
					amount < 2
					# Internal T1
					has_trait = trait_tec_cyborg_internal_organs
					has_trait = trait_tec_cyborg_internal_septic
					has_trait = trait_tec_cyborg_internal_retrofit
					has_trait = trait_tec_cyborg_internal_integumentary
					# Internal T2
					has_trait = trait_tec_cyborg_internal_servos
					has_trait = trait_tec_cyborg_internal_printer
					has_trait = trait_tec_cyborg_internal_maintenance
					has_trait = trait_tec_cyborg_internal_vital
				}
			}
		}
		else_if = {	# Superior Cybernetics (3)
			limit = {
				OR = {
					has_trait = trait_tec_superior_cybernetics_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t3
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_3_cybernetic_internal_trait
				calc_true_if = {
					amount < 3
					# Internal T1
					has_trait = trait_tec_cyborg_internal_organs
					has_trait = trait_tec_cyborg_internal_septic
					has_trait = trait_tec_cyborg_internal_retrofit
					has_trait = trait_tec_cyborg_internal_integumentary
					# Internal T2
					has_trait = trait_tec_cyborg_internal_servos
					has_trait = trait_tec_cyborg_internal_printer
					has_trait = trait_tec_cyborg_internal_maintenance
					has_trait = trait_tec_cyborg_internal_vital
				}
			}
		}
		else = {	# No Cybernetics (1)
			custom_tooltip = {
				fail_text = tec_no_cybernetic_trait
				always = no
			}
		}
	}
	# External
	tec_has_cybernetic_external_trait = {
		OR = {
			# External T1
			has_trait = trait_tec_cyborg_external_worker
			has_trait = trait_tec_cyborg_external_weaponry
			has_trait = trait_tec_cyborg_external_aesthetic
			has_trait = trait_tec_cyborg_external_skin
			has_trait = trait_tec_cyborg_external_connector
			has_trait = trait_tec_cyborg_external_climate_dry
			has_trait = trait_tec_cyborg_external_climate_wet
			has_trait = trait_tec_cyborg_external_climate_cold
			# External T2
			has_trait = trait_tec_cyborg_external_specialist
			has_trait = trait_tec_cyborg_external_multilimb
			has_trait = trait_tec_cyborg_external_climate_multi
		}
	}
	tec_cybernetic_external_trait_tooltip = {
		hidden_trigger = {
			exists = from
		}
		if = {	# Limited Cybernetics (2)
			limit = {
				OR = {
					has_trait = trait_limited_cybernetic
					has_trait = trait_tec_bioware_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t1
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_2_cybernetic_external_trait
				calc_true_if = {
					amount < 2
					# External T1
					has_trait = trait_tec_cyborg_external_worker
					has_trait = trait_tec_cyborg_external_weaponry
					has_trait = trait_tec_cyborg_external_aesthetic
					has_trait = trait_tec_cyborg_external_skin
					has_trait = trait_tec_cyborg_external_connector
					has_trait = trait_tec_cyborg_external_climate_dry
					has_trait = trait_tec_cyborg_external_climate_wet
					has_trait = trait_tec_cyborg_external_climate_cold
					# External T2
					has_trait = trait_tec_cyborg_external_specialist
					has_trait = trait_tec_cyborg_external_multilimb
					has_trait = trait_tec_cyborg_external_climate_multi
				}
			}
		}
		else_if = {	# Cybernetics (3)
			limit = {
				OR = {
					has_trait = trait_cybernetic
					has_trait = trait_tec_replicant_main
					has_trait = trait_tec_cyberpsionic_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t2
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_3_cybernetic_external_trait
				calc_true_if = {
					amount < 3
					# External T1
					has_trait = trait_tec_cyborg_external_worker
					has_trait = trait_tec_cyborg_external_weaponry
					has_trait = trait_tec_cyborg_external_aesthetic
					has_trait = trait_tec_cyborg_external_skin
					has_trait = trait_tec_cyborg_external_connector
					has_trait = trait_tec_cyborg_external_climate_dry
					has_trait = trait_tec_cyborg_external_climate_wet
					has_trait = trait_tec_cyborg_external_climate_cold
					# External T2
					has_trait = trait_tec_cyborg_external_specialist
					has_trait = trait_tec_cyborg_external_multilimb
					has_trait = trait_tec_cyborg_external_climate_multi
				}
			}
		}
		else_if = {	# Superior Cybernetics (4)
			limit = {
				OR = {
					has_trait = trait_tec_superior_cybernetics_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t3
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_4_cybernetic_external_trait
				calc_true_if = {
					amount < 4
					# External T1
					has_trait = trait_tec_cyborg_external_worker
					has_trait = trait_tec_cyborg_external_weaponry
					has_trait = trait_tec_cyborg_external_aesthetic
					has_trait = trait_tec_cyborg_external_skin
					has_trait = trait_tec_cyborg_external_connector
					has_trait = trait_tec_cyborg_external_climate_dry
					has_trait = trait_tec_cyborg_external_climate_wet
					has_trait = trait_tec_cyborg_external_climate_cold
					# External T2
					has_trait = trait_tec_cyborg_external_specialist
					has_trait = trait_tec_cyborg_external_multilimb
					has_trait = trait_tec_cyborg_external_climate_multi
				}
			}
		}
		else = {	# No Cybernetics (0)
			custom_tooltip = {
				fail_text = tec_no_cybernetic_trait
				always = no
			}
		}
	}
	# Cyberdeck
	tec_has_cybernetic_deck_trait = {
		OR = {
			# Deck T1
			has_trait = trait_tec_cyborg_deck_loyalty
			has_trait = trait_tec_cyborg_deck_trading
			has_trait = trait_tec_cyborg_deck_joywire
			# Deck T2
			has_trait = trait_tec_cyborg_deck_stappled
			has_trait = trait_tec_cyborg_deck_servient
			has_trait = trait_tec_cyborg_deck_automodding
		}
	}
	tec_cybernetic_deck_trait_tooltip = {
		hidden_trigger = {
			exists = from
		}
		if = {	# Limited Cybernetics (0)
			limit = {
				OR = {
					has_trait = trait_limited_cybernetic
					has_trait = trait_tec_bioware_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t1
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_full_cyborgs_support_decks
				#calc_true_if = {
				#	amount < 1
				#	# Deck T1
				#	has_trait = trait_tec_cyborg_deck_loyalty
				#	has_trait = trait_tec_cyborg_deck_trading
				#	has_trait = trait_tec_cyborg_deck_joywire
				#	# Deck T2
				#	has_trait = trait_tec_cyborg_deck_stappled
				#	has_trait = trait_tec_cyborg_deck_servient
				#	has_trait = trait_tec_cyborg_deck_automodding
				#}
				always = no
			}
		}
		else_if = {	# Cybernetics (1)
			limit = {
				OR = {
					has_trait = trait_cybernetic
					has_trait = trait_tec_replicant_main
					has_trait = trait_tec_cyberpsionic_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t2
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_1_cybernetic_deck_trait
				calc_true_if = {
					amount < 1
					# Deck T1
					has_trait = trait_tec_cyborg_deck_loyalty
					has_trait = trait_tec_cyborg_deck_trading
					has_trait = trait_tec_cyborg_deck_joywire
					# Deck T2
					has_trait = trait_tec_cyborg_deck_stappled
					has_trait = trait_tec_cyborg_deck_servient
					has_trait = trait_tec_cyborg_deck_automodding
				}
			}
		}
		else_if = {	# Superior Cybernetics (2)
			limit = {
				OR = {
					has_trait = trait_tec_superior_cybernetics_main
					from = {
						has_country_flag = tec_test_cybernetic_traits_t3
					}
				}
			}
			custom_tooltip = {
				fail_text = tec_only_2_cybernetic_deck_trait
				calc_true_if = {
					amount < 2
					# Deck T1
					has_trait = trait_tec_cyborg_deck_loyalty
					has_trait = trait_tec_cyborg_deck_trading
					has_trait = trait_tec_cyborg_deck_joywire
					# Deck T2
					has_trait = trait_tec_cyborg_deck_stappled
					has_trait = trait_tec_cyborg_deck_servient
					has_trait = trait_tec_cyborg_deck_automodding
				}
			}
		}
		else = {	# No Cybernetics (0)
			custom_tooltip = {
				fail_text = tec_no_cybernetic_trait
				always = no
			}
		}
	}
 # /