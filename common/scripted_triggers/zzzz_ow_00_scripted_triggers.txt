# O V E R W R I T E
# 00_scripted_triggers.txt

# -------------------------------------
# Overwrites
# -------------------------------------
has_encountered_other_species = {
	OR = {
		# Vanilla
		has_origin = origin_syncretic_evolution
		has_origin = origin_necrophage
		has_civic = civic_machine_servitor
		num_communications > 0
		any_owned_pop = {
			NOR = {
				has_trait = "trait_mechanical" 
				has_trait = trait_tec_bioservant
			}
			NOT = { is_same_species = prev }
		}
		# Stellaris Evolved
		has_country_flag = tec_has_encountered_other_species
		has_valid_civic = civic_tec_origin_symbiotic_race
		has_valid_civic = civic_tec_origin_slave_race
	}
}

can_be_leader = {
	has_citizenship_rights = yes
	can_think = yes
	NOR = {
		tec_has_stapled_trait = yes
		tec_has_blocked_leader_trait = yes
	}

	OR = {
		is_robot_pop = no
		root = {
			OR = {
				has_technology = tech_synthetic_leaders
				is_machine_empire = yes
				is_mechanical_empire = yes
				is_individual_machine = yes
				# Evolved
				has_valid_civic = civic_tec_origin_mecha_perfectionists
			}
		}
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}
	# Evolved
	OR = {
		NOT = {
			has_trait = trait_tec_bioservant
		}
		root = { has_technology = tech_tec_bioservant_3 }
	}
	if = {
		limit = {
			has_trait = trait_tec_se_subspecies
		}
		OR = {
			is_same_species = root
			root = {
				OR = {
					has_country_flag = tec_gene_elder_cured
					has_country_flag = tec_replicant_elder_cured
					has_country_flag = tec_biopsionic_elder_cured
				}
			}
		}
	}
	# /
}

species_can_be_necrophaged = {
	NOR = {
		is_archetype = MACHINE
		is_archetype = ROBOT
		is_archetype = PRESAPIENT
		is_same_species = prev.owner_species
		AND = {
			has_citizenship_type = { type = citizenship_slavery country = prev.owner }
			has_slavery_type = { type = slavery_livestock country = prev.owner }
			prev.owner = { is_hive_empire = no }
		}
		has_citizenship_type = { type = citizenship_purge country = prev.owner }
	}
	OR = {
		species_has_happiness_with_owner = prev.owner
		has_trait = trait_tec_cyborg_mindless
		prev.owner = { has_valid_civic = civic_tec_hive_mindflayers }
	}
}


is_cyborg_empire = {
	OR = {
		owner_species = {
			has_trait = trait_cybernetic 
		}
		owner_species = {
			has_trait = trait_tec_superior_cybernetics_main
		}
		owner_species = {
			has_trait = trait_tec_cyberpsionic_main
		}
		#	owner_species = {
		#		has_trait = trait_tec_basic_cybernetics_main
		#	}
	}
}

# Scopes: country, leader, pop, army, (colony) ship
is_mechanical_species = {
	species = {
		OR = {
			has_trait = trait_machine_unit # Machine Intelligence
			has_trait = trait_mechanical # Robots & Synthetically-ascended Pops
		}
	}
}


is_hive_empire = {
	OR = {
		has_authority = auth_hive_mind
		has_authority = auth_tec_hive_biological
		has_authority = auth_tec_hive_cybernetic
		#has_authority = auth_tec_hive_biomechanical
	}
}

is_autocracy = { #Power of one
	OR = {
		has_ethic = ethic_gestalt_consciousness
        is_imperial_authority = yes
        is_dictatorial_authority = yes
		has_authority = auth_tec_patrocorporate
		AND = {
			tec_is_aiauth_empire = yes
			is_authoritarian = yes
		}
	}
}

is_oligarchy = { #Power of few
	OR = {
		is_oligarchic_authority = yes
		AND = {
			has_authority = auth_corporate
			is_egalitarian = no
		}
		AND = {
			tec_is_aiauth_empire = yes
			is_egalitarian = no
			is_authoritarian = no
		}
	}
}

is_democracy = { #Power of many
	OR = {
		is_democratic_authority = yes
		AND = {
			has_authority = auth_corporate
			is_egalitarian = yes
		}
		AND = {
			tec_is_aiauth_empire = yes
			is_egalitarian = yes
		}
	}
}

is_megacorp = {
	OR = {
		has_authority = auth_corporate
		has_authority = auth_tec_patrocorporate
		has_authority = auth_tec_ai_corporate
	}
}

has_corporate_government = {
	OR = {
		is_megacorp = yes
		has_civic = civic_galactic_sovereign_megacorp
	}
}
# These are not overwritten as evolved new authorities are their own type
# and will have own cyber swaps etc with tenets, essentially this might guarantee
# SOME compatibility with other mods that add auths, potentially
#
# is_democratic_authority
#
# is_oligarchic_authority
#
# is_imperial_authority
#
# is_dictatorial_authority
#
# is_cyber_democracy
#
# is_cyber_oligarchy
#
# is_cyber_dictatorial
#
# is_cyber_imperial
#
# is_synth_democracy
#
# is_synth_oligarchy
#
# is_synth_dictatorial
#
# is_synth_imperial

# Here we are in a pickle, we need to revert to auth check, or potentialy add is_corporate_authority
# which will need extra compat for other mods to behave the same for whatever the below is used

	is_corporate_authority = {
		OR = {
			has_authority = auth_corporate
		}
	}

	is_cyber_corporate = {
		is_corporate_authority = yes
		OR = {
			has_country_flag = cyber_individualist
			has_country_flag = cyber_collectivist
		}
	}

	is_synth_corporate = {
		is_corporate_authority = yes
		OR = {
			has_country_flag = synth_physical
			has_country_flag = synth_virtual
		}
	}

# /


tec_can_request_subsidiaries = {
	OR = {
		has_corporate_government = yes
		has_valid_civic = civic_tec_machine_traders
	}
}

is_reanimator = {
	OR = {
		has_valid_civic = civic_reanimated_armies
		has_valid_civic = civic_permanent_employment
		has_valid_civic = civic_hive_cordyceptic_drones

		has_ascension_perk = ap_mechromancy
		
		#Stellaris Evolved
		has_civic = civic_tec_corporate_reanimators
		has_civic = civic_tec_hive_necrophage
	}
}

uses_habitat_capitals = {
	OR = {
		# vanilla
		uses_district_set = habitat
		# gigas
		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				giga_uses_habitat_capitals = yes
				has_planet_flag = giga_habitat_capital_compat
			"
		}
		# PD planetary habitats
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				uses_district_set = pdplanethab
			"
		}
	}
}

is_scavenger = {
	OR = {
		has_valid_civic = civic_scavengers
		has_valid_civic = civic_corporate_scavengers
		
		# Evolved
			has_valid_civic = civic_tec_hive_scavengers
			has_valid_civic = civic_tec_machine_scavengers
		# 
	}
}

is_special_colony_type = {
	tec_is_special_colony = yes
} 

has_ringworld_output_boost = {
	OR = {
		AND = {
			tec_is_ringworld = yes
			inline_script = {
				script = mod_support/tec_giga_present
				code = "
					giga_has_ringworld_output_boost_exclusions = no
				"
			}
		}
		tec_uses_elysium_districts = yes

		inline_script = {
			script = mod_support/tec_giga_present
			code = "
				giga_has_ringworld_output_boost = yes
			"
		}

		inline_script = {
			script = mod_support/tec_trigger_include
			trigger = has_ringworld_output_boost
		}
	}

}



has_opposing_ethics = {
	inline_script = {
		script = tec_type_hint
		country_scope = $COUNTRY1$
		country_scope = $COUNTRY2$
	}
	OR = {
		inline_script = {
			script = iterators/tec_iterate_ethic_regular
			code = "
				AND = {
					\$COUNTRY1\$ = { is_\$ethic\$ = yes }
					\$COUNTRY2\$ = { is_\$opposing_ethic\$ = yes }
				}
			"
			COUNTRY1 = $COUNTRY1$
			COUNTRY2 = $COUNTRY2$
		}
	}
}

has_alternative_ethics = { # Consider THIS_SCOPE as the entity you are checking (e.g. a Pop), and REF_SCOPE as the reference point (e.g. an empire) you're checking against for ethical drift. Note that this trigger ignores directly opposing ethics.
	inline_script = {
		script = tec_type_hint
		tec_scope_with_ethic = $THIS_SCOPE$
		tec_scope_with_ethic = $REF_SCOPE$
	}
	OR = {
		inline_script = {
			script = iterators/tec_iterate_ethic_regular
			code = "
				AND = {
					\$THIS_SCOPE\$ = {
						is_\$ethic\$ = yes
					}
					\$REF_SCOPE\$ = {
						is_\$ethic\$ = no
						is_\$opposing_ethic\$ = no
					}
				}
			"
			THIS_SCOPE = $THIS_SCOPE$
			REF_SCOPE = $REF_SCOPE$
		}
	}
}


is_fanatical = {
	OR = {
		inline_script = {
			script = iterators/tec_iterate_ethic_regular
			code = "
				has_ethic = ethic_fanatic_\$ethic\$
			"
		}
	}
}

# I ABSOLUTELY HATE THE NAMING INCONSISTENCIES
# ^ me too, specially by how misleading they can be :(	(@ rodahtnov 12-03)
has_any_industry_district = {
	check_variable_arithmetic = {
		which = value:industrial_districts_value
		value > 0
	}
}


has_any_farming_district_or_buildings = {
	check_variable_arithmetic = {
		which = value:farming_combined_value|CACHED|yes|
		value > 0
	}
}

has_any_mining_district = {
	check_variable_arithmetic = {
		which = value:mining_combined_value|CACHED|yes|
		value > 0
	}
}

has_any_generator_district_or_building = {
	check_variable_arithmetic = {
		which = value:generator_combined_value|CACHED|yes|
		value > 0
	}
}

has_research_building = {
	check_variable_arithmetic = {
		which = value:research_combined_value|CACHED|yes|
		value > 0
	}
}

should_ai_focus_on_trade = {	# Paragon
	is_ai = yes
	OR = {
		has_ai_personality = peaceful_traders
		has_ai_personality = ruthless_capitalists
	}
	owner_main_species = {
		OR = {
			has_trait = "trait_thrifty"
			has_trait = "trait_cyborg_trading_algorithms"
			has_trait = "trait_robot_trading_algorithms"
		}
	}
}

is_gestalt_node = {	# Paragon
	OR = {
		is_councilor_type = councilor_gestalt_growth
		is_councilor_type = councilor_gestalt_cognitive
		is_councilor_type = councilor_gestalt_legion
		is_councilor_type = councilor_gestalt_regulatory
	}
}

can_think = {
	NOR = {
		has_trait = trait_nerve_stapled
		has_trait = trait_robot_suppressed
		has_trait = trait_zombie
		tec_has_stapled_trait = { cached = yes }
	}
}

is_default_or_fallen = {
	OR = {
		is_country_type = default

		is_country_type = default_exocolonist
		is_country_type = default_exocolonist_ai

		is_country_type = fallen_empire
		is_country_type = awakened_fallen_empire #for checks in buildings

		AND = {
			has_global_flag = zofe_activated
			is_zofe_compatible = yes
		}
	}
}

can_build_megastructures = {
	OR = {
		has_technology = tech_gateway_construction
		has_technology = tech_ring_world
		has_technology = tech_orbital_ring_tier_1
		has_technology = tech_hyper_relays
		has_technology = tech_quantum_catapult
		has_technology = tech_cosmogenesis_world

		can_build_unity_megastructures = yes

		# Evolved
		has_technology = tech_elysium_ring
	}
}


# Caelum
is_worker_coop_empire = {
	#has_valid_civic = civic_worker_coop
	tec_is_worker_coop_empire = yes
}

values_others = {
	OR = {
		is_xenophile = yes
		has_ethic = ethic_gestalt_empathy
		AND = {
			NOT = {
				has_ethic = ethic_gestalt_apathy
			}
			has_valid_civic = civic_machine_servitor
		}
		has_valid_civic = civic_hive_empath
		has_valid_civic = civic_machine_exploration_protocol
		tec_is_fruitful_empire = yes
	}
}

has_councilor = {
	exists = owner
	owner = {
		check_variable_arithmetic = {
			which = value:councilor_level|TYPE|$COUNCILOR$|
			value > 0
		}
	}
}

is_xenophage = {
	tec_is_xenophage = { cached = yes }
}

blocks_minister_of_state = {
	OR = {
		is_gestalt = yes
		has_valid_civic = civic_inwards_perfection
		has_valid_civic = civic_fanatic_purifiers
	}
}

# Will leave these for later TODO
has_engineered_evolution_synergy = {
	OR = {
		has_origin = origin_syncretic_evolution
		has_origin = origin_life_seeded
		has_origin = origin_necrophage
		has_origin = origin_clone_army
		# evolved
		has_origin = origin_tec_bioservant
		has_origin = origin_tec_clones
		tec_is_evolutionary_empire = yes
	}
}

has_flesh_is_weak_anti_synergy = {
	is_materialist = no
}

has_organo_machine_interfacing_assimilator_synergy = {
	has_civic = civic_machine_assimilator
}

has_synthetic_evolution_synergy = {
	OR = {
		has_origin = origin_mechanists
		tec_is_machine_cult = yes
		has_civic = civic_tec_corporate_automatation
	}

}

has_synthetic_evolution_anti_synergy = {
	is_materialist = no
}

blocks_ai_synthetic_evolution = {
	OR = {
		has_policy_flag = ai_outlawed
		has_policy_flag = robots_outlawed
		has_origin = origin_necrophage
		has_origin = origin_clone_army
		has_origin = origin_overtuned
		has_origin = origin_slavers
		tec_is_idyllic_bloom_empire = yes

		# evolved
		has_origin = origin_tec_bioservant
		has_origin = origin_tec_clones
		AND = {
			has_origin = origin_syncretic_evolution
			has_civic = civic_tec_origin_elders
		}
		has_civic = civic_tec_origin_neuroslug

	}
}

has_mind_over_matter_synergy = {
	OR = {
		has_ascension_perk = ap_become_the_crisis
		has_origin = origin_demonic_incursion
		has_country_flag = knights_met_end_of_cycle
		# evolved
		tec_is_spiritual_seekers = yes
	}
}

has_mind_over_matter_anti_synergy = {
	is_spiritualist = no
}

has_synthetic_age_anti_synergy = {
	has_civic = civic_machine_assimilator
}

# Astral Planes
prefers_scientist_governors = {
	OR = {
		has_valid_civic = civic_technocracy
		has_valid_civic = civic_tec_regular_science_directorate
		has_valid_civic = civic_tec_regular_scientific_belief
		has_valid_civic = civic_tec_corporate_scientific_corp
		has_valid_civic = civic_tec_corporate_innovative
	}
}

prefers_commander_governors = {
	OR = {
		has_valid_civic = civic_barbaric_despoilers
	}
}

# Machine Age
has_auto_modding_trait = {
	OR = {
		# Vanilla
		has_trait = trait_auto_mod_biological
		has_trait = trait_auto_mod_cyborg
		has_trait = trait_auto_mod_robotic
		has_trait = trait_auto_mod_overtuned
		# Evolved
			# gene
		has_trait = trait_tec_gene_automodding_t1
		has_trait = trait_tec_gene_automodding_t2
		has_trait = trait_tec_gene_automodding_t3
			# cyb
		has_trait = trait_tec_cyborg_mainframe_automodding
		has_trait = trait_tec_cyborg_mainframe_super_automodding
		has_trait = trait_tec_cyborg_deck_automodding
	}
}

# ========================	U N U S E D		/	D E P R E C A T E D	========================
# Ruler upkeep
#has_leader_upkeep = {	# UNUSED
	#exists = owner
	#OR = {
	#	is_idle = yes
	#	AND = {
	#		owner = { tec_removes_unity_upkeep_from_all_leaders = no }
	#		switch = {
	#			trigger = leader_class
	#			official = {
	#				owner = {
	#					tec_reduces_upkeep_from_officials = no
	#				}
	#			}
	#			commander = {
	#				owner = {
	#					tec_reduces_upkeep_from_commanders = no
	#				}
	#			}
	#			scientist = {
	#				owner = {
	#					tec_reduces_upkeep_from_scientists = no
	#				}
	#			}
	#			default = {
	#				always = no
	#			}
	#		}
	#	}
	#}
#}

is_anglers_empire = {
	tec_is_aquatic_empire = yes
}

has_sr_deposit = {
	OR = {
		check_variable_arithmetic = {
			which = modifier:building_mote_harvesters_max
			value > 0
		}
		check_variable_arithmetic = {
			which = modifier:building_gas_extractors_max
			value > 0
		}
		check_variable_arithmetic = {
			which = modifier:building_crystal_mines_max
			value > 0
		}
	}
}

can_obtain_volatile_motes = {
	custom_tooltip = {
		fail_text = must_have_access_to_volatile_motes_tt
		tec_can_produce_volatile_motes = yes
	}
}

can_obtain_rare_crystals = {
	custom_tooltip = {
		fail_text = must_have_access_to_rare_crystals_tt
		tec_can_produce_rare_crystals = yes
	}
}

