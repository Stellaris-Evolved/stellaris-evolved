
# O V E R W R I T E 
#00_scripted_effects

wipe_pop_ethos = {
	if = {
		limit = { pop_has_ethic = ethic_fanatic_egalitarian }
		pop_remove_ethic = ethic_fanatic_egalitarian
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_authoritarian }
		pop_remove_ethic = ethic_fanatic_authoritarian
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_pacifist }
		pop_remove_ethic = ethic_fanatic_pacifist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_militarist }
		pop_remove_ethic = ethic_fanatic_militarist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_xenophobe }
		pop_remove_ethic = ethic_fanatic_xenophobe
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_xenophile }
		pop_remove_ethic = ethic_fanatic_xenophile
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_materialist }
		pop_remove_ethic = ethic_fanatic_materialist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_spiritualist }
		pop_remove_ethic = ethic_fanatic_spiritualist
	}
	if = {
		limit = { pop_has_ethic = ethic_egalitarian }
		pop_remove_ethic = ethic_egalitarian
	}
	if = {
		limit = { pop_has_ethic = ethic_authoritarian }
		pop_remove_ethic = ethic_authoritarian
	}
	if = {
		limit = { pop_has_ethic = ethic_pacifist }
		pop_remove_ethic = ethic_pacifist
	}
	if = {
		limit = { pop_has_ethic = ethic_militarist }
		pop_remove_ethic = ethic_militarist
	}
	if = {
		limit = { pop_has_ethic = ethic_xenophobe }
		pop_remove_ethic = ethic_xenophobe
	}
	if = {
		limit = { pop_has_ethic = ethic_xenophile }
		pop_remove_ethic = ethic_xenophile
	}
	if = {
		limit = { pop_has_ethic = ethic_materialist }
		pop_remove_ethic = ethic_materialist
	}
	if = {
		limit = { pop_has_ethic = ethic_spiritualist }
		pop_remove_ethic = ethic_spiritualist
	}
 #new
	if = {
		limit = { pop_has_ethic = ethic_ecologist }
		pop_remove_ethic = ethic_ecologist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_ecologist }
		pop_remove_ethic = ethic_fanatic_ecologist
	}
	if = {
		limit = { pop_has_ethic = ethic_industrialist }
		pop_remove_ethic = ethic_industrialist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_industrialist }
		pop_remove_ethic = ethic_fanatic_industrialist
	}
	if = {
		limit = { pop_has_ethic = ethic_competitive }
		pop_remove_ethic = ethic_competitive
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_competitive }
		pop_remove_ethic = ethic_fanatic_competitive
	}
	if = {
		limit = { pop_has_ethic = ethic_cooperative }
		pop_remove_ethic = ethic_cooperative
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_cooperative }
		pop_remove_ethic = ethic_fanatic_cooperative
	}
	if = {
		limit = { pop_has_ethic = ethic_pluralist }
		pop_remove_ethic = ethic_pluralist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_pluralist }
		pop_remove_ethic = ethic_fanatic_pluralist
	}
	if = {
		limit = { pop_has_ethic = ethic_elitist }
		pop_remove_ethic = ethic_elitist
	}
	if = {
		limit = { pop_has_ethic = ethic_fanatic_elitist }
		pop_remove_ethic = ethic_fanatic_elitist
	}
}

pop_diverge_ethic = {
	if = {
		limit = {
			has_ethic = ethic_militarist
			has_pop_flag = ethic_diverge_from_militarist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_militarist
			}
			has_pop_flag = ethic_diverge_from_militarist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_pacifist
			has_pop_flag = ethic_diverge_from_pacifist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_pacifist
			}
			has_pop_flag = ethic_diverge_from_pacifist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_materialist
			has_pop_flag = ethic_diverge_from_materialist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_materialist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_materialist
			}
			has_pop_flag = ethic_diverge_from_materialist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_pacifist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_spiritualist
			has_pop_flag = ethic_diverge_from_spiritualist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_spiritualist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_spiritualist
			}
			has_pop_flag = ethic_diverge_from_spiritualist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_militarist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_authoritarian
			has_pop_flag = ethic_diverge_from_authoritarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_authoritarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_authoritarian
			}
			has_pop_flag = ethic_diverge_from_authoritarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_egalitarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_egalitarian
			has_pop_flag = ethic_diverge_from_egalitarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_egalitarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_egalitarian
			}
			has_pop_flag = ethic_diverge_from_egalitarian
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_authoritarian
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_ecologist
			has_pop_flag = ethic_diverge_from_ecologist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_ecologist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_ecologist
			}
			has_pop_flag = ethic_diverge_from_ecologist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_industrialist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_industrialist
			has_pop_flag = ethic_diverge_from_industrial
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_industrialist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_industrialist
			}
			has_pop_flag = ethic_diverge_from_industrial
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_ecologist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_cooperative
			has_pop_flag = ethic_diverge_from_cooperative
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_cooperative
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_cooperative
			}
			has_pop_flag = ethic_diverge_from_cooperative
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_competitive
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_competitive
			has_pop_flag = ethic_diverge_from_competitive
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_competitive
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_competitive
			}
			has_pop_flag = ethic_diverge_from_competitive
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_cooperative
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_pluralist
			has_pop_flag = ethic_diverge_from_pluralist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_pluralist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_pluralist
			}
			has_pop_flag = ethic_diverge_from_pluralist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_elitist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			has_ethic = ethic_elitist
			has_pop_flag = ethic_diverge_from_elitist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_remove_ethic = ethic_elitist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {
		limit = {
			NOT = {
				has_ethic = ethic_elitist
			}
			has_pop_flag = ethic_diverge_from_elitist
			NOT = { has_pop_flag = pop_changed_ethics }
		}
		pop_change_ethic = ethic_pluralist
		set_timed_pop_flag = { flag = pop_changed_ethics days = 7 }
	}
	if = {	# this will never happen and i include it to avoid the errors
		limit = {
			pop_has_ethic = ethic_gestalt_consciousness
		}
		set_pop_flag = ethic_diverge_from_xenophile
		set_pop_flag = ethic_diverge_from_xenophobe
		set_pop_flag = ethic_diverge_from_militarist
		set_pop_flag = ethic_diverge_from_pacifist
		set_pop_flag = ethic_diverge_from_materialist
		set_pop_flag = ethic_diverge_from_spiritualist
		set_pop_flag = ethic_diverge_from_authoritarian
		set_pop_flag = ethic_diverge_from_egalitarian
		set_pop_flag = ethic_diverge_from_ecologist
		set_pop_flag = ethic_diverge_from_industrial
		set_pop_flag = ethic_diverge_from_cooperative
		set_pop_flag = ethic_diverge_from_competitive
		set_pop_flag = ethic_diverge_from_pluralist
		set_pop_flag = ethic_diverge_from_elitist
	}
}



# R E M I N D E R - other traits are handled by other events
	# events = {
	# 	utopia.2509 # New Leaders Get Erudite Trait
	# 	utopia.2510	# New Leaders Get Cyborg Trait
	# 	utopia.2560	# New Leaders Get Synthetic Trait
	# 	utopia.2651	# New Leaders Get Psionic Trait
	# 	utopia.6000 # hive mind ruler gets hive mind trait to make them immortal
	# 	syndaw.1050 # Machine Intelligence ruler gets trait
	# 	distar.173 # New Leaders Get Brainslug Trait
	# }
#

#TRAIT HANDLER
add_leader_traits_after_modification = {
	if = {
		limit = {
			tec_leader_cannot_take_species_traits = no
		}
		tec_add_leader_traits_after_modification = yes
	}
}

tec_add_leader_traits_after_modification = {
	# Generic

	# Origin
		if = {	# Mutualistic
			limit = {
				NOT = { has_trait = leader_trait_tec_pu_neuroslug }
				species = {
					has_trait = trait_tec_pu_neuroslug
				}
				owner = {
					has_valid_civic = civic_tec_origin_neuroslug
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_pu_neuroslug }
				}
				add_trait_no_notify = leader_trait_tec_pu_neuroslug
			}
		}

		if = {	# Clone nation
			limit = {
				NOT = { has_trait = leader_trait_tec_clone_origin }
				species = {
					has_trait = trait_tec_clone_origin
				}
				owner = {
					has_origin = origin_tec_clones
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_clone_origin }
				}
				add_trait_no_notify = leader_trait_tec_clone_origin
			}
		}
	# /
	# Psionic Ascension
		if = {	# trait_tec_psionic_brain - commander scientist
			limit = {
				NOT = { has_trait = leader_trait_tec_psionic_mind }
				species = {
					tec_is_any_psionic_species = yes
					has_trait = trait_tec_psionic_mind
				}
				OR = {
					leader_class = commander
					leader_class = scientist
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_psionic_mind }
				}
				random = {
					chance = 10
					add_trait_no_notify = leader_trait_tec_psionic_mind
				}
			}
		}
		#if = {	# trait_tec_psionic_body- generals
		#	limit = {
		#		NOT = { has_trait = leader_trait_tec_psionic_body }
		#		species = {
		#			tec_is_any_psionic_species = yes
		#			has_trait = trait_tec_psionic_body
		#		}
		#		leader_class = general
		#	}
		#	if = {
		#		limit = {
		#			NOT = { has_trait = leader_trait_tec_psionic_body }
		#		}
		#		random = {
		#			chance = 10
		#			add_trait_no_notify = leader_trait_tec_psionic_body
		#		}
		#	}
		#}
		if = {	# trait_tec_psionic_unity- commander&gov
			limit = {
				NOT = { has_trait = leader_trait_tec_psionic_unity }
				species = {
					tec_is_any_psionic_species = yes
					has_trait = trait_tec_psionic_unity
				}
				OR = {
					leader_class = commander
					leader_class = official
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_psionic_unity }
				}
				random = {
					chance = 10
					add_trait_no_notify = leader_trait_tec_psionic_unity
				}
			}
		}
		if = {	# trait_tec_psionic_energy- commanders&ruler
			limit = {
				NOT = { has_trait = leader_trait_tec_psionic_energy }
				species = {
					tec_is_any_psionic_species = yes
					has_trait = trait_tec_psionic_energy
				}
				OR = {
					leader_class = commander
					is_ruler = yes
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_psionic_energy }
				}
				random = {
					chance = 10
					add_trait_no_notify = leader_trait_tec_psionic_energy
				}
			}
		}
		#if = {	# trait_tec_psionic_telekinesis - generals
		#	limit = {
		#		NOT = { has_trait = leader_trait_tec_psionic_telekinesis }
		#		species = {
		#			tec_is_any_psionic_species = yes
		#			has_trait = trait_tec_psionic_telekinesis
		#		}
		#		leader_class = general
		#	}
		#	if = {
		#		limit = {
		#			NOT = { has_trait = leader_trait_tec_psionic_telekinesis }
		#		}
		#		random = {
		#			chance = 10
		#			add_trait_no_notify = leader_trait_tec_psionic_telekinesis
		#		}
		#	}
		#}
		if = {	# trait_tec_psionic_teleport - commander&gov
			limit = {
				NOT = { has_trait = leader_trait_tec_psionic_teleport }
				species = {
					tec_is_any_psionic_species = yes
					has_trait = trait_tec_psionic_teleport
				}
				OR = {
					leader_class = commander
					leader_class = official
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_psionic_teleport }
				}
				random = {
					chance = 10
					add_trait_no_notify = leader_trait_tec_psionic_teleport
				}
			}
		}
	
	# /
	# Genetic Ascension
		if = {	# trait_erudite - ALL
			limit = {
				NOT = {	has_trait = leader_trait_erudite }
				species = {
					has_trait = trait_erudite
				}
			}
			if = {
				limit = {
					NOT = {	has_trait = leader_trait_erudite }
				}
				add_trait_no_notify = leader_trait_erudite
			}
		}
		if = {	# trait_tec_gene_genius_t2/3 - ALL
			limit = {
				NOT = { has_trait = leader_trait_tec_gene_genius }
				species = {
					tec_has_genetic_main_traits = yes
					OR = {
						has_trait = trait_tec_gene_genius_t1
						has_trait = trait_tec_gene_genius_t2
						has_trait = trait_tec_gene_genius_t3
					}
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_gene_genius }
				}
				add_trait_no_notify = leader_trait_tec_gene_genius
			}
		}
		if = {	# trait_tec_gene_fertile_t2/3 - gov ruler
			limit = {
				NOT = { has_trait = leader_trait_tec_gene_fertile }
				species = {
					tec_has_genetic_main_traits = yes
					OR = {
						has_trait = trait_tec_gene_fertile_t2
						has_trait = trait_tec_gene_fertile_t3
					}
				}
				OR = {
					leader_class = official
					is_ruler = yes
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_gene_fertile }
				}
				add_trait_no_notify = leader_trait_tec_gene_fertile
			}
		}
		if = {	# trait_tec_gene_will_t2/3 - ALL
			limit = {
				NOT = { has_trait = leader_trait_tec_gene_will }
				species = {
					tec_has_genetic_main_traits = yes
					OR = {
						has_trait = trait_tec_gene_will_t2
						has_trait = trait_tec_gene_will_t3
					}
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_gene_will }
				}
				add_trait_no_notify = leader_trait_tec_gene_will
			}
		}
		if = {	# trait_tec_gene_robust_t2/3 - commander
			limit = {
				NOT = { has_trait = leader_trait_tec_gene_robust }
				species = {
					tec_has_genetic_main_traits = yes
					OR = {
						has_trait = trait_tec_gene_robust_t2
						has_trait = trait_tec_gene_robust_t3
					}
				}
				leader_class = commander
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_gene_robust }
				}
				add_trait_no_notify = leader_trait_tec_gene_robust
			}
		}
		if = {	# trait_tec_gene_audacious_t2/3 - commander
			limit = {
				NOT = { has_trait = leader_trait_tec_gene_audacious }
				species = {
					tec_has_genetic_main_traits = yes
					OR = {
						has_trait = trait_tec_gene_audacious_t2
						has_trait = trait_tec_gene_audacious_t3
					}
				}
				leader_class = commander
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_gene_audacious }
				}
				add_trait_no_notify = leader_trait_tec_gene_audacious
			}
		}
	# /
	# Cybernetic Ascension
		if = {	# trait_cybernetic
			limit = {
				NOT = { has_trait = leader_trait_cyborg }
				species = {
					has_trait = trait_cybernetic
				}
				exists = owner
				owner = {
					if = {
						limit = {
							tec_has_cybernetic_ascension_path_exception = yes
						}
						tec_has_cybernetic_ascension_path = yes
					}
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_cyborg }
				}
				add_trait_no_notify = leader_trait_cyborg
			}
		}
		if = {	# trait_tec_superior_cybernetics_main
			limit = {
				NOT = { has_trait = leader_trait_tec_superior_cybernetics_main }
				species = {
					has_trait = trait_tec_superior_cybernetics_main
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_superior_cybernetics_main }
				}
				add_trait_no_notify = leader_trait_tec_superior_cybernetics_main
			}
		}
	# /
	# Biomechanical Ascension
		if = {	# trait_tec_replicant_main - ALL
			limit = {
				NOT = { has_trait = leader_trait_tec_replicant_main }
				species = {
					has_trait = trait_tec_replicant_main
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_replicant_main }
				}
				add_trait_no_notify = leader_trait_tec_replicant_main
			}
		}
	# /
	# Biopsionic Ascension
		if = {	# trait_tec_biopsionic_main - ALL
			limit = {
				NOT = { has_trait = leader_trait_tec_biopsionic_main }
				species = {
					has_trait = trait_tec_biopsionic_main
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_biopsionic_main }
				}
				add_trait_no_notify = leader_trait_tec_biopsionic_main
			}
		}
	# /
	# Cyberpsionic Ascension
		if = {	# trait_tec_cyberpsionic_main - ALL
			limit = {
				NOT = { has_trait = leader_trait_tec_cyberpsionic_main }
				species = {
					has_trait = trait_tec_cyberpsionic_main
				}
			}
			if = {
				limit = {
					NOT = { has_trait = leader_trait_tec_cyberpsionic_main }
				}
				add_trait_no_notify = leader_trait_tec_cyberpsionic_main
			}
		}
	# /
	# Synthetics
	if = {	# leader_trait_synthetic - ALL
		limit = {
			NOT = { has_trait = leader_trait_synthetic }
			tec_is_aiauth_node = no
			OR = {
				species = { has_trait = trait_mechanical }
				AND = {
					species = { has_trait = trait_machine_unit }
					is_gestalt_node = no
					owner = { has_country_flag = tec_machine_synthetic_trait }
				}
			}
			tec_leader_cannot_take_species_traits = no
			owner = { NOT = { has_country_flag = tec_invalidates_synthetic_leader_trait } }
		}
		add_trait_no_notify = leader_trait_synthetic
	}
	# Synthetics t2 (TO DO - SCRAP)
		# if = {
		# 	limit = {
		# 		species = {
		# 			has_trait = trait_tec_robot_megaform
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			NOT = { has_trait = leader_trait_tec_robot_megaform }
		# 		}
		# 		add_trait_no_notify = leader_trait_tec_robot_megaform
		# 	}
		# }
		#transmorpher - tec_robot_transmorpher- commander
		# if = {
		# 	limit = {
		# 		species = {
		# 			has_trait = trait_tec_robot_transmorpher
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			NOT = { has_trait = leader_trait_tec_robot_transmorpher }
		# 		}
		# 		add_trait_no_notify = leader_trait_tec_robot_transmorpher
		# 	}
		# }
		# if = {
		# 	limit = {
		# 		species = {
		# 			has_trait = trait_tec_robot_shroud
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			NOT = { has_trait = leader_trait_tec_robot_shroud }
		# 		}
		# 		add_trait_no_notify = leader_trait_tec_robot_shroud
		# 	}
		# }
	# /
}

remove_leader_traits_after_modification = {
	# Generic

	# /
	# Origin
		if = {	# Mutualistic
			limit = {
				has_trait = leader_trait_tec_pu_neuroslug
				species = {
					NOT = { has_trait = trait_tec_pu_neuroslug }
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_pu_neuroslug
				}
				remove_trait = leader_trait_tec_pu_neuroslug
			}
		}

		if = {	# Clone nation
			limit = {
				has_trait = leader_trait_tec_clone_origin
				OR = {
					species = {
						NOT = { has_trait = trait_tec_clone_origin }
					}
					owner = {
						NOT = {
							has_origin = origin_tec_clones
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_clone_origin
				}
				remove_trait = leader_trait_tec_clone_origin
			}
		}
	# /
	# Psionic Ascension
		if = {	# trait_tec_psionic_brain - researchers
			limit = {
				has_trait = leader_trait_tec_psionic_mind
				species = {
					OR = {
						tec_is_any_psionic_species = no
						NOT = {
							has_trait = trait_tec_psionic_mind
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_psionic_mind
				}
				remove_trait = leader_trait_tec_psionic_mind
			}
		}
		#if = {	# trait_tec_psionic_body- generals
		#	limit = {
		#		has_trait = leader_trait_tec_psionic_body
		#		species = {
		#			OR = {
		#				tec_is_any_psionic_species = no
		#				NOT = {
		#					has_trait = trait_tec_psionic_body
		#				}
		#			}
		#		}
		#	}
		#	if = {
		#		limit = {
		#			has_trait = leader_trait_tec_psionic_body
		#		}
		#		remove_trait = leader_trait_tec_psionic_body
		#	}
		#}
		if = {	# trait_tec_psionic_unity- commanders&gov
			limit = {
				has_trait = leader_trait_tec_psionic_unity
				species = {
					OR = {
						tec_is_any_psionic_species = no
						NOT = {
							has_trait = trait_tec_psionic_unity
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_psionic_unity
				}
				remove_trait = leader_trait_tec_psionic_unity
			}
		}
		if = {	# trait_tec_psionic_energy- commander&ruler
			limit = {
				has_trait = leader_trait_tec_psionic_energy
				species = {
					OR = {
						tec_is_any_psionic_species = no
						NOT = {
							has_trait = trait_tec_psionic_energy
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_psionic_energy
				}
				remove_trait = leader_trait_tec_psionic_energy
			}
		}
		if = {	# trait_tec_psionic_telekinesis - generals
			limit = {
				has_trait = leader_trait_tec_psionic_telekinesis
				species = {
					OR = {
						tec_is_any_psionic_species = no
						NOT = {
							has_trait = trait_tec_psionic_telekinesis
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_psionic_telekinesis
				}
				remove_trait = leader_trait_tec_psionic_telekinesis
			}
		}
		if = {	# trait_tec_psionic_teleport - commander&gov
			limit = {
				has_trait = leader_trait_tec_psionic_teleport
				species = {
					OR = {
						tec_is_any_psionic_species = no
						NOT = {
							has_trait = trait_tec_psionic_teleport
						}
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_psionic_teleport
				}
				remove_trait = leader_trait_tec_psionic_teleport
			}
		}
	# /
	# Genetic Ascension
		if = {	# trait_erudite - ALL
			limit = {
				has_trait = leader_trait_erudite
				species = {
					NOT = {
						has_trait = trait_erudite 
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_erudite
				}
				remove_trait = leader_trait_erudite
			}
		}
		if = {	# trait_tec_gene_genius_t2/3 - ALL
			limit = {
				has_trait = leader_trait_tec_gene_genius
				species = {
					NOR = {
						has_trait = trait_tec_gene_genius_t1
						has_trait = trait_tec_gene_genius_t2
						has_trait = trait_tec_gene_genius_t3
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_gene_genius
				}
				remove_trait = leader_trait_tec_gene_genius
			}
		}
		if = {	# trait_tec_gene_fertile_t2/3 - gov ruler
			limit = {
				has_trait = leader_trait_tec_gene_fertile
				species = {
					NOR = {
						has_trait = trait_tec_gene_fertile_t2
						has_trait = trait_tec_gene_fertile_t3
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_gene_fertile
				}
				remove_trait = leader_trait_tec_gene_fertile
			}
		}
		if = {	# trait_tec_gene_will_t2/3 - ALL
			limit = {
				has_trait = leader_trait_tec_gene_will
				species = {
					NOR = {
						has_trait = trait_tec_gene_will_t2
						has_trait = trait_tec_gene_will_t3
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_gene_will
				}
				remove_trait = leader_trait_tec_gene_will
			}
		}
		if = {	# trait_tec_gene_robust_t2/3 - commander
			limit = {
				has_trait = leader_trait_tec_gene_robust
				species = {
					NOR = {
						has_trait = trait_tec_gene_robust_t2
						has_trait = trait_tec_gene_robust_t3
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_gene_robust
				}
				remove_trait = leader_trait_tec_gene_robust
			}
		}
		if = {	# trait_tec_gene_audacious_t2/3 - commander
			limit = {
				has_trait = leader_trait_tec_gene_audacious
				species = {
					NOR = {
						has_trait = trait_tec_gene_audacious_t2
						has_trait = trait_tec_gene_audacious_t3
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_gene_audacious
				}
				remove_trait = leader_trait_tec_gene_audacious
			}
		}
	# /
	# Cybernetic Ascension
		if = {	# trait_cybernetic
			limit = {
				has_trait = leader_trait_cyborg
				species = {
					NOT = {
						has_trait = trait_cybernetic
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_cyborg
				}
				remove_trait = leader_trait_cyborg
			}
		}
		if = {	# trait_tec_superior_cybernetics_main
			limit = {
				has_trait = leader_trait_tec_superior_cybernetics_main
				species = {
					NOT = {
						has_trait = trait_tec_superior_cybernetics_main
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_superior_cybernetics_main
				}
				remove_trait = leader_trait_tec_superior_cybernetics_main
			}
		}
	# /
	# Biomechanical Ascension
		if = {	# trait_tec_replicant_main - ALL
			limit = {
				has_trait = leader_trait_tec_replicant_main
				species = {
					NOT = {
						has_trait = trait_tec_replicant_main
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_replicant_main
				}
				remove_trait = leader_trait_tec_replicant_main
			}
		}
	# /
	# Biopsionic Ascension
		if = {	# trait_tec_biopsionic_main - ALL
			limit = {
				has_trait = leader_trait_tec_biopsionic_main
				species = {
					NOR = {
						has_trait = trait_tec_biopsionic_main
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_biopsionic_main
				}
				remove_trait = leader_trait_tec_biopsionic_main
			}
		}
	# /
	# Cyberpsionic Ascension
		if = {	# trait_tec_cyberpsionic_main - ALL
			limit = {
				has_trait = leader_trait_tec_cyberpsionic_main
				species = {
					NOT = {
						has_trait = trait_tec_cyberpsionic_main
					}
				}
			}
			if = {
				limit = {
					has_trait = leader_trait_tec_cyberpsionic_main
				}
				remove_trait = leader_trait_tec_cyberpsionic_main
			}
		}
	# /
	# Synthetics
		if = {	# trait_tec_cyberpsionic_main - ALL
			limit = {
				has_trait = leader_trait_synthetic
				species = {
					NOR = {
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			remove_trait = leader_trait_synthetic
		}
	# /
	# Synthetics t2 (TO DO - SCRAP)
			#megaform - tec_robot_megaform - all leaders
		# if = {
		# 	limit = {
		# 		species = {
		# 			NOT = {
		# 				has_trait = trait_tec_robot_megaform
		# 			}
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			has_trait = leader_trait_tec_robot_megaform
		# 		}
		# 		remove_trait = leader_trait_tec_robot_megaform
		# 	}
		# }
		# #transmorpher - tec_robot_transmorpher- commander
		# if = {
		# 	limit = {
		# 		species = {
		# 			NOT = {
		# 				has_trait = trait_tec_robot_transmorpher
		# 			}
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			has_trait = leader_trait_tec_robot_transmorpher
		# 		}
		# 		remove_trait = leader_trait_tec_robot_transmorpher
		# 	}
		# }

		# Psi mechanic shroud processor trait
		# if = {
		# 	limit = {
		# 		species = {
		# 			NOT = {
		# 				has_trait = trait_tec_robot_shroud
		# 			}
		# 		}
		# 	}
		# 	if = {
		# 		limit = {
		# 			has_trait = leader_trait_tec_robot_shroud
		# 		}
		# 		remove_trait = leader_trait_tec_robot_shroud
		# 	}
		# }
	# /
}

# FIRST CONTACT EXOCOLONIST TWEAK
# first_contact scope. Putting here so it's easy to find again
set_first_contact_starting_stage = {
	if = {
		limit = {
			contact_country = {
				is_country_type = dragon_dummy
			}
		}
		custom_tooltip = start_dragon_communications_study
	}
	else_if = {
		limit = {
			contact_country = {
				is_country_type = jaunting_traveler_dummy
			}
		}
		custom_tooltip = start_jaunting_traveler_communications_study
	}
	else = {
		custom_tooltip = start_first_contact
	}
	# Start proper First Contact
	hidden_effect = {
		owner = {
			set_timed_country_flag = {
				flag = recent_first_contact_process_started
				years = 20
			}
		}
		# If it's a pre-ftl country, abort
		if = {
			limit = {
				root.owner = { is_country_type = primitive }
			}
			contact_country = {
				establish_communications_no_message = root.owner
			}
		}
		# is this the first contact between the slavers and Payback/Broken Shackles?
		if = {
			limit = {
				contact_country = {
					is_country_type = default
					has_origin = origin_slavers
				}
				root.owner = { has_slave_origin = yes }
			}
			setup_first_contact_path = { TYPE = slavers }
		}
		if = {
			limit = {
				contact_country = {
					tec_is_default_country = yes
				}
			}
			set_first_contact_stage = default_stage_1
		}
		else = { #had to leave default country type out of the switch, because "default" in switches means "fallback" :D
			contact_country = {
				switch = {
					trigger = is_country_type
					enclave = {
						setup_first_contact_path = { TYPE = enclave }
						country_event = { id = leviathans.97 days = 720 random = 360 } #they'll establish contact if you aren't quick enough
					}
					enclave_mercenary = {
						setup_first_contact_path = { TYPE = enclave }
						country_event = { id = leviathans.97 days = 720 random = 360 } #they'll establish contact if you aren't quick enough
					}
					tiyanki = { setup_first_contact_path = { TYPE = tiyanki } }
					tiyanki_garrison = { setup_first_contact_path = { TYPE = tiyanki } }
					amoeba = { setup_first_contact_path = { TYPE = amoeba } }
					amoeba_borderless = { setup_first_contact_path = { TYPE = amoeba } }
					amoeba_garrison = { setup_first_contact_path = { TYPE = amoeba } }
					amoeba_faction = { setup_first_contact_path = { TYPE = amoeba } }
					crystal = { setup_first_contact_path = { TYPE = crystals } }
					crystal_faction = { setup_first_contact_path = { TYPE = crystals } }
					drone = { setup_first_contact_path = { TYPE = drones } }
					drone_faction = { setup_first_contact_path = { TYPE = drones } }
					cloud = { setup_first_contact_path = { TYPE = void_clouds } }
					# NPC factions
					dormant_marauders = { setup_first_contact_path = { TYPE = marauders } }
					pirate = { setup_first_contact_path = { TYPE = pirates } }
					neutral_faction = { setup_first_contact_path = { TYPE = pirates } }
					caravaneer_fleet = {
						setup_first_contact_path = { TYPE = caravaneers }
						if = {
							limit = {
								exists = event_target:caravaneer_fleet1_country
								is_same_value = event_target:caravaneer_fleet1_country
							}
							root.owner = { country_event = { id = cara.1020 days = 720 random = 360 } }
						}
						else_if = {
							limit = {
								exists = event_target:caravaneer_fleet2_country
								is_same_value = event_target:caravaneer_fleet2_country
							}
							root.owner = { country_event = { id = cara.2020 days = 720 random = 360 } }
						}
						else_if = {
							limit = {
								exists = event_target:caravaneer_fleet3_country
								is_same_value = event_target:caravaneer_fleet3_country
							}
							root.owner = { country_event = { id = cara.3020 days = 720 random = 360 } }
						}
					}
					caravaneer_home = { setup_first_contact_path = { TYPE = caravaneers } }
					nomad = { setup_first_contact_path = { TYPE = nomad } }
					# Misc.
					dragon_dummy = { setup_first_contact_path = { TYPE = origin_dragon } }
					jaunting_traveler_dummy = { setup_first_contact_path = { TYPE = jaunting_traveler } }
					default = { # note that this does not refer to 'default'-type countries, but is instead a function of 'switch = {}'
						root = { fire_on_action = { on_action = on_first_contact_stage_1_no_path } }
					#	root = {
					#		log_error = "No valid first contact path for encounter with [This.ContactCountry.GetName] (country type: [This.ContactCountry.GetCountryType])"
					#	}
					}
				}
			}
		}
	}
}

tec_change_government_for_vassal = {
	inline_script = {
		script = tec_type_hint
		authority = $authority$
		civic = $civic1$
		civic = $civic2$
		civic = $civic3$
	}

	if = {
		limit = {
			has_technology = tech_galactic_administration
			has_ascension_perk = ap_future_society
		}

		change_government = {
			authority = $authority$
			cooldown = no
			remove_invalid_civics = yes
			civics = {
				civic = $civic1|random$
				civic = $civic2|random$
				civic = $civic3|random$
				civic = random
				civic = random
			}
		}
	}
	else_if = {
		limit = {
			has_technology = tech_galactic_administration
		}

		change_government = {
			authority = $authority$
			cooldown = no
			remove_invalid_civics = yes
			civics = {
				civic = $civic1|random$
				civic = $civic2|random$
				civic = $civic3|random$
				civic = random
			}
		}
	}
	else = {
		change_government = {
			authority = $authority$
			cooldown = no
			remove_invalid_civics = yes
			civics = {
				civic = $civic1|random$
				civic = $civic2|random$
				civic = $civic3|random$
			}
		}
	}
	# reroll name
	set_name = random
}

# 3.7
set_merchant_government_effect = {
	shift_ethic = ethic_competitive
	if = {
		limit = {
			has_civic = civic_tec_corporate_cooperacorp
		}
		if = {
			limit = {
				tec_is_aiauth_empire = yes
			}
			tec_change_government_for_vassal = {
				authority = auth_tec_ai_corporate
			}
		}
		else = {
			tec_change_government_for_vassal = {
				authority = auth_corporate
			}
		}
	}
	else_if = {	# Convert to dictatorial
		limit = {
			OR = {
				has_civic = civic_criminal_heritage
				has_civic = civic_tec_corporate_dystopian_society
			}
		}
		if = {
			limit = {
				tec_is_aiauth_empire = yes
			}
			tec_change_government_for_vassal = {
				authority = auth_tec_ai
				civic1 = civic_tec_regular_corporate_politics
				civic2 = civic_dystopian_society
			}
		}
		else_if = {
			limit = {
				has_ethic = ethic_fanatic_authoritarian
			}
			tec_change_government_for_vassal = {
				authority = auth_dictatorial
				civic1 = civic_tec_regular_corporate_politics
				civic2 = civic_dystopian_society
			}
		}
		else = {
			tec_change_government_for_vassal = {
				authority = auth_oligarchic
				civic1 = civic_tec_regular_corporate_politics
				civic2 = civic_dystopian_society
			}
		}
	}
	else_if = {
		limit = {
			OR = {
				has_civic = civic_worker_coop
			}
			is_xenophobe = no
		}
		shift_ethic = ethic_fanatic_egalitarian

		if = {
			limit = {
				tec_is_aiauth_empire = yes
			}
			tec_change_government_for_vassal = {
				authority = auth_tec_ai
				civic1 = civic_tec_regular_corporate_politics
				civic2 = civic_tec_regular_worker_coop
			}
		}
		else = {
			tec_change_government_for_vassal = {
				authority = auth_democratic
				civic1 = civic_tec_regular_corporate_politics
				civic2 = civic_tec_regular_worker_coop
			}
		}
	}
	else = {
		if = {
			limit = {
				tec_is_aiauth_empire = yes
			}
			tec_change_government_for_vassal = {
				authority = auth_tec_ai
				civic1 = civic_tec_regular_corporate_politics
			}
		}
		else = {
			tec_change_government_for_vassal = {
				authority = auth_oligarchic
				civic1 = civic_tec_regular_corporate_politics
			}
		}
	}
}

set_origin_effect = {
	country_event = { id = game_start.8 }
	give_starting_resources_effect = yes
	# Necrophages
	if = {
		limit = {
			has_trait = trait_necrophage
		}
		set_origin = origin_necrophage
	}
	# Subterranean
	else_if = {
		limit = {
			has_trait = trait_cave_dweller
		}
		set_origin = origin_subterranean
	}
	# Subterranean Machines
	else_if = {
		limit = {
			has_trait = trait_robot_cave_dweller
		}
		set_origin = origin_subterranean_machines
	}
	# Void Dwellers
	else_if = {
		limit = {
			has_trait = trait_void_dweller_1
		}
		set_origin = origin_void_dwellers
	}
	# Void Machines
	else_if = {
		limit = {
			has_trait = trait_void_dweller_2
		}
		set_origin = origin_void_machines
	}
	# Calamitous Birth
	else_if = {
		limit = {
			from = { has_origin = origin_lithoid }
			has_trait = trait_lithoid
		}
		set_origin = origin_lithoid
	}
	# Liberated
	else_if = {
		limit = {
			has_country_flag = released_empire
		}
		set_origin = origin_liberated
	}
	else = {
		set_origin = origin_default
	}

	# Fix hive/machine
	if = {
		limit = {
			is_machine_empire = yes
			NOT = { has_trait = trait_machine_unit }
		}
		tec_country_remove_gestalt_ethics = yes
		shift_ethic = ethic_xenophobe
		change_government = random
	}
	else_if = {
		limit = {
			is_hive_empire = yes
			NOT = { has_trait = trait_hive_mind }
		}
		tec_country_remove_gestalt_ethics = yes
		shift_ethic = ethic_xenophobe
		change_government = random
	}
	else_if = {
		limit = {
			is_machine_empire = no
			from = {
				is_machine_empire = yes
			}
			has_trait = trait_machine_unit
		}
		tec_country_convert_to_gestalt = yes
		change_government = {
			authority = auth_machine_intelligence
			cooldown = no
			remove_invalid_civics = yes
		}
		change_government = random
	}
	else_if = {
		limit = {
			is_hive_empire = no
			has_trait = trait_hive_mind
		}
		tec_country_convert_to_gestalt = yes
		change_government = {
			authority = auth_hive_mind
			cooldown = no
			remove_invalid_civics = yes
		}
		change_government = random
	}
	country_event = { id = game_start.70 }
	country_event = { id = game_start.72 }
}

impose_ideology_effect = {
	if = {
		limit = {
			is_ai = yes
			OR = {
				has_origin = origin_legendary_leader
				has_origin = origin_legendary_leader_imperial
				has_origin = origin_legendary_leader_dictatorial
			}
		}
		random_owned_leader = {
			limit = { is_ruler = yes }
			kill_leader = { show_notification = yes }
		}
		set_origin = origin_legendary_leader_death
	}
	copy_ethos_and_authority = root
	tec_remove_sovereign_type_civic_effect = yes
	if = {
		limit = {
			root = { is_megacorp = yes }
			is_megacorp = yes
		}
		set_merchant_government_effect = yes
	}
	tec_force_ideology_civic_effect = yes
	add_modifier = { modifier = recently_liberated days = 7200 }
	add_opinion_modifier = { modifier = opinion_liberated_us who = root }
	root = {
		add_opinion_modifier = { modifier = opinion_we_liberated who = from }
	}
}

machine_synthetic_leader_effect = {
	every_owned_leader = {
		limit = {
			species = { has_trait = trait_machine_unit }
			NOT = { has_trait = leader_trait_synthetic }
			tec_leader_cannot_take_species_traits = no
		}
		add_trait_no_notify = leader_trait_synthetic
	}
	every_pool_leader = {
		limit = {
			species = { has_trait = trait_machine_unit }
			NOT = { has_trait = leader_trait_synthetic }
			tec_leader_cannot_take_species_traits = no
		}
		add_trait_no_notify = leader_trait_synthetic
	}
}

make_pop_zombie = {
	save_event_target_as = tec_pop_to_make_zombies
	species = {
		save_event_target_as = tec_species_to_make_zombies
	}
	if = {
		limit = {
			exists = owner
			owner = {
				any_galaxy_species = {
					has_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
				}
			}
		}
		owner = {
			random_galaxy_species = {
				limit = {
					has_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
				}
				save_event_target_as = tec_zombie_species_of_pop
			}
		}
		change_species = event_target:tec_zombie_species_of_pop
	}
	else_if = {
		limit = { has_trait = trait_nerve_stapled }
		modify_species = {
			species = this
			remove_trait = trait_nerve_stapled
			add_trait = trait_zombie
			add_traits_at_start_of_list = yes
			effect = {
				set_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
			}
		}
	}
	else_if = {
		limit = { has_trait = trait_syncretic_proles }
		modify_species = {
			species = this
			remove_trait = trait_syncretic_proles
			add_trait = trait_zombie
			add_traits_at_start_of_list = yes
			effect = {
				set_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
			}
		}
	}
	else_if = {
		limit = { has_trait = trait_tec_cyborg_mindless }
		modify_species = {
			species = this
			remove_trait = trait_tec_cyborg_mindless
			add_trait = trait_zombie
			add_traits_at_start_of_list = yes
			effect = {
				set_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
			}
		}
	}
	else = {
		modify_species = {
			species = this
			add_trait = trait_zombie
			add_traits_at_start_of_list = yes
			effect = {
				set_species_flag = tec_zombie_of_@event_target:tec_species_to_make_zombies
			}
		}
	}
}

death_cult_sacrifice_effect = {
	#First we need to get the variables that determine how big the boon is

	# Formula is ( initiates * random factor ) / (total pops), and then round that to the nearest 0.1 to avoid weird-looking results
	random_list = {
		#This is effectively ( base * random ), where base = 30
		#It is balanced so that sacrificing 5% of your pops gives a really good result

		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 15
			}
		}
		4 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 20
			}
		}
		1 = {
			set_variable = {
				which = sacrifice_random_mult
				value = 25
			}
		}
	}
	if = { #small empire penalty: losing 1 pop out of 30 is not the same as 30 out of 900 with logarithmic growth
		limit = { num_pops < 100 }
		multiply_variable = {
			which = sacrifice_random_mult
			value = 0.8
		}
		if = {
			limit = { num_pops < 50 }
			multiply_variable = {
				which = sacrifice_random_mult
				value = 0.8
			}
		}
	}
	export_trigger_value_to_variable = {
		trigger = num_assigned_jobs
		parameters = {
			job = mortal_initiate
		}
		variable = sacrifice_result_mult
	}
	every_subject = {
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = {
				job = overlord_mortal_initiate
			}
			variable = sacrifice_vassal_amount
		}
		prev = {
			change_variable = {
				which = sacrifice_result_mult
				value = prev.sacrifice_vassal_amount
			}
		}
		export_trigger_value_to_variable = {
			trigger = num_assigned_jobs
			parameters = {
				job = overlord_mortal_initiate_drone
			}
			variable = sacrifice_vassal_amount_drone
		}
		prev = {
			change_variable = {
				which = sacrifice_result_mult
				value = prev.sacrifice_vassal_amount_drone
			}
		}
	}
	# We do some maths here to calculate the effective percentage of your population sacrificed
	# and cap the bonus to 15% as if you'd sacrificed 15% of your population if it is greater.
	divide_variable = {
		which = sacrifice_result_mult
		value = trigger:num_pops
	}
	if = {
		limit = {
			check_variable = {
				which = sacrifice_result_mult
				value >= 0.15
			}
		}
		set_variable = {
			which = sacrifice_result_mult
			value = 0.15
		}
	}
	multiply_variable = {
		which = sacrifice_result_mult
		value = sacrifice_random_mult
	}
	clear_variable = sacrifice_random_mult
	round_variable_to_closest = {
		which = sacrifice_result_mult
		value = 0.1
	}

	#We also need the edicts length multiplier for the modifiers
	export_modifier_to_variable = {
		modifier = edict_length_mult
		variable = edict_length_modifiers
	}
	change_variable = { # Needs to be 1 + mult
		which = edict_length_modifiers
		value = 1
	}

	#Now we do the sacrifice
	every_owned_pop = {
		limit = { has_job = mortal_initiate }
		kill_pop = yes
	}
	every_subject = {
		limit = {
			any_owned_pop = {
				OR = {
					has_job = overlord_mortal_initiate
					has_job = overlord_mortal_initiate_drone
				}
			}
		}
		set_country_flag = recent_overlord_sacrifice
		every_owned_pop = {
			limit = {
				OR = {
					has_job = overlord_mortal_initiate
					has_job = overlord_mortal_initiate_drone
				}
			}
			kill_pop = yes
		}
	}
	# Evolved
		multiply_variable = {
			which = sacrifice_result_mult
			value = 1.25
		}
		# technically should buff the result by 25% and not 125%
	# /
	# Scale result by the level of any death_cult councilor.
	multiply_variable = {
		which = sacrifice_result_mult
		value = value:sacrifice_edict_power_councilor_death_cult
	}
}


set_synth_or_robot_portrait_effect = {
	if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_01 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_01" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_02 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_02" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_03 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_03" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_04 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_04" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_05 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_05" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_06 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_06" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_07 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_07" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_08 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_08" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_tma_synth_machine_09 = yes }
		}
		change_species_characteristics = { portrait = "synth_machine_09" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_hum_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_hum_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_mam_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_mam_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_rep_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_rep_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_avi_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_avi_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_art_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_art_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_mol_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_mol_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_fun_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_fun_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_pla_robot = yes }
		}
		change_species_characteristics = { portrait = "sd_pla_robot" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_lit_robot = yes }
		}
		change_species_characteristics = { portrait = "lith_machine" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_nec_robot = yes }
		}
		change_species_characteristics = { portrait = "nec_machine" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_aqu_robot = yes }
		}
		change_species_characteristics = { portrait = "aqu_machine" }
	}
	else_if = {
		limit = {
			prev = { use_robot_portrait_sd_tox_robot = yes }
		}
		change_species_characteristics = { portrait = "tox_machine" }
	}
	else = {
		change_species_characteristics = { portrait = "default_robot" }
	}
}

create_global_robot_parent_species = {
	optimize_memory
	create_species = {
		name = "NAME_Robot"
		plural = "NAME_Robot_plural"
		class = ROBOT
		namelist = this
		portrait = "default_robot"
		traits = {
			trait = "trait_mechanical"
		}

		effect = {
			save_global_event_target_as = global_robot_parent_species
		}
	}
}

create_built_robot_species = {
	optimize_memory
	if = {
		limit = {
			NOT = {
				exists = event_target:global_robot_parent_species
			}
		}
		create_global_robot_parent_species = yes
	}

	create_species = {
		name = "NAME_Robot"
		plural = "NAME_Robot_plural"
		class = ROBOT
		namelist = this
		homeworld = this
		portrait = "default_robot"
		traits = {
			trait = "trait_mechanical"
		}

		effect = {
			set_synth_or_robot_portrait_effect = yes
			set_species_identity = event_target:global_robot_parent_species
			set_species_flag = mechanical_species@prev
		}
	}

	set_built_species = last_created_species
}