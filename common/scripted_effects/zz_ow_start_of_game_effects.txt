# O V E R W R I T E 
# 00_scripted_effects.txt

add_district_and_planet_size_if_needed_effect = {
	optimize_memory
	if = {
		limit = {
			free_district_slots >= 1
		}
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	else_if = {
		limit = {
			free_district_slots <= 0
			planet_size < 25
		}
		set_variable = {
			which = needed_size
			value = 1
		}
		subtract_variable = {
			which = needed_size
			value = trigger:free_district_slots
		}
		change_planet_size = needed_size
		add_district = {
			district_type = $district$
			ignore_cap = yes
		}
	}
	#else do nothing
}

generate_start_buildings_and_districts = {
	optimize_memory
	if = {
		limit = {
			owner = {
				NOR = {
					has_origin = origin_shattered_ring
					has_origin = origin_broken_shackles
				}
			}
		}
		if = {
			limit = {
				owner = {
					OR = {
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_servitor
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}

			if = {
				limit = {
					owner = {
						OR = {
							last_created_species = { is_lithoid = yes }
							last_created_species = { has_trait = trait_machine_unit }
						}
					}
				}
				owner = {
					set_country_flag = lithoid_subspecies
				}
			}
			else = {
				owner = {
					set_country_flag = non_lithoid_subspecies
				}
			}
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tree_of_life
					is_lithoid_empire = yes
				}
			}
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}

		# total - 24 jobs

		# 3 jobs - EVOLVED NOTE - city and swaps
		while = {
			count = value:tec_start_city_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_city
			}
		}

		# 4 - 6 jobs - EVOLVED NOTE - farming and swaps
		while = {
			count = value:tec_start_farming_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_farming
			}
		}

		# 4 jobs - EVOLVED NOTE - mining and swaps 
		while = {
			count = value:tec_start_mining_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_mining
			}
		}

		# 2 jobs - EVOLVED NOTE - generator and swaps 
		while = {
			count = value:tec_start_generator_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_generator
			}
		}

		# 4 jobs - EVOLVED NOTE - industrial and swaps
		# NOTE: split districts on regular
		while = {
			count = value:tec_start_foundry_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_industrial
			}
		}

		while = {
			count = value:tec_start_factory_district_count
			add_district_and_planet_size_if_needed_effect = {
				district = district_tec_factory
			}
		}

		# 3 jobs - EVOLVED NOTE - Capital
		tec_start_add_capital = yes

		# 2 jobs - EVOLVED NOTE - unity
		tec_start_add_unity_building = yes

		# 2 jobs - EVOLVED NOTE - research

		tec_start_add_research_building = yes
		# 1-2 job - EVOLVED NOTE - aux - moved at end
		# 4-5 jobs - EVOLVED NOTE - amenities - ANOTHER NOTE - INDUSTRIAL and FOOD adds moved to district logic

		tec_start_add_amenities_building = yes
	}

	if = {	# Shattered ring
		limit = {
			owner = {
				has_origin = origin_shattered_ring
			}
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_tec_rw_industry
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_tec_rw_forge
		}
		add_district_and_planet_size_if_needed_effect = {
			district = district_tec_rw_replicator
		}
		add_deposit = d_segment_rubble_3
		add_deposit = d_segment_rubble_3
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_generator
		}
		add_deposit = d_segment_rubble_2
		add_deposit = d_segment_rubble_2
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_farming
		}
		add_deposit = d_segment_rubble_1
		add_deposit = d_segment_rubble_1

		add_deposit = d_arcane_generator
		# RP DEPOSITS
		add_deposit = d_tec_rw_minor_structural_damage
		add_deposit = d_tec_rw_major_structural_damage

		add_deposit = d_decrepit_tunnels_1
		add_deposit = d_decrepit_tunnels_2
		# add_deposit = d_decrepit_tunnels_3 # Commented cause causes districts to disappear

		if = {	# lithoids
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOT = {
						has_civic = civic_hive_devouring_swarm 
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {	# Lithoids get double the mining districts
			limit = {
				owner = {
					is_lithoid_empire = yes
					any_owned_species = {
						NOR = {
							is_archetype = BIOLOGICAL
						}
					}
					is_catalytic_empire = no
					tec_is_bioarch_empire = no
				}
			}
			remove_district = district_rw_farming
			remove_deposit = d_segment_rubble_1
			remove_deposit = d_segment_rubble_1

			add_district_and_planet_size_if_needed_effect = {
				district = district_tec_rw_replicator
			}
			add_deposit = d_segment_rubble_3
			add_deposit = d_segment_rubble_3
		}

		# city - will swap
		add_district_and_planet_size_if_needed_effect = {
			district = district_rw_city
		}

		# 3 jobs - EVOLVED NOTE - Capital
		tec_start_add_capital = yes

		# 2 jobs - EVOLVED NOTE - unity
		tec_start_add_unity_building = yes

		# 2 jobs - EVOLVED NOTE - research
		tec_start_add_research_building = yes
		# 1-2 job - EVOLVED NOTE - aux - moved at end
		# 4-5 jobs - EVOLVED NOTE - amenities - ANOTHER NOTE - INDUSTRIAL and FOOD adds moved to district logic

		tec_start_add_amenities_building = yes

		# Replace capital building for machine empires
		if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}

			if = {
				limit = {
					owner = {
						OR = {
							NOR = {
								has_valid_civic = civic_machine_servitor
								has_valid_civic = civic_machine_assimilator
								has_valid_civic = civic_tec_machine_promethean
							}
							
							any_owned_species = {
								has_trait = trait_lithoid
							}
						}
					}
				}
				if = {
					limit = {
						owner = {
							is_catalytic_empire = no
						}
					}
					remove_district = district_rw_farming
					remove_deposit = d_segment_rubble_1
					remove_deposit = d_segment_rubble_1

					add_district_and_planet_size_if_needed_effect = {
						district = district_rw_generator
					}
					add_deposit = d_segment_rubble_2
					add_deposit = d_segment_rubble_2
				}
				
			}
		}
	}

	if = {	# Broken Shackles
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}

		while = {
			count = 6
			add_district_and_planet_size_if_needed_effect = {
				district = district_crashed_slaver_ship
			}
		}
		add_building = building_low_tech_farm
		add_building = building_low_tech_scrap_refinery
		add_building = building_low_tech_admin_hub
		add_building = building_low_tech_power_plant
		add_building = building_low_tech_capital
		add_building = building_low_tech_research_lab

		if = {
			limit = {
				free_district_slots < 2
			}
			change_planet_size = 2
		}
	}

	if = {	# Payback
		limit = {
			owner = {
				has_origin = origin_payback
			}
		}
		# We want a clean slate building-wise, but to keep the districts.
		remove_all_buildings = yes
		add_planet_devastation = 33
		add_modifier = {
			modifier = payback_debris_field
		}
		add_modifier = {
			modifier = payback_unified_purpose
			days = 7200
		}
		while = {
			count = 6
			add_deposit = d_ship_debris_payback_blocker
		}
		# 3 jobs
		add_building = building_capital
		if = {
			limit = {
				NOT = {	# Avoid doubledipping
					has_building = building_clinic
				}
			}
			add_building = building_clinic
		}
		add_building = building_research_lab_1
		add_building = building_mineral_purification_plant
		add_building = building_energy_grid
	}

	# Moved aux buildings at end
	
	tec_start_add_assembly_building = yes
	tec_start_add_aux_features = yes

	# Additional resources based on empire type and possible subspecies
	owner = {
		give_starting_resources_effect = yes
	}
}

generate_start_pops = {
	if = {
		limit = {
			owner = {
				check_variable_arithmetic = {
					which = value:tec_start_pops_secondary_count
					value > 0
				}
			}
		}

		if = {
			limit = {
				last_created_species = {
					is_species_class = MACHINE 
				}
			}
			tec_start_handle_machine_species = yes
		}

		if = {
			limit = {
				owner = {
					OR = {
						has_origin = origin_syncretic_evolution
						has_origin = origin_necrophage
					}
				}
			}
			tec_start_handle_syncretic_species = yes
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_servitor 
				}
			}
			tec_start_handle_secondary_species_gets_special_traits = yes
			tec_start_handle_biothrophy_species = yes
		}

		if = {
			limit = {
				owner = {
					has_valid_civic = civic_machine_assimilator 
				}
			}
			tec_start_handle_secondary_species_gets_special_traits = yes
			tec_start_handle_assimilator_species = yes
		}


		if = {
			limit = {
				owner = {
					has_origin = origin_mechanists
				}
			}
			tec_start_handle_mechanists = yes
		}

		if = {
			limit = {
				owner = {
					has_origin = origin_tec_bioservant
				}
			}
			tec_start_handle_bioservant = yes
		}


		while = {
			count = owner.value:tec_start_pops_secondary_count
			create_pop = {
				species = event_target:tec_last_created_species
				ethos = random
			}
		}
	}

	while = {
		limit = { num_pops < owner.value:tec_start_pops_count }
		create_pop = {
			species = owner_main_species
			ethos = random
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		planet_event = { id = clones.10 days = 1095 random = 720 }
	}

	if = {
		limit = {
			owner = {
				tec_is_zombie_empire = yes
			}
		}
		tec_start_handle_zombies = yes
	}


	# Cybernetic Creed: add Unique Traits
	if = {
		limit = {
			owner = {
				has_origin = origin_cybernetic_creed
			}
		}
		tec_start_handle_cybernetic_creed = yes
	}
}

void_dweller_home_planet_setup = {	# Caelum
	optimize_memory
	set_planet_flag = habitat_level_3
	owner = {
		save_event_target_as = void_dweller_owner
	}
	solar_system = { # Generates the orbitals
		random_system_planet = {
			limit = { has_planet_flag = habitat_1_planet }
			save_event_target_as = habitat_1_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_1_planet
			coords_from = event_target:habitat_1_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_2_planet }
			save_event_target_as = habitat_2_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_2_planet
			coords_from = event_target:habitat_2_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		random_system_planet = {
			limit = { has_planet_flag = habitat_3_planet }
			save_event_target_as = habitat_3_planet
		}
		spawn_megastructure = {
			type = "major_orbital"
			planet = event_target:habitat_3_planet
			coords_from = event_target:habitat_3_planet
			owner = event_target:void_dweller_owner
			graphical_culture = event_target:void_dweller_owner
		}
		every_system_planet = {
			limit = { has_planet_flag = mining_planet }
			create_mining_station = { owner = event_target:void_dweller_owner }
		}
		# This is necessary to avoid error log spam of missing set variable
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_built
					}
				}
				set_variable = {
					which = tec_subhabitats_built
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_extraction
					}
				}
				set_variable = {
					which = tec_subhabitats_extraction
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_energy
					}
				}
				set_variable = {
					which = tec_subhabitats_energy
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_minerals
					}
				}
				set_variable = {
					which = tec_subhabitats_minerals
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_food
					}
				}
				set_variable = {
					which = tec_subhabitats_food
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_science
					}
				}
				set_variable = {
					which = tec_subhabitats_science
					value = 0
				}
			}
		# /

		# Change starting pre-scripted ideal into inhabitable worlds
		# First pre-sripted is a research system
		closest_system = {
			limit = { has_star_flag = neighbor_t1_first_colony }
			set_star_flag = ideal_habitat_t1
			max_steps = 3
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				change_pc = pc_frozen
				set_deposit = d_engineering_3
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						is_colonizable = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_physics_1 }
						5 = { set_deposit = d_society_1 }
						5 = { set_deposit = d_engineering_1 }
						1 = { set_deposit = d_physics_2 }
						1 = { set_deposit = d_society_2 }
						1 = { set_deposit = d_engineering_2 }
					}
				}
			}
		}
		# Second pre-sripted is a resource system
		closest_system = {
			limit = { has_star_flag = neighbor_t2_second_colony }
			set_star_flag = ideal_habitat_t2
			max_steps = 6
			random_system_planet = {
				limit = {
					is_colonizable = yes
					is_colony = no
					has_planet_flag = prescripted_ideal
				}
				remove_planet_flag = prescripted_ideal
				change_pc = pc_molten
				set_deposit = d_alloys_3
				add_deposit = d_minerals_4
			}
			while = {
				count = 3
				random_system_planet = {
					limit = {
						is_star = no
						has_deposit = no
						has_anomaly = no
					}
					random_list = {
						5 = { set_deposit = d_minerals_1 }
						5 = { set_deposit = d_energy_1 }
						1 = { set_deposit = d_minerals_2 }
						1 = { set_deposit = d_energy_2 }
					}
				}
			}
		}
	}
	event_target:habitat_1_planet = {
		set_planet_flag = habitat@PREV
	}
	owner = {
		give_starting_resources_effect = yes

		set_variable = {
			which = sub_habitat_amount
			value = 0
		}
		# Creates subhabitats
			if = {	# Energy
				limit = {
					check_variable = {
						which = sub_habitat_amount
						value < 2
					}
					any_owned_species = {
						OR = {
							is_robotic = yes
							is_phototrophic = yes
						}
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							has_planet_flag = mining_planet
						}
						save_event_target_as = sub_habitat_energy
						set_timed_planet_flag = {
							flag = tec_force_subhabitat_energy
							days = 1
						}
					}
					spawn_megastructure = {
						type = "tec_subhabitat_standard"
						planet = event_target:sub_habitat_energy
						coords_from = event_target:sub_habitat_energy
						owner = event_target:void_dweller_owner
						graphical_culture = event_target:void_dweller_owner
					}
					change_variable = {
						which = tec_subhabitats_built
						value = 1
					}
				}
				change_variable = {
					which = sub_habitat_amount
					value = 1
				}
			}
			if = {	# Minerals
				limit = {
					check_variable = {
						which = sub_habitat_amount
						value < 2
					}
					any_owned_species = {
						OR = {
							is_lithoid = yes
							has_trait = trait_tec_machine_clockwork
						}
					}
					#is_catalytic_empire = no
				}
				solar_system = {
					random_system_planet = {
						limit = { has_planet_flag = mining_planet }
						save_event_target_as = sub_habitat_mining
						set_timed_planet_flag = {
							flag = tec_force_subhabitat_minerals
							days = 1
						}
					}
					spawn_megastructure = {
						type = "tec_subhabitat_standard"
						planet = event_target:sub_habitat_mining
						coords_from = event_target:sub_habitat_mining
						owner = event_target:void_dweller_owner
						graphical_culture = event_target:void_dweller_owner
					}
					change_variable = {
						which = tec_subhabitats_built
						value = 1
					}
				}
				change_variable = {
					which = sub_habitat_amount
					value = 1
				}
			}
			if = {	# Food
				limit = {
					check_variable = {
						which = sub_habitat_amount
						value < 2
					}
					OR = {
						any_owned_species = {
							is_organic_species = yes
							is_lithoid = no
						}
						is_catalytic_empire = yes
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							OR = {
								is_planet_class = pc_gas_giant
								is_planet_class = pc_frozen
								is_planet_class = pc_ice_asteroid
							}
						}
						save_event_target_as = sub_habitat_food
						set_timed_planet_flag = {
							flag = tec_force_subhabitat_food
							days = 1
						}
					}
					spawn_megastructure = {
						type = "tec_subhabitat_standard"
						planet = event_target:sub_habitat_food
						coords_from = event_target:sub_habitat_food
						owner = event_target:void_dweller_owner
						graphical_culture = event_target:void_dweller_owner
					}
					change_variable = {
						which = tec_subhabitats_built
						value = 1
					}
				}
				change_variable = {
					which = sub_habitat_amount
					value = 1
				}
			}
		# /

		# game_start.64 adjusted to handle this
		# if = {
		#	limit = {
		#		has_valid_civic = civic_private_healthcare_corporate
		#	}
		#	give_technology = { message = no tech = tech_frontier_health }
		#	add_research_option = tech_subdermal_stimulation
		#}
	}

	if = {
		limit = {
			owner = {
				OR = {
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_servitor
				}
			}
		}

		if = {
			limit = {
				owner = {
					OR = {
						last_created_species = { is_lithoid = yes }
						last_created_species = { has_trait = trait_machine_unit }
					}
				}
			}
			owner = {
				set_country_flag = lithoid_subspecies
			}
		}
		else = {
			owner = {
				set_country_flag = non_lithoid_subspecies
			}
		}
	}
	generate_start_pops = yes

	set_planet_entity = {
		entity = "habitat_phase_03_entity"
		graphical_culture = owner
	}
	set_planet_size = 8
	# Save as global event target for megastructure logistics functionality
	solar_system = {
		system_event = {
			id = tec_habitats.12
		}
	}

	#deposit
	add_deposit = d_tec_arcane_replicator
	add_deposit = d_tec_minor_arcane_replicator


	# Districts
	while = {
		count = value:tec_value|VALUE|tec_start_city_district_count|DIVIDE|1.5|CEILING|yes|
		add_district = {
			district_type = district_hab_housing
			ignore_cap = yes
		}
	}

	while = {
		count = value:tec_value|VALUE|tec_start_foundry_district_count|DIVIDE|1.5|CEILING|yes|
		add_district = {
			district_type = district_hab_industrial
			ignore_cap = yes
		}
	}

	if = {
		limit = {
			check_variable_arithmetic = {
				which = value:tec_value|VALUE|tec_start_factory_district_count|DIVIDE|1.5|
				value > 0
			}
		}
		while = {
			count = value:tec_value|VALUE|tec_start_factory_district_count|DIVIDE|1.5|FLOOR|yes|MIN|1|
			add_district = {
				district_type = district_tec_hab_factory
				ignore_cap = yes
			}
		}
	}

	if = {
		limit = {
			check_variable_arithmetic = {
				which = value:tec_value|VALUE|tec_start_farming_district_count|DIVIDE|1.5|
				value > 0
			}
		}
		set_planet_flag = tec_food_habitat
		while = {
			count = value:tec_value|VALUE|tec_start_farming_district_count|DIVIDE|1.5|FLOOR|yes|MIN|1|
			add_district = {
				district_type = district_tec_hab_food
				ignore_cap = yes
			}
		}
	}

	# 4 jobs - EVOLVED NOTE - mining and swaps
	set_planet_flag = mining_habitat
	while = {
		count = value:tec_value|VALUE|tec_start_mining_district_count|DIVIDE|1.5|CEILING|yes|
		add_district = {
			district_type = district_hab_mining
			ignore_cap = yes
		}
	}

	set_planet_flag = energy_habitat
	while = {
		count = value:tec_value|VALUE|tec_start_generator_district_count|DIVIDE|1.5|FLOOR|yes|
		add_district = {
			district_type = district_hab_energy
			ignore_cap = yes
		}
	}

	# /
	#buildings
	tec_start_add_major_habitat_capital = yes

	# moved to tec_start_techs.3
	# # Extra buildings
	# 	if = {	# BASE FOOD
	# 		limit = {
	# 			owner = {
	# 				OR = {
	# 					NOR = {
	# 						is_lithoid_empire = yes
	# 						is_machine_empire = yes
	# 					}
	# 					AND = {
	# 						is_machine_empire = yes
	# 						any_owned_species = {
	# 							NOR = {
	# 								is_robotic = yes
	# 								is_lithoid = yes
	# 							}
	# 						}
	# 					}
	# 					any_owned_species = {
	# 						OR = {
	# 							is_organic_species = yes
	# 						}
	# 					}
	# 				}
	# 			}
	# 		}
	# 		owner = {
	# 			give_technology = {
	# 				tech = tech_hydroponics
	# 				message = no
	# 			}
	# 		}
	# 	}
	# # /
	tec_start_add_research_building = yes
	tec_start_add_unity_building = yes
	tec_start_add_amenities_building = yes
	tec_start_add_assembly_building = yes

	tec_start_hab_try_add_aux = yes

	tec_start_hab_aquatic_flood_effect = yes
	validate_and_repair_planet_buildings_and_districts = yes
	# Cache triggers
	owner = {
		every_owned_planet = {
			tec_cache_planet_scope_triggers = { force = yes }
		}
	}
}

give_starting_resources_effect = {
	optimize_memory
	if = {
		limit = {
			is_catalytic_empire = yes
		}
		add_resource = { food = 100	}
	}
	if = {
		limit = {
			tec_is_quantum_alloys_empire = yes
		}
		add_resource = { energy = 100	}
	}
	if = {
		limit = {
			is_machine_empire = yes
		}
		if = {
			limit = {
				OR = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_guided_sapience
				}
			}
			if = {
				limit = { has_country_flag = lithoid_subspecies }
				add_resource = { minerals = 100	}
				add_resource = { energy = 100 }
			}
			else = {
				add_resource = { food = 100	}
				add_resource = { energy = 100 }
			}
		}
		else = {
			add_resource = { energy = 200 }
		}
	}
	else = {
		if = {
			limit = { is_lithoid_empire = no }
			if = {
				limit = {
					OR = {
						AND = {
							is_individual_machine = no
							has_country_flag = lithoid_subspecies
						}
						has_origin = origin_broken_shackles
						is_guided_sapience_empire = yes
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			else = {
				add_resource = { food = 200 }
			}
		}
		else = {
			if = {
				limit = {
					OR = {
						has_country_flag = non_lithoid_subspecies
						has_origin = origin_broken_shackles
					}
				}
				add_resource = { food = 100	}
				add_resource = { minerals = 100 }
			}
			if = {
				limit = {
					is_individual_machine = yes
					NOT = { has_country_flag = non_lithoid_subspecies }
				}
				add_resource = { minerals = 200 }
			}
			else = {
				add_resource = { minerals = 200 }
			}
		}
	}
}

generate_home_planet_final_pass = {
	optimize_memory
	# Adjust life-seeded colonies
	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		owner = {
			# Nuke other colonies gained from advanced empire, etc
			every_owned_planet = {
				limit = { is_capital = no }
				remove_all_buildings = yes
				destroy_colony = yes
			}
			if = {
				limit = { 
					NOR = { 
						has_valid_civic = civic_permanent_employment 
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					} 
				}
				change_dominant_species = { species = last_created_species change_all = yes }
			}
			if = {
				limit = { 
					OR = { 
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
					} 
				}
				last_created_species = {
					modify_species = {
						species = this
						ideal_planet_class = pc_gaia
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_shattered_ring
					has_origin = origin_machine
				}
			}
		}
		owner = {
			capital_scope = {
				system_star = {
					set_deposit = d_energy_10
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_tree_of_life
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_tree_of_life_home
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lithoid
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_lithoid_crater
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
				add_deposit = d_buried_lithoids
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = no
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_mod }
			}
		}
	}
	else_if = {
		limit = {
			owner = {
				has_origin = origin_lost_colony
				is_gestalt = yes
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = colonial_spirit_gestalt_mod }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_broken_shackles
			}
		}
		owner = {
			capital_scope = {
				add_modifier = { modifier = free_at_last_broken_shackles days = 7200 }
				add_modifier = { modifier = culture_shock_broken_shackles days = 3600 }
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_progenitor_hive
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_progenitor
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_default
			}
		}
		owner = {
			if = {
				limit = {
					is_gestalt = no
				}
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod days = 7200 }
				}
			}
			else = {
				capital_scope = {
					add_modifier = { modifier = prosp_uni_mod_gestalt days = 7200 }
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				has_origin = origin_machine
			}
		}
		owner = {
			capital_scope = {
				add_deposit = d_machine_minerals
				solar_system = {
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
						}
						clear_deposits = yes
					}
					every_system_planet = {
						limit = {
							is_asteroid = yes
						}
						remove_planet = yes
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_asteroid = no
							NOT = { is_planet_class = pc_gas_giant }
						}
						change_pc = pc_broken
					}
					every_system_planet = {
						limit = {
							colonizable_planet = no
							is_star = no
							is_planet_class = pc_gas_giant
						}
						change_pc = pc_molten
						add_modifier = { modifier = chthonian_planet }
						every_moon = {
							limit = {
								colonizable_planet = no
							}
							remove_planet = yes
						}
						while = {
							limit = {
								planet_size >= 20
							}
							change_planet_size = -6
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			owner = {
				any_owned_pop = {
					has_trait = trait_exotic_metabolism
				}
			}
		}

		add_deposit = d_exotic_mountain
	}
}

lost_colony_generate_parent_effect = {	#Caelum
	if = { # hive parent
		limit = {
			event_target:lost_colony_child = {
				is_hive_empire = yes
			}
		}
		if = { # Parent hive has Progenitor hive if you own the Overlord DLC
			limit = {
				has_overlord_dlc = yes
			}
			if = {
				limit = {
					event_target:lost_colony_child = {
						has_authority = auth_hive_mind
					}
				}
				create_country = {
					species = event_target:lost_colony_child
					name_list = event_target:lost_colony_child
					type = default
					origin = "origin_progenitor_hive"
					authority = auth_hive_mind
					civics = {
						civic = civic_hive_divided_attention
						civic = random
						civic = random
					}
				}
			}
			else_if = {
				limit = {
					event_target:lost_colony_child = {
						has_authority = auth_tec_hive_biological
					}
				}
				create_country = {
					species = event_target:lost_colony_child
					name_list = event_target:lost_colony_child
					type = default
					origin = "origin_progenitor_hive"
					authority = auth_tec_hive_biological
					civics = {
						civic = civic_hive_divided_attention
						civic = random
						civic = random
					}
				}
			}
		}
		else_if = {	# Cyberhive
			limit = {
				event_target:lost_colony_child = {
					has_authority = auth_tec_hive_cybernetic
				}
			}
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_tec_hive_cybernetic
				civics = {
					civic = civic_hive_divided_attention
					civic = random
					civic = random
				}
			}
		}
		else_if = {	# Biohive
			limit = {
				event_target:lost_colony_child = {
					has_authority = auth_tec_hive_biological
				}
			}
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_tec_hive_biological
				civics = {
					civic = civic_hive_divided_attention
					civic = random
					civic = random
				}
			}
		}
		else_if = {	# Biomech
			limit = {
				event_target:lost_colony_child = {
					has_authority = auth_tec_hive_biomechanical
				}
			}
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_tec_hive_biomechanical
				civics = {
					civic = civic_hive_divided_attention
					civic = random
					civic = random
				}
			}
		}
		else = {	# Standard
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_hive_mind
				civics = {
					civic = civic_hive_divided_attention
					civic = random
					civic = random
				}
			}
		}
	}
	else_if = { # machine parent
		limit = {
			event_target:lost_colony_child = {
				is_machine_empire = yes
			}
		}
		if = {		# Consensus
			limit = {
				event_target:lost_colony_child = {
					has_authority = auth_tec_machine_consensus
				}
			}
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_tec_machine_consensus
				civics = {
					civic = civic_machine_delegated_functions
					civic = random
					civic = random
				}
			}
		}
		#else_if	# Nanites
		#}
		else = {	# Regular
			create_country = {
				species = event_target:lost_colony_child
				name_list = event_target:lost_colony_child
				type = default
				origin = "origin_default"
				authority = auth_machine_intelligence
				civics = {
					civic = civic_machine_delegated_functions
					civic = random
					civic = random
				}
			}
		}
	}
	else = { # default parent
		create_country = {
			species = event_target:lost_colony_child
			name_list = event_target:lost_colony_child
			type = default
			origin = "origin_default"
			government_restrictions = {
				authority = {
					NOR = {
						value = auth_machine_intelligence
						value = auth_hive_mind
					}
				}
			}
		}
	}
	last_created_country = {
		save_event_target_as = lost_colony_parent
		add_resource = {
			minerals = 2400
			energy = 2400
			food = 2400
			alloys = 800
			consumer_goods = 1200
			influence = 600
		}
	}
}

# UTILS
tec_start_add_research_building = {
	if = {
		limit = {
			exists = owner
			owner = {
				tec_country_blocks_starting_research_building = no
			}
		}

		if = {	# Archaeotech review balance
			limit = {
				exists = owner
				owner = {
					has_origin = origin_remnants
					has_ancrel = yes
				}
			}
			add_building = building_archaeostudies_faculty
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					has_origin = origin_synthetic_fertility
				}
			}
			add_building = building_identity_repository
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					tec_is_occult_cult = yes
				}
			}
			add_building = building_tec_occultist_lodge_1
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					tec_is_evolutionary_empire = yes
				}
			}
			add_building = building_tec_evolutionary_lab_1
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					is_astrometeorologist_empire = yes
				}
			}
			add_building = building_astrometeorology_observation_center
		}
		else_if = {
			limit = {
				exists = owner
				owner = {
					tec_is_reanimator_empire = yes
				}
			}
			add_building = building_dread_encampment
		}
		else = {	# Fallbacks
			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_research_lab_1
			}
			else = {
				add_building = building_research_lab_1
			}
		}
	}

	# extra
	if = {
		limit = {
			exists = owner
			owner = {
				tec_is_reanimator_empire = yes
			}
		}
		solar_system = { #Necromancers do not give engineering. So make sure there's some readily-accessible engineering
			if = {	# Shattered ring
				limit = {
					exists = owner
					owner = {
						has_origin = origin_shattered_ring
					}
				}
				random_system_planet = {
					limit = {
						has_deposit_for = shipclass_research_station
						has_deposit = d_engineering_5
					}
					# Total size 15 deposit as the Irreparable Damage is normally a size 5 and non-Shattered Ring starts get an additional two size 6 deposits.
					add_deposit = d_engineering_10
				}
			}
			else = {
				while = {
					count = 2
					random_system_planet = {
						limit = {
							has_deposit_for = shipclass_research_station
							NOT = { has_deposit = d_engineering_6 }
						}
						clear_deposits = yes
						add_deposit = d_engineering_6
					}
				}
			}
		}
	}
}

tec_start_add_unity_building = {
	if = {
		limit = {
			owner = {
				tec_country_blocks_starting_unity_building = no
			}
		}
		if = {
			limit = {
				owner = {
					tec_is_hoarder_empire = yes
				}
			}
			add_building = building_tec_vault_of_plenty
		}
		else_if = {
			limit = {
				owner = {
					is_regular_empire = yes
				}
			}
			if = {
				limit = {
					owner = {
						is_spiritualist = yes
					}
				}
				add_building = building_temple # it will automatically convert to other
			}
			else = {
				add_building = building_bureaucratic_1 # will convert for ai auths
			}
		}
		else_if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_node
			}
			else = {
				add_building = building_hive_node # it will automatically convert to other
			}
		}
		else_if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}
			if = {
				limit = {
					owner = {
						has_valid_civic = civic_machine_servitor
					}
				}
				add_building = building_organic_sanctuary
			}
			else = {
				add_building = building_uplink_node
			}
		}
	}

}

tec_start_add_amenities_building = {
	if = {
		limit = {
			owner = {
				tec_country_blocks_starting_amenities_building = no
			}
		}
		if = {
			limit = {
				owner = {
					is_regular_empire = yes
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_dystopian_empire = yes
					}
				}
				add_building = building_precinct_house
			}
			else_if = {
				limit = {
					exists = owner
					owner = {
						is_storm_callers_empire = yes
					}
				}
				add_building = building_storm_summoning_theater
			}
			else_if = {
				limit = {
					owner = {
						is_spiritualist = no
						is_pleasure_seeker = yes
					}
				}
				add_building = building_holo_theatres
			}
			else_if = {
				limit = {
					owner = {
						has_valid_civic = civic_augmentation_bazaars
					}
				}
				add_building = building_augmentation_bazaars
			}
			else_if = {
				limit = {
					owner = {
						has_valid_civic = civic_private_healthcare_corporate
					}
					NOT = {	# Avoid doubledipping
						has_building = building_clinic
					}
				}
				add_building = building_clinic
			}
			else_if = {
				limit = {
					owner = {
						is_spiritualist = yes
					}
				}
				add_building = building_temple # it will automatically convert to other
			}
			else = {
				add_building = building_commercial_zone
			}
		}
		else_if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			if = {
				limit = {
					owner = { has_origin = origin_progenitor_hive }
				}
				add_building = building_offspring_nest
			}
			else_if = {
				limit = {
					owner = {
						tec_is_cyberhive = yes
					}
				}
				add_building = building_tec_gestalt_parts_1
			}
			else = {
				add_building = building_hive_warren
			}
		}
		else_if = {
			limit = {
				owner = {
					is_machine_empire = yes
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_aquatic_empire = yes
					}
				}
				add_building = building_tec_machine_anglers_nexus_A
			}
			else_if = {
				limit = {
					owner = {
						tec_is_trade_gestalt = yes
					}
				}
				add_building = building_tec_trade_machine_1
			}
			else = {

				add_building = building_tec_gestalt_parts_1
			}
		}
	}

}

tec_start_add_assembly_building = {
	if = {
		limit = {
			owner = {
				is_regular_empire = yes
			}
		}
		if = {
			limit = {
				owner = { is_individual_machine = yes }
			}
			add_building = building_machine_assembly_plant # will convert
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_mechanists
				}
			}
			add_building = building_robot_assembly_plant # will convert
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_tec_bioservant
				}
			}
			add_building = building_tec_bioservant_plant_1 # will convert
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_tec_clones
				}
			}
			add_building = building_clone_vats
		}
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					has_origin = origin_mechanists
				}
			}
			add_building = building_hive_robot_assembly_plant
		}
		else_if = {
			limit = {
				owner = {
					has_origin = origin_tec_bioservant
				}
			}
			add_building = building_tec_hive_bioservant_plant_1
		}
		else_if = {
			limit = {
				owner = {
					tec_hive_can_have_spawningpools = yes
					NAND = {
						has_origin = origin_necrophage
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			if = {
				limit = {
					owner = {
						tec_is_biohive = yes
					}
				}
				add_building = building_tec_biohive_spawning_pool_1
			}
			else = {
				add_building = building_spawning_pool
			}
		}

	}
	else_if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		if = {
			limit = {
				owner = {
					NOT = {
						has_valid_civic = civic_tec_machine_reimaginator_cluster
					}
				}
			}
			add_building = building_machine_assembly_plant
		}
	}
}

tec_start_add_aux_features = {
	# Origins
	if = {	# origin_payback
		limit = {
			owner = {
				NOT = {
					has_origin = origin_payback
				}
				tec_is_terraformer_environmentalist_empire = yes
			}
			is_artificial = no
		}
		add_building = building_ranger_lodge
		add_blocker = { type = d_big_nature_preserve_blocker }
	}
	if = {	# Necrophage
		limit = {
			owner = {
				has_origin = origin_necrophage
				NOR = {
					has_civic = civic_fanatic_purifiers 
					has_civic = civic_hive_devouring_swarm
				} #purges them instead
			}
		}
		if = {
			limit = {
				free_building_slots <= 0
			}
			
			add_district_and_planet_size_if_needed_effect = {
				district = $city|district_city$
			}
		}
		add_building = building_necrophage_elevation_chamber
	}
	if = {	# Clone army
		limit = {
			owner = {
				has_origin = origin_clone_army
			}
		}
		while = {
			count = 2
			if = {
				limit = {
					free_building_slots <= 0
				}
				
				add_district_and_planet_size_if_needed_effect = {
					district = $city|district_city$
				}
			}
			add_building = building_clone_army_clone_vat
		}
		planet_event = {
			id = clones.10
			days = 1095
			random = 730
		}
	}
	if = {	# origin_machine
		limit = { owner = { has_origin = origin_machine } }
		if = {
			limit = { owner = { has_civic = civic_machine_assimilator } }
			add_deposit = d_organic_slurry
		}
		add_deposit = d_resource_consolidation_1
	}
	if = {	# Swaps Cybernetic Creed Buildings
		limit = {
			owner = { has_origin = origin_cybernetic_creed }
		}
		add_building = building_amphitheater_of_the_mind
		add_building = building_forge_of_the_fellowship
		add_building = building_battlement_of_steel
		add_building = building_sanctuary_of_toil
		owner = {
			set_country_flag = suppress_vanilla_factions
			begin_event_chain = {
				event_chain = "cybernetic_creed_chain"
				target = this
			}
			country_event = {
				id = machine_age.2150
				days = 30
			}
			# check tec_leaders_replace.machine_age_2235
		}
	}
	if = {	# Swaps Synthetic Fertility Buildings, Tech
		limit = {
			owner = { has_origin = origin_synthetic_fertility }
		}
		if = {
			limit = {
				planet_size < 20
			}
			set_planet_size = 20
		}
		add_building = building_abandoned_gene_clinic
		while = {
			count = 2
			add_deposit = d_abandoned_cities
		}
		while = {
			count = 4
			remove_deposit = d_hibernating_lithoids
		}
	}
	# Civics
	if = {	# Permanent employment
		limit = {
			owner = {
				has_valid_civic = civic_permanent_employment
			}
		}
		if = {
			limit = {
				free_building_slots <= 0
			}
			
			add_district_and_planet_size_if_needed_effect = {
				district = $city|district_city$
			}
		}
		add_building = building_posthumous_employment_center
	}
	if = {	# Idyllic bloom
		limit = {
			owner = {
				tec_is_idyllic_bloom_empire = yes
				NOT = { has_origin = origin_life_seeded }
			}
		}
		add_building = building_gaiaseeders_1
	}
	if = {	# Relentless
		limit = {
			owner = {
				is_relentless_industrialist_empire = yes
			}
		}
		add_building = building_coordinated_fulfillment_center_1
	}
	if = {	# Tactical Cogitators
		limit = {
			owner = {
				has_valid_civic = civic_machine_tactical_algorithms
			}
		}
		add_building = building_military_academy
	}
	if = {	# Natural Design Buildings
		limit = {
			owner = { is_natural_design_empire = yes }
		}
		if = {
			limit = {
				owner = {
					is_hive_empire = yes
				}
			}
			add_building = building_hive_transcendental_retreat
		}
		if = {
			limit = {
				owner = {
					is_hive_empire = no
				}
			}
			add_building = building_transcendental_retreat
		}
	}
}

tec_start_add_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_machine_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_hive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_cyberhive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_biohive_capital
	}
	else = {
		add_building = building_capital
	}
	#
}

tec_start_add_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_major_capital
	}
	else = {
		add_building = building_hab_capital
	}
	#
}

tec_start_add_major_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_major_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_major_capital
	}
	else = {
		add_building = building_hab_major_capital
	}
	#
}

tec_start_add_system_habitat_capital = {
	# Capital
	if = {
		limit = {
			owner = {
				is_machine_empire = yes
			}
		}
		add_building = building_tec_hab_machine_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_hive_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = yes
				tec_is_biohive = no
			}
		}
		add_building = building_tec_hab_cyberhive_system_capital
	}
	else_if = {
		limit = {
			owner = {
				is_hive_empire = yes
				tec_is_cyberhive = no
				tec_is_biohive = yes
			}
		}
		add_building = building_tec_hab_biohive_system_capital
	}
	else = {
		add_building = building_hab_system_capital
	}
	#
}

tec_start_hab_zombies_effect = {
	if = {
		limit = {
			owner = {
				tec_is_zombie_empire = yes
			}
		}
		while = {
			count = 2
			random_owned_pop = {
				limit = {
					OR = {
						has_job_category = worker
						is_pop_category = worker
					}

					is_robotic_species = no
					NOT = { has_trait = trait_zombie }
				}
				make_pop_zombie = yes
			}
		}
	}
}

tec_start_hab_try_add_aux = {
	if = {
		limit = {
			free_building_slots >= 1
			owner = { NOT = { has_country_flag = tec_vd_added_aux } }
		}
		tec_start_add_aux_features = yes
		owner = { set_country_flag = tec_vd_added_aux }
	}
}

tec_start_hab_aquatic_flood_effect = {
	if = {
		limit = {
			owner = { tec_is_aquatic_empire = yes }
		}
		add_modifier = {
			modifier = flooded_habitat
			days = -1
		}
	}
}

# Pop init utils
tec_save_last_species = {
	save_event_target_as = last_created_species
	save_event_target_as = tec_last_created_species
}

tec_start_handle_machine_species = {
	modify_species = {
		species = last_created_species
		add_trait = trait_machine_unit
		add_traits_at_start_of_list = yes
		effect = {
			tec_save_last_species = yes
		}
	}
}

tec_start_handle_syncretic_species = {
	last_created_species = {
		set_species_flag = syncretic_species@root.owner
		save_event_target_as = syncretic_species
		tec_save_last_species = yes
		if = {
			limit = {
				prev.owner = {
					has_origin = origin_syncretic_evolution
				}
			}
			set_citizenship_type = {
				country = root.owner
				type = citizenship_slavery
			}

			if = {
				limit = {
					prev.owner = {
						is_hive_empire = yes
						NOT = {
							has_ethic = ethic_gestalt_empathy
						}
					}
				}
				tec_make_syncretic_hive_species = yes
			}

			if = {
				limit = {
					prev.owner = {
						has_valid_civic = civic_tec_origin_elders
					}
				}
				tec_make_syncretic_elder_uplifted_species = yes
			}
		}
	}
}

tec_make_syncretic_hive_species = {
	optimize_memory
	if = {
		limit = {
			prev.owner = {
				tec_is_cyberhive = yes
			}
		}
		modify_species = {
			species = event_target:syncretic_species
			add_trait = trait_hive_mind
			add_trait = trait_cybernetic
			add_traits_at_start_of_list = yes
			change_scoped_species = yes
			effect = {
				set_species_flag = syncretic_species@root.owner
				save_event_target_as = syncretic_species
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
				tec_save_last_species = yes
			}
		}
	} 
	else = {
		modify_species = {
			species = event_target:syncretic_species
			add_trait = trait_hive_mind
			add_traits_at_start_of_list = yes
			change_scoped_species = yes
			effect = {
				set_species_flag = syncretic_species@root.owner
				save_event_target_as = syncretic_species
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
				tec_save_last_species = yes
			}
		}
	}
}

tec_make_syncretic_elder_uplifted_species = {
	optimize_memory
	modify_species = {
		species = event_target:syncretic_species
		remove_trait = trait_syncretic_proles
		has_trait = trait_tec_se_subspecies
		change_scoped_species = yes
		effect = {
			set_species_flag = syncretic_species@root.owner
			save_event_target_as = syncretic_species
			tec_save_last_species = yes
		}
	}
}

tec_start_handle_secondary_species_gets_special_traits = {
	owner = {
		switch = {
			trigger = has_origin
			origin_void_machines = {
				last_created_species = {
					modify_species = {
						species = this
						add_trait = trait_void_dweller_1
						add_traits_at_start_of_list = yes
						ideal_planet_class = pc_habitat
					}
				}
			}
			origin_post_apocalyptic_machines = {
				last_created_species = {
					change_species_characteristics = {
						add_trait = trait_survivor
						add_traits_at_start_of_list = yes
					}
				}
			}
			origin_subterranean_machines = {
				last_created_species = {
					change_species_characteristics = {
						add_trait = trait_cave_dweller
						add_traits_at_start_of_list = yes
					}
				}
			}
		}
	}
}

tec_start_handle_secondary_species_planet_class = {
	if = {
		limit = {
			root = {
				tec_is_nuked_world = no
				tec_is_relic_world = no
			}
		}
		modify_species = {
			species = this
			ideal_planet_class = home_planet
		}
	}
}

tec_start_handle_biothrophy_species = {
	last_created_species = {
		set_species_flag = tec_original_biotrophy_@root.owner
		tec_start_handle_secondary_species_planet_class = yes
		set_citizenship_type = {
			country = root.owner
			type = citizenship_organic_trophy
		}
		set_living_standard = {
			country = root.owner
			type = living_standard_organic_trophy
		}
		tec_save_last_species = yes
	}
}

tec_start_handle_assimilator_species = {
	last_created_species = {
		set_species_flag = cyborg_assimilated@root.owner
		tec_start_handle_secondary_species_planet_class = yes
		set_citizenship_type = {
			country = root.owner
			type = citizenship_full_machine
		}
		set_living_standard = {
			country = root.owner
			type = living_standard_hive_mind
		}
		tec_save_last_species = yes
	}
}

tec_start_handle_mechanists = {
	owner = {
		create_built_robot_species = yes
		set_country_flag = done_first_robot
	}
	last_created_species = {
		change_species_characteristics = {
			add_trait = trait_auto_mod_robotic
		}
		tec_save_last_species = yes
	}
}

tec_start_handle_bioservant = {
	last_created_species = {
		tec_save_last_species = yes
	}
	owner = {
		tec_make_secondary_species_bioservant_species = yes
		set_country_flag = done_first_bioservant
	}
	event_target:tec_last_created_species = {
		tec_species_swap_trait_if_exists = {
			TRAIT = trait_tec_auto_mod_bioservant
			WITH = trait_auto_mod_biological
		}
		tec_species_swap_trait_if_exists = {
			TRAIT = trait_tec_sterile_pregame
			WITH = trait_tec_sterile
		}

		tec_save_last_species = yes
	}
	owner = {
		owner_main_species = {
			tec_species_swap_trait_if_exists = {
				TRAIT = trait_tec_auto_mod_bioservant
				WITH = trait_auto_mod_biological
			}
		}
	}
}


tec_start_handle_zombies = {
	while = {
		count = 4
		random_owned_pop = {
			limit = {
				OR = {
					has_job_category = worker
					is_pop_category = worker
				}
				is_robotic_species = no
				NOT = { has_trait = trait_zombie }
			}
			make_pop_zombie = yes
		}
	}
}

tec_start_handle_cybernetic_creed = {
	while = {
		limit = {
			any_owned_pop = {
				is_robotic_species = no
				NOT = { has_ethic = ethic_spiritualist }
			}
		}
		count = 6 # 2 rulers and 4 jobs
		random_owned_pop = {
			limit = {
				is_robotic_species = no
				NOT = { has_ethic = ethic_spiritualist }
			}
			pop_change_ethic = ethic_spiritualist
		}
	}
	while = {
		limit = {
			any_owned_pop = {
				is_robotic_species = no
				has_ethic = ethic_spiritualist
				has_cybernetic_creed_trait = no
			}
		}
		random_owned_pop = {
			limit = {
				is_robotic_species = no
				has_ethic = ethic_spiritualist
				has_cybernetic_creed_trait = no
			}
			modify_species = {
				species = this
				add_trait = trait_cyborg_ritualistic_implants
				add_traits_at_start_of_list = yes
			}
		}
	}
	while = {
		limit = {
			any_owned_pop = {
				has_cybernetic_creed_trait = no
				OR = {
					is_pop_category = ruler
					is_pop_category = specialist
				}
			}
		}
		random_owned_pop = {
			limit = {
				has_cybernetic_creed_trait = no
			}
			clear_pop_category = yes
		}
	}
	owner = {
		set_policy = {
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = no
		}
	}
}