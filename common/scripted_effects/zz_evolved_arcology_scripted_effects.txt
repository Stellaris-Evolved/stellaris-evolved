# common\scripted_effects\zz_evolved_arcology_scripted_effects.txt

# Ecumenopolis
	tec_handle_relic_flag = {
		optimize_memory
		set_planet_flag = tec_ecumenopolis_was_relic_planet

		remove_planet_flag = tec_ecumenopolis_spec_militarized
		remove_planet_flag = tec_ecumenopolis_spec_science
		remove_planet_flag = tec_ecumenopolis_spec_admin
	}

	tec_ecu_clean_modifiers = {
		optimize_memory
		remove_modifier = pm_tec_industrialized_planet
		
		#PD
		inline_script = {
			script = mod_support/tec_pd_present
			code = "
				remove_modifier = @pd_engineered_environment_gaia
				remove_pd_modifier = yes
			"
		}
	}

	tec_ecoworld_clean_modifiers = {
		optimize_memory
		remove_modifier = pm_tec_industrialized_planet
	}


	tec_ecu_logic_start = {
		optimize_memory
		tec_clear_deposits_handler = yes
		clear_deposits = yes

		change_pc = $change_pc$

		tec_ecu_clean_modifiers = yes
		tec_ecu_planet_entity = yes

		[[relic]
			tec_handle_relic_flag = yes
		]
	}

	tec_ecu_logic_finish = {
		optimize_memory
		[[relic]
			add_deposit = d_former_relic_world
			while = {
				count = 4
				solar_system = {
					random_system_ambient_object = {
						limit = { has_ambient_object_flag = relic_world_debris }
						destroy_ambient_object = this
					}
				}
			}
		]
		tec_ecu_ecological_resolution = yes
		tec_clear_deposits_handler = { restore = yes }
	}


	tec_ecu_ecological_resolution = {
		optimize_memory
		# Faction flags
		owner = {
			set_timed_country_flag = {
				flag = tec_recently_created_ecumenopolis
				years = 10
			}
			change_variable = {
				which = tec_created_ecus
				value = 1
			}
		}
		# Galcom Resolution
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_ecology_environmental_control_board"
					is_active_resolution = "resolution_ecology_paradise_initiative"
				}
			}
			owner = {
				set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
			}
		}
	}

	tec_ecu_count_store_deposit = {
		inline_script = {
			script = tec_type_hint
			deposit = $deposit$
			bool = $restore$
		}
		[[!restore]
		if = {
			limit = {
				has_deposit = $deposit$
			}
			while = {
				limit = {
					has_deposit = $deposit$
				}
				remove_deposit = $deposit$
				change_variable = {
					which = tec_deposit_restore_$deposit$
					value = 1
				}
			}
		}
		]
		[[restore]
		if = {
			limit = {
				check_variable = {
					which = tec_deposit_restore_$deposit$
					value > 0
				}
			}
			while = {
				limit = {
					check_variable = {
						which = tec_deposit_restore_$deposit$
						value > 0
					}
				}
				add_deposit = $deposit$
				change_variable = {
					which = tec_deposit_restore_$deposit$
					value = -1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = tec_deposit_restore_$deposit$
						value = 0
					}
				}
				clear_variable = tec_deposit_restore_$deposit$
			}
		}
		]
	}

	tec_clear_deposits_handler = {
		optimize_memory
		inline_script = {
			script = tec_type_hint
			bool = $restore$
			bool = $event_unique$
			bool = $origin$
			bool = $underground$
			bool = $industrial$
		}
		# PSIONIC DEPOSITS
			tec_ecu_count_store_deposit = {
				deposit = d_tec_psionic_ascension_zone_1
				restore = $restore|no$
			}
		# /
		# centrality
			tec_ecu_count_store_deposit = {
				deposit = d_tec_centrality_consolidated_infrastructure
				restore = $restore|no$
			}

		# /
		# desiccators
			tec_ecu_count_store_deposit = {
				deposit = d_tec_desiccators_deposit
				restore = $restore|no$
			}

		# /
		# Eco deposits
			tec_ecu_count_store_deposit = {
				deposit = d_tec_eco_terraformer_soil
				restore = $restore|no$
			}
			tec_ecu_count_store_deposit = {
				deposit = d_tec_eco_terraformer_magnetic
				restore = $restore|no$
			}
			tec_ecu_count_store_deposit = {
				deposit = d_tec_eco_terraformer_atmosphere
				restore = $restore|no$
			}
		# /

		# Event unique
		inline_script = {
			script = conditional/tec_equal
			value = $event_unique|yes$
			equal = yes
			code = "
				tec_ecu_count_store_deposit = {
					deposit = d_dragon_monument
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_stellarite_trophy
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_crashed_slaver_ship_memorial
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_arcane_device
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_microplanet_memorial
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_federation_hegemony_monument_1
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_federation_hegemony_monument_2
					restore = $restore|no$
				}

				tec_ecu_count_store_deposit = {
					deposit = d_sentinels
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_sentinels_metal
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_sentinels_monument
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_landed_dragon
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_machine_care_home
					restore = $restore|no$
				}
			"
		}


		#/

		# origin
		inline_script = {
			script = conditional/tec_equal
			value = $origin|yes$
			equal = yes
			code = "
				tec_ecu_count_store_deposit = {
					deposit = d_progenitor
					restore = $restore|no$
				}
			"
		}

		#/
		# underground deposits
		inline_script = {
			script = conditional/tec_equal
			value = $underground|yes$
			equal = yes
			code = "
				tec_ecu_count_store_deposit = {
					deposit = d_underground_mine
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_underground_generator
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_underground_farm
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_underground_contact_zone
					restore = $restore|no$
				}
			"
		}
		# /
		# industrial deposits
		inline_script = {
			script = conditional/tec_equal
			value = $industrial|yes$
			equal = yes
			code = "
				tec_ecu_count_store_deposit = {
					deposit = d_weapon_extraction_facility
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_bluelotus
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_bluelotus2
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_toy_factory_complex
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_odd_factory
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_ancient_particle_accelerator
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_underground_vault
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_space_time_anomaly
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_portal_research_zone
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_portal_research_zone_gestalt
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_hab_lonely_bot_deposit
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_hab_lonely_bot_deposit_2
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_hab_lonely_bot_deposit_3
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_ancient_manufactorium_working
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_stasis_prison
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_prisoner_intergration
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_star_mall_promenade
					restore = $restore|no$
				}
				tec_ecu_count_store_deposit = {
					deposit = d_astrogarbage_collector
					restore = $restore|no$
				}
			"
		}
		# /
		[[!restore]
			save_deposits = yes # vanilla
		]
		[[restore]
			restore_saved_deposits = yes # vanilla
		]
	}

	# Habitat ecu handler
	tec_set_focus_flags_effect = {
		optimize_memory
		if = {
			limit = {
				has_factory_designation = yes
			}
			set_planet_flag = factory_planet
		}
		else_if = {
			limit = {
				has_foundry_designation = yes
			}
			set_planet_flag = foundry_planet
		}
	}

	tec_district_conversion_effect = {
		optimize_memory
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = {
				type = $DISTRICT$
			}
			variable = tec_district_conversion
		}
		divide_variable = { which = tec_district_conversion value = $RATIO|2$ }
		floor_variable = tec_district_conversion
		while = {
			count = tec_district_conversion
			remove_district = $DISTRICT$
		}
		clear_variable = tec_district_conversion
	}

	tec_industrial_split_effect = {
		optimize_memory
		if = {
			limit = {
				has_planet_flag = factory_planet
			}
			remove_planet_flag = factory_planet
			swap_districts_effect = {
				DISTRICT1 = $FOUNDRY$
				DISTRICT2 = $FACTORY$
			}
		}
		else_if = {
			limit = {
				has_planet_flag = foundry_planet
			}
			remove_planet_flag = foundry_planet
		}
		else = {
			split_districts_effect = {
				DISTRICT1 = $FOUNDRY$
				DISTRICT2 = $FACTORY$
			}
		}
	}
# /

# Ecoworld
	tec_ecoworld_terraforming_effect = {
		optimize_memory
		owner = {
			change_variable = {
				which = tec_terraformed_worlds
				value = 1
			}
		}

		if = {
			limit = {
				exists = owner
				owner = {
					has_technology = tech_terrestrial_sculpting
					has_ascension_perk = ap_world_shaper
					OR = {
						has_valid_civic = civic_tec_regular_eco_keepers
						has_valid_civic = civic_tec_origin_gaia_children
					}
				}
				planet = {
					tec_is_gaia_world = no
				}
			}
			tec_planet_make_gaia = yes
		}
	}

	tec_ecoworld_demote_industrial_jobs = {
		optimize_memory
		if = {
			limit = { 
				exists = owner
				owner = {
					is_regular_empire = yes
				}
			}
			
			every_owned_pop = {
				limit = {
					planet = {
						is_same_value = root
					}
					OR = {
						has_job = foundry
						has_job = catalytic_technician
						has_job = artisan
						has_job = artificer

						has_job = alloy_drone
						has_job = fabricator
						has_job = catalytic_technician
						has_job = artisan_drone
					}
				}
				add_modifier = {
					modifier = tec_demote_me_senpai
					days = 45
				}
			}
		}
	}
# /

# Habitats
	tec_convert_district = {
		optimize_memory
		export_trigger_value_to_variable = {
			trigger = num_districts
			parameters = {
				type = $BASE_DISTRICT$
			}
			variable = swap_districts_variable
		}
		multiply_variable = {
			which = swap_districts_variable
			value = $RATE$
		}
		while = {
			count = swap_districts_variable
			remove_district = $BASE_DISTRICT$
			add_district_if_possible_effect = {
				district = $DISTRICT$
			}
		}
		clear_variable = swap_districts_variable
	}

	tec_on_subhabitat_removed_effect = {
		remove_planet_flag = tec_has_subhabitat
		remove_planet_flag = has_megastructure
	}
	tec_on_subhabitat_dismantle_cancel_effect = {
		set_planet_flag = tec_has_subhabitat
		set_planet_flag = has_megastructure
	}

	tec_on_subhabitat_complete_effect = {
		save_event_target_as = tec_original_subhabitat
		# Marks the habitat
		fromfrom.solar_system = {
			random_system_planet = {
				limit = {
					has_planet_flag = habitat
				}
				save_event_target_as = target_habitat
			}
		}
		# Marks the planet
		event_target:target_planet = {
			set_planet_flag = has_megastructure
			set_planet_flag = tec_has_subhabitat
	
			if = {
				limit = {
					has_orbital_station = yes
				}
				orbital_station = {
					dismantle = yes
				}
			}
	
			set_habitat_planetary_features_effect = yes

			# Science - More than 2 researchs
			if = {
				limit = {
					event_target:target_planet = {
						OR = {
							calc_true_if = {
								amount >= 2
								tec_has_orbital_physics_deposit = yes
								tec_has_orbital_society_deposit = yes
								tec_has_orbital_engineering_deposit = yes
							}
							has_planet_flag = tec_force_subhabitat_science
						}
						NOT = { has_planet_flag = tec_found_subhabitat_type }
						NOR = {
							#has_planet_flag = tec_force_subhabitat_science
							has_planet_flag = tec_force_subhabitat_energy
							has_planet_flag = tec_force_subhabitat_minerals
							has_planet_flag = tec_force_subhabitat_food
						}
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_science
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_science
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_SCIENCE_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Physics
			if = {
				limit = {
					event_target:target_planet = {
						tec_has_orbital_physics_deposit = yes
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
					NOR = {
						#has_planet_flag = tec_force_subhabitat_science
						has_planet_flag = tec_force_subhabitat_energy
						has_planet_flag = tec_force_subhabitat_minerals
						has_planet_flag = tec_force_subhabitat_food
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_physics
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_science
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_PHYSICS_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Society
			if = {
				limit = {
					event_target:target_planet = {
						tec_has_orbital_society_deposit = yes
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
					NOR = {
						#has_planet_flag = tec_force_subhabitat_science
						has_planet_flag = tec_force_subhabitat_energy
						has_planet_flag = tec_force_subhabitat_minerals
						has_planet_flag = tec_force_subhabitat_food
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_society
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_science
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_SOCIETY_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Engineering
			if = {
				limit = {
					event_target:target_planet = {
						tec_has_orbital_engineering_deposit = yes
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
					NOR = {
						#has_planet_flag = tec_force_subhabitat_science
						has_planet_flag = tec_force_subhabitat_energy
						has_planet_flag = tec_force_subhabitat_minerals
						has_planet_flag = tec_force_subhabitat_food
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_engineering
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_science
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_ENGINEERING_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Energy + Minerals
			if = {
				limit = {
					event_target:target_planet = {
						has_orbital_energy_deposit = yes
						has_orbital_mining_deposit = yes
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_extraction
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_extraction
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_EXTRACTION_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Energy
			if = {
				limit = {
					event_target:target_planet = {
						OR = {
							has_orbital_energy_deposit = yes
							has_planet_flag = tec_force_subhabitat_energy
						}
						NOR = {
							has_planet_flag = tec_force_subhabitat_science
							#has_planet_flag = tec_force_subhabitat_energy
							has_planet_flag = tec_force_subhabitat_minerals
							has_planet_flag = tec_force_subhabitat_food
						}
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_energy
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_energy
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_ENERGY_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Minerals
			if = {
				limit = {
					event_target:target_planet = {
						OR = {
							has_orbital_mining_deposit = yes
							has_planet_flag = tec_force_subhabitat_minerals
						}
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
					NOR = {
						has_planet_flag = tec_force_subhabitat_science
						has_planet_flag = tec_force_subhabitat_energy
						#has_planet_flag = tec_force_subhabitat_minerals
						has_planet_flag = tec_force_subhabitat_food
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_minerals
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_minerals
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_MINERALS_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			# Food
			if = {
				limit = {
					event_target:target_planet = {
						OR = {
							tec_has_orbital_food_deposit = yes
							has_planet_flag = tec_force_subhabitat_food
						}
					}
					NOT = { has_planet_flag = tec_found_subhabitat_type }
					NOR = {
						has_planet_flag = tec_force_subhabitat_science
						has_planet_flag = tec_force_subhabitat_energy
						has_planet_flag = tec_force_subhabitat_minerals
						#has_planet_flag = tec_force_subhabitat_food
					}
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_food
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_food
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_FOOD_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}

			inline_script = {
				script = mod_support/tec_effect_include
				effect = tec_on_subhabitat_complete_effect
				parameters = ""
			}

			# If all fails, fallback to extraction
			if = {
				limit = {
					NOT = { has_planet_flag = tec_found_subhabitat_type }
				}
				solar_system = {
					spawn_megastructure = {
						type = tec_subhabitat_extraction
						owner = event_target:tec_original_subhabitat.owner
						planet = event_target:target_planet
						init_effect = {
							save_event_target_as = target_subhabitat
						}
					}
					change_variable = {
						which = tec_subhabitats_extraction
						value = 1
					}
				}
				event_target:target_subhabitat = {
					set_name = {
						key = TEC_SUBHABITAT_EXTRACTION_NAME
						variable_string = "\\[FROM.from.planet.GetName]"
					}
					set_megastructure_flag = tec_subhabitat_extraction_low_production
					set_megastructure_flag = productive_megastructure
				}
				set_planet_flag = tec_found_subhabitat_type
			}
			remove_planet_flag = tec_found_subhabitat_type
		}
	}
# /