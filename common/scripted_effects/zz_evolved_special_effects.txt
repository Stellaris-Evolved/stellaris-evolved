
# Ascension paths
tec_create_latent_psionic_species = {
	optimize_memory
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			tec_create_latent_psionic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			tec_create_latent_psionic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	change_dominant_species = { species = event_target:new_main_species }

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			create_cybernetic_species_mod = yes
		}
	}

	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				NOR = {
					has_trait = @trait_tec_replicant_standard
					has_trait = @trait_tec_advanced_cyborg
					has_trait = trait_cybernetic
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				create_cybernetic_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
				has_trait = leader_trait_curator
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}

	every_pool_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}
}

tec_create_latent_psionic_species_mod = {
	species = {
		create_species = {
			is_mod = yes
			name = this
			plural = this
			class = this
			portrait = this
			traits = this
			can_be_modified = this
			homeworld = this
			namelist = this
			gender = this
			traits = {
				ideal_planet_class = this
				trait = trait_cybernetic
			}
		}
		save_event_target_as = changing_species
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_envoy = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}


tec_create_bioperfect_species_mod = {
	optimize_memory

	# PRE STEPS
	if = {	# Necrophage special events
		limit = {
			has_origin = origin_necrophage
			has_country_flag = tec_gene_necrophage_evolved
		}
		modify_species = {
			remove_trait = trait_necrophage
			add_trait = @trait_tec_necroborn
			add_traits_at_start_of_list = yes
			effect = {
				root = {
					change_dominant_species = {
						species = prev
					}
				}
			}
		}
		owner_main_species = {
			every_galaxy_species = {
				limit = {
					is_same_species = prev
					NOT = { is_same_value = prev }
					has_trait = trait_necrophage
					NOR = {
						any_country = {
							NOT = { is_same_value = root }
							owner_main_species = {
								is_same_value = prevprev
							}
						}
						any_species_pop = {
							NOT = { is_owned_by = root }
						}
					}
				}
				change_species_characteristics = {
					remove_trait = trait_necrophage
					add_trait = @trait_tec_necroborn
					add_traits_at_start_of_list = yes
				}
			}
		}
		remove_country_flag = tec_gene_necrophage_evolved
	}
	if = {	# Elder Guidance
		limit = {
			has_origin = origin_syncretic_evolution
			has_country_flag = tec_gene_elder_cured
		}
		modify_species = {
			remove_trait = @trait_tec_se_elder
			add_trait = @trait_tec_se_subspecies
			add_traits_at_start_of_list = yes
			effect = {
				root = {
					change_dominant_species = {
						species = prev
					}
				}
			}
		}
		owner_main_species = {
			every_galaxy_species = {
				limit = {
					is_same_species = prev
					NOT = { is_same_value = prev }
					has_trait = @trait_tec_se_elder
					NOR = {
						any_country = {
							NOT = { is_same_value = root }
							owner_main_species = {
								is_same_value = prevprev
							}
						}
						any_species_pop = {
							NOT = { is_owned_by = root }
						}
					}
				}
				change_species_characteristics = {
					remove_trait = @trait_tec_se_elder
					add_trait = @trait_tec_se_subspecies
					add_traits_at_start_of_list = yes
				}
			}
		}
		remove_country_flag = tec_gene_necrophage_evolved
	}

	# Main modification
	species = {
		save_event_target_as = changing_species
		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = this
			portrait = this
			traits = this
			can_be_modified = yes
			gender = this
			homeworld = root.capital_scope
			traits = {
				ideal_planet_class = pc_tec_gene
			}

			effect = {
				save_event_target_as = tec_biospecies
				rename_species = {
					prompt_country = root
					name_list = ascension_list
				}
			}
		}
	}
	
	change_dominant_species = { species = event_target:tec_biospecies }

	every_owned_pop = {
		limit = {
			exists = species
			is_exact_same_species = event_target:changing_species
		}
		change_species = event_target:tec_biospecies
		hidden_effect = {
			set_citizenship_type = {
				country = root.owner
				type = citizenship_full
				cooldown = no
			}
		}
	}
	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			exists = species
			is_exact_same_species = event_target:changing_species
		}
		change_species = event_target:tec_biospecies
	}
	every_owned_army = {
		limit = {
			exists = species
			is_exact_same_species = event_target:changing_species
		}
		change_species = last_created_species
	}
	every_owned_leader = {
		limit = {
			exists = species
			is_exact_same_species = event_target:changing_species
		}
		change_species = event_target:tec_biospecies
	}
	every_pool_leader = {
		limit = {
			exists = species
			is_exact_same_species = event_target:changing_species
		}
		change_species = event_target:tec_biospecies
	}
	every_envoy = {
		limit = { is_exact_same_species = event_target:changing_species }
		change_species = event_target:tec_biospecies
	}
}

tec_create_cybernetic_species = {
	optimize_memory
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	change_dominant_species = { species = event_target:new_main_species }

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			create_cybernetic_species_mod = yes
		}
	}

	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						#is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				NOR = {
					has_trait = @trait_tec_replicant_standard
					has_trait = @trait_tec_advanced_cyborg
					has_trait = trait_cybernetic
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				create_cybernetic_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
				has_trait = leader_trait_curator
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}

	every_pool_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}
}

tec_create_cybernetic_species_backup = {
	optimize_memory
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	change_dominant_species = { species = event_target:new_main_species }

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			create_cybernetic_species_mod = yes
		}
	}

	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						has_trait = trait_cybernetic
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				NOR = {
					has_trait = trait_cybernetic
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				create_cybernetic_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
				has_trait = leader_trait_curator
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}

	every_pool_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}
}

tec_create_advanced_cybernetic_species = {
	optimize_memory
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			create_cybernetic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	change_dominant_species = { species = event_target:new_main_species }

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			create_cybernetic_species_mod = yes
		}
	}

	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					create_cybernetic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				NOR = {
					has_trait = @trait_tec_replicant_standard
					has_trait = @trait_tec_advanced_cyborg
					has_trait = trait_cybernetic
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
				}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				create_cybernetic_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
				has_trait = leader_trait_curator
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}

	every_pool_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_cyborg
				has_trait = leader_trait_general_cyborg
				has_trait = leader_trait_governor_cyborg
				has_trait = leader_trait_scientist_cyborg
				has_trait = leader_trait_ruler_cyborg
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_cyborg
			add_ruler_trait = leader_trait_ruler_cyborg
		}
	}
}

tec_create_advanced_cybernetic_species_ap = {
	optimize_memory
	modify_species = {
		species = this
		add_trait = @trait_tec_advanced_cyborg
		add_traits_at_start_of_list = yes
		remove_trait = trait_cybernetic
		change_scoped_species = no
		effect = {
			root = {
				every_owned_pop = {
					limit = {
						is_same_species = prevprevprev
					}
					change_species = prevprev
				}
				
				every_owned_leader = {
					limit = {
						is_same_species = prevprevprev
					}
					change_species = prevprev
					add_leader_traits_after_modification = yes
					remove_leader_traits_after_modification = yes
				}
				every_pool_leader = {
					limit = {
						is_same_species = prevprevprev
					}
					change_species = prevprev
					add_leader_traits_after_modification = yes
					remove_leader_traits_after_modification = yes
				}

				every_owned_army = {
					limit = {
						is_same_species = prevprevprev
					}
					modify_army = {
						species = prevprev
					}
				}
				every_controlled_ship = {
					limit = {
						is_ship_class = shipclass_colonizer
						species = {
							is_same_species = prevprevprev
						}
					}
					change_species = prevprev
					#	change_species = event_target:new_replicant_species
				}
			}
		}
	}
}

tec_create_cyberpsionic_species = {
	optimize_memory
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			tec_create_cyberpsionic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			tec_create_cyberpsionic_species_mod = yes
			species = { save_event_target_as = new_main_species }
		}
	}
	change_dominant_species = { species = event_target:new_main_species }

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			tec_create_cyberpsionic_species_mod = yes
		}
	}

	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_cyberpsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					tec_create_cyberpsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						is_same_value = event_target:new_main_species
						has_trait = trait_cybernetic
						has_trait = @trait_tec_advanced_cyborg
						has_trait = @trait_tec_cyberpsionic
						has_trait = @trait_tec_replicant_standard
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					tec_create_cyberpsionic_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				NOR = {
					is_same_value = event_target:new_main_species
					has_trait = trait_cybernetic
					has_trait = @trait_tec_advanced_cyborg
					has_trait = @trait_tec_cyberpsionic
					has_trait = @trait_tec_replicant_standard
					has_trait = trait_mechanical
					has_trait = trait_machine_unit
					has_trait = leader_trait_curator
				}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				tec_create_cyberpsionic_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = @trait_tec_cyberpsionic }
			NOR = {
				has_trait = leader_trait_admiral_tec_cyberpsionic
				has_trait = leader_trait_general_tec_cyberpsionic
				has_trait = leader_trait_governor_tec_cyberpsionic
				has_trait = leader_trait_scientist_tec_cyberpsionic
				has_trait = leader_trait_ruler_tec_cyberpsionic
				has_trait = leader_trait_curator
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
	}

	every_pool_leader = {
		limit = {
			species = { has_trait = trait_cybernetic }
			NOR = {
				has_trait = leader_trait_admiral_tec_cyberpsionic
				has_trait = leader_trait_general_tec_cyberpsionic
				has_trait = leader_trait_governor_tec_cyberpsionic
				has_trait = leader_trait_scientist_tec_cyberpsionic
				has_trait = leader_trait_ruler_tec_cyberpsionic
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_tec_cyberpsionic
			add_ruler_trait = leader_trait_ruler_tec_cyberpsionic
		}
	}
}

tec_create_cyberpsionic_species_mod = {
	optimize_memory
	species = {
		save_event_target_as = changing_species
		create_species = {
			is_mod = yes
			name = this
			plural = this
			class = this
			portrait = this
			traits = this
			homeworld = this
			namelist = this
			can_be_modified = yes
			gender = this
			traits = {
				ideal_planet_class = this
				trait = @trait_tec_cyberpsionic
			}
			effect = {
				save_event_target_as = tec_new_cyberpsi_species	
			}
		}
	}

	# Cybernetic & etc trait cleanup - Done in separated ifs just in case
	if = {	# Cybernetic
		limit = {
			event_target:tec_new_cyberpsi_species = {
				has_trait = trait_cybernetic
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = trait_cybernetic
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}
	if = {	# Adv cyborg
		limit = {
			event_target:tec_new_cyberpsi_species = {
				has_trait = @trait_tec_advanced_cyborg
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = @trait_tec_advanced_cyborg
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}
	if = {	# Latent psionic
		limit = {
			event_target:tec_new_cyberpsi_species = {
				has_trait = trait_latent_psionic
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = trait_latent_psionic
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}
	if = {	# Psionic
		limit = {
			event_target:tec_new_cyberpsi_species = {
				has_trait = trait_psionic
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = trait_psionic
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}

	if = {
		limit = { # Hive latent psi
			event_target:tec_new_cyberpsi_species = {
				has_trait = @trait_tec_hive_psionic_resonance
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = @trait_tec_hive_psionic_resonance
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}
	if = {
		limit = { # Hive psi
			event_target:tec_new_cyberpsi_species = {
				has_trait = @trait_tec_hive_psionic_entanglement
			}
		}
		modify_species = {
			species = event_target:tec_new_cyberpsi_species
			remove_trait = @trait_tec_hive_psionic_entanglement
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_new_cyberpsi_species
			}
		}
	}


	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = event_target:tec_new_cyberpsi_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = event_target:tec_new_cyberpsi_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = event_target:tec_new_cyberpsi_species
		}
		every_envoy = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = event_target:tec_new_cyberpsi_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_new_cyberpsi_species
		}
		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = event_target:tec_new_cyberpsi_species
		}
	}
}

tec_create_synth_species = {
	if = {
		limit = {
			has_policy_flag = robots_outlawed
		}
		set_policy = {
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = yes
		}
	}
	if = {
		limit = {
			OR = {
				has_policy_flag = ai_servitude
				has_policy_flag = ai_outlawed
			}
		}
		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = yes
		}
	}
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_divinity_silence_the_soulless"
				is_active_resolution = "resolution_divinity_a_defined_purpose"
			}
		}
		owner = {
			set_timed_country_flag = { flag = resolution_breached_synthetic_evolution days = 3600 }
		}
	}

	give_technology = { tech = tech_bio_reactor message = no }
	# Saves the species rights
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_utopian
					}
				}
				
			}
			root = {
				set_country_flag = tec_sa_utopian
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_academic_privilege
					}
				}
				
			}
			root = {
				set_country_flag = tec_sa_academic
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_chemical_bliss
					}
				}
				
			}
			root = {
				set_country_flag = tec_sa_chem
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_good
					}
				}
			}
			root = {
				set_country_flag = tec_sa_good
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_normal
					}
				}
			}
			root = {
				set_country_flag = tec_sa_normal
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_shared_burden
					}
				}
			}
			root = {
				set_country_flag = tec_sa_shared
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_stratified
					}
				}
			}
			root = {
				set_country_flag = tec_sa_stratified
			}
		}
		if = {
			limit = {
				owner_species = {
					has_living_standard = {
						type = living_standard_subsistence
					}
				}
			}
			root = {
				set_country_flag = tec_sa_poor
			}
		}
	# /	

	# Executes the robomorphosis
	if = {
		limit = {
			has_country_flag = tec_synth_use_robots
		}
		random_owned_species = {
			limit = {
				has_species_flag = tec_synth_host_species_@root
			}
			save_event_target_as = new_robotic_species
		}
	}
	else = {
		create_species = {
			# technically its applied at modification to avoid purifiers strange interactions, lets see...
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
			}
	
			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } }}
							MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } }}
							REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } }}
							AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } }}
							ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } }}
							MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } }}
							FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } }}
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } }}
							LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } }}
							NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } }}
							AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } }}
							TOX = { prev = { change_species_characteristics = { portrait = "tox_machine" } } }
						}
					}
				}
	
				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
	
				save_event_target_as = new_robotic_species
			}
		}
	}

	# Extra bonuses
	if = {
		limit = {
			is_lithoid_empire = no
			has_country_flag = tec_synth_slow_transition
		}
		event_target:new_robotic_species = {
			modify_species = {
				add_trait = trait_tec_machine_biobrain
				effect = {
					save_event_target_as = new_robotic_species
				}
			}
		}
	}
	
	change_dominant_species = { species = event_target:new_robotic_species }

	# Extracheck, to be sure
		if = {
			limit = {
				has_policy_flag = robots_outlawed
			}
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = yes
			}
		}
	# /

	# Applies to pops
		every_owned_pop = {
			limit = {
				species = {
					OR = {
						has_trait = trait_cybernetic
						is_same_species = owner_main_species
					}
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_controlled_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					OR = {
						has_trait = trait_cybernetic
						is_same_value = owner_species
					}
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					OR = {
						has_trait = trait_cybernetic
						is_same_value = owner_species
					}
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					OR = {
						has_trait = trait_cybernetic
						is_same_value = owner_species
					}
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}
		every_owned_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					species = {
						is_same_value = owner_species
					}
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					species = {
						is_same_value = owner_species
					}
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_envoy = {
			limit = { 
				species = {
					NOT = {
						has_trait = trait_mechanical
					}
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		
	# /
}

tec_create_replicant_species = {
	optimize_memory
	modify_species = {
		species = this
		ideal_planet_class = pc_nuked
		
		effect = {
			modify_species = {
				species = this
				remove_trait = trait_pc_nuked_preference
				
				effect = {
					create_species = {
						is_mod = yes
						name = this
						namelist = this
						plural = this
						class = "REPLICANT"
						portrait = this
						can_be_modified = yes
						gender = this
						homeworld = root.capital_scope
						traits = {
							trait = @trait_tec_replicant_standard
						}
						traits = this
						effect = {
							rename_species = {
								prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
								name_list = ascension_list
							}
							save_event_target_as = tec_replicant_species
						}
					}
				}
			}
		}
	}

	# Cybernetic & cyberpsionic cleanup - Done in 3 separated ifs just in case
	if = {	# Cybernetic
		limit = {
			event_target:tec_replicant_species = {
				has_trait = trait_cybernetic
			}
		}
		modify_species = {
			species = event_target:tec_replicant_species
			remove_trait = trait_cybernetic
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_replicant_species
			}
		}
	}
	if = {	# ADV Cybernetic
		limit = {
			event_target:tec_replicant_species = {
				has_trait = @trait_tec_advanced_cyborg
			}
		}
		modify_species = {
			species = event_target:tec_replicant_species
			remove_trait = @trait_tec_advanced_cyborg
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_replicant_species
			}
		}
	}
	if = {	# Cyberpsio
		limit = {
			event_target:tec_replicant_species = {
				has_trait = @trait_tec_cyberpsionic
			}
		}
		modify_species = {
			species = event_target:tec_replicant_species
			remove_trait = @trait_tec_cyberpsionic
			add_trait = trait_psionic
			change_scoped_species = no
			effect = {
				save_event_target_as = tec_replicant_species
			}
		}
	}

	# Saves flags
	owner_main_species = {
		save_event_target_as = tec_target_species
		set_species_flag = tec_prereplicant_species_of_@event_target:tec_replicant_species
	}

	event_target:tec_replicant_species = {
		set_species_flag = tec_replicant_species_of_@event_target:tec_target_species
	}

	every_owned_pop = {
		limit = { is_same_species = root }
		change_species = event_target:tec_replicant_species
		hidden_effect = {
			set_citizenship_type = {
				country = root.owner
				type = citizenship_full
				cooldown = no
			}
		}
	}

	every_controlled_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
				is_same_species = root
			}
		}
		change_species = event_target:tec_replicant_species
	}

	every_owned_army = {
		limit = {
			exists = species
			exists = planet
			species = {
				is_same_species = root
			}
			army_type = assault_army
		}
		modify_army = {
			name = random
			species = event_target:tec_replicant_species
		}
	}

	every_owned_army = {
		limit = {
			exists = species
			exists = planet
			species = {
				is_same_species = root
			}
			army_type = defense_army
		}
		modify_army = {
			name = random
			species = event_target:tec_replicant_species
		}
	}

	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		change_species = event_target:tec_replicant_species
		change_leader_portrait = species
	}
	every_pool_leader = {
		limit = {
			is_same_species = root
		}
		change_species = event_target:tec_replicant_species
		change_leader_portrait = species
	}
	change_dominant_species = { species = event_target:tec_replicant_species }

	every_owned_leader = {
		limit = {
			species = {
				is_same_value = event_target:tec_replicant_species
			}
			NOR = {
				has_trait = leader_trait_admiral_tec_replicant
				has_trait = leader_trait_general_tec_replicant
				has_trait = leader_trait_governor_tec_replicant
				has_trait = leader_trait_scientist_tec_replicant
				has_trait = leader_trait_ruler_tec_replicant
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_admiral_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_general_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_governor_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_scientist_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_ruler_cyborg
		}
	}
	every_pool_leader = {
		limit = {
			species = {
				is_same_value = event_target:tec_replicant_species
			}
			NOR = {
				has_trait = leader_trait_admiral_tec_replicant
				has_trait = leader_trait_general_tec_replicant
				has_trait = leader_trait_governor_tec_replicant
				has_trait = leader_trait_scientist_tec_replicant
				has_trait = leader_trait_ruler_tec_replicant
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = leader_trait_admiral_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_admiral_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = general }
			add_trait = leader_trait_general_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_general_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = governor }
			add_trait = leader_trait_governor_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_governor_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_scientist_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_scientist_cyborg
			remove_ruler_trait = leader_trait_ruler_cyborg
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_tec_replicant
			add_ruler_trait = leader_trait_ruler_tec_replicant
			remove_trait = leader_trait_ruler_cyborg
		}
	}
}

tec_create_psionic_body_species = {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_body
		}
		if = {
			limit = {
				has_trait = trait_adaptive
			}
			modify_species = {
				species = this
				remove_trait = trait_adaptive
			}
		}
		if = {
			limit = {
				has_trait = trait_adaptive_lithoid
			}
			modify_species = {
				species = this
				remove_trait = trait_adaptive_lithoid
			}
		}
		if = {
			limit = {
				has_trait = trait_extremely_adaptive
			}
			modify_species = {
				species = this
				remove_trait = trait_extremely_adaptive
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

tec_create_psionic_mind_species = {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_mind
		}
		if = {
			limit = {
				has_trait = trait_tec_dumb
			}
			modify_species = {
				species = this
				remove_trait = trait_tec_dumb
			}
		}
		if = {
			limit = {
				has_trait = trait_intelligent
			}
			modify_species = {
				species = this
				remove_trait = trait_intelligent
			}
		}
			#if = {
			#	limit = {
			#		has_trait = trait_erudite
			#	}
			#	modify_species = {
			#		species = this
			#		remove_trait = trait_erudite
			#	}
			#}
		if = {
			limit = {
				has_trait = @trait_tec_gene_brain
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_gene_brain
			}
		}
		if = {
			limit = {
				has_trait = @trait_tec_replicant_brain
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_replicant_brain
			}
		}
		if = {
			limit = {
				has_trait = @trait_tec_cyborg_brain
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_cyborg_brain
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

tec_create_psionic_energy_species= {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_energy
		}
		if = {
			limit = {
				has_trait = @trait_tec_cyborg_specialist
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_cyborg_specialist
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

tec_create_psionic_unity_species= {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_unity
		}
		if = {
			limit = {
				has_trait = trait_quarrelsome
			}
			modify_species = {
				species = this
				remove_trait = trait_quarrelsome
			}
		}
		if = {
			limit = {
				has_trait = trait_traditional
			}
			modify_species = {
				species = this
				remove_trait = trait_traditional
			}
		}
		if = {
			limit = {
				has_trait = @trait_tec_cyborg_intralink
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_cyborg_intralink
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

tec_create_psionic_telekinesis_species= {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_telekinesis
		}
		if = {
			limit = {
				has_trait = @trait_tec_cyborg_worker
			}
			modify_species = {
				species = this
				remove_trait = @trait_tec_cyborg_worker
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

tec_create_psionic_teleport_species= {
	every_owned_pop = {
		limit = {
			is_same_species = root
			tec_is_any_psionic_species = yes
		}
		species = {
			save_event_target_as = psionic_species
		}
		modify_species = {
			species = this
			add_trait = @trait_tec_psionic_teleport
		}
		if = {
			limit = {
				has_trait = trait_sedentary
			}
			modify_species = {
				species = this
				remove_trait = trait_sedentary
			}
		}
		if = {
			limit = {
				has_trait = trait_nomadic
			}
			modify_species = {
				species = this
				remove_trait = trait_nomadic
			}
		}
	}
	change_dominant_species = { species = event_target:psionic_species change_all = yes }
	every_owned_leader = {
		limit = {
			is_same_species = root
		}
		add_leader_traits_after_modification = yes
	}
}

# Synthetic dermis and nanite form fun
tec_machine_organic_camouflage = {
	optimize_memory
	if = {
		limit = {
			root = {
				species_portrait = sd_hum_robot
			}
		}
		if = {
			limit = {
				NOT = {
					root = {
							is_human_species = yes
						}
					}
				}
			modify_species = {
				portrait = human
			}
		}
		else = {
			modify_species = {
				portrait = human
			}
		}
	}

	if = {
		limit = {
			root = {
				species_portrait = sd_mam_robot
			}
		}
		if = {
			limit = {
				NOT = {
					root = {
						species_portrait = mam1
						}
					}
				}
			modify_species = {
				portrait = mam1
			}
		}
		else = {
			modify_species = {
				portrait = mam1
			}
		}
	}

	if = {
		limit = {
			root = {
				species_portrait = sd_rep_robot
			}
		}
		if = {
			limit = {
				NOT = {
					root = {
						species_portrait = rep1
						}
					}
				}
			modify_species = {
				portrait = rep1
			}
		}
		else = {
			modify_species = {
				portrait = rep1
			}
		}
	}

	else = {
		modify_species = {
			portrait = nec1
		}
	}
	
}

# -	SPECIAL TRAIT MECHANICS - 
tec_pure_brain_leader_effect = {
	optimize_memory
	# 200	475		825		1250	1750	2325	2975	3700	4500
	if = {
		limit = {
			from = {
				has_level = 2
			}
		}
		add_experience = 200
	}
	else_if = {
		limit = {
			from = {
				has_level = 3
			}
		}
		add_experience = 475
	}
	else_if = {
		limit = {
			from = {
				has_level = 4
			}
		}
		add_experience = 825
	}
	else_if = {
		limit = {
			from = {
				has_level = 5
			}
		}
		add_experience = 1250
	}
	else_if = {
		limit = {
			from = {
				has_level = 6
			}
		}
		add_experience = 1750
	}
	else_if = {
		limit = {
			from = {
				has_level = 7
			}
		}
		add_experience = 2325
	}
	else_if = {
		limit = {
			from = {
				has_level = 8
			}
		}
		add_experience = 2975
	}
	else_if = {
		limit = {
			from = {
				has_level = 9
			}
		}
		add_experience = 3700
	}
	else_if = {
		limit = {
			from = {
				has_level = 10
			}
		}
		add_experience = 4500
	}

}

# - Create cybernetic species variant
tec_remove_all_ethics = {
	optimize_memory
	if = {
		limit = {
			has_ethic = ethic_materialist
		}
		country_remove_ethic = ethic_materialist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_materialist
		}
		country_remove_ethic = ethic_fanatic_materialist
	}
	if = {
		limit = {
			has_ethic = ethic_spiritualist
		}
		country_remove_ethic = ethic_spiritualist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_spiritualist
		}
		country_remove_ethic = ethic_fanatic_spiritualist
	}

	if = {
		limit = {
			has_ethic = ethic_xenophile
		}
		country_remove_ethic = ethic_xenophile
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_xenophile
		}
		country_remove_ethic = ethic_fanatic_xenophile
	}
	if = {
		limit = {
			has_ethic = ethic_xenophobe
		}
		country_remove_ethic = ethic_xenophobe
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_xenophobe
		}
		country_remove_ethic = ethic_fanatic_xenophobe
	}

	if = {
		limit = {
			has_ethic = ethic_militarist
		}
		country_remove_ethic = ethic_militarist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_militarist
		}
		country_remove_ethic = ethic_fanatic_militarist
	}
	if = {
		limit = {
			has_ethic = ethic_pacifist
		}
		country_remove_ethic = ethic_pacifist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_pacifist
		}
		country_remove_ethic = ethic_fanatic_pacifist
	}

	if = {
		limit = {
			has_ethic = ethic_egalitarian
		}
		country_remove_ethic = ethic_egalitarian
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_egalitarian
		}
		country_remove_ethic = ethic_fanatic_egalitarian
	}
	if = {
		limit = {
			has_ethic = ethic_authoritarian
		}
		country_remove_ethic = ethic_authoritarian
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_authoritarian
		}
		country_remove_ethic = ethic_fanatic_authoritarian
	}

	if = {
		limit = {
			has_ethic = ethic_green
		}
		country_remove_ethic = ethic_green
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_green
		}
		country_remove_ethic = ethic_fanatic_green
	}
	if = {
		limit = {
			has_ethic = ethic_industrial
		}
		country_remove_ethic = ethic_industrial
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_industrial
		}
		country_remove_ethic = ethic_fanatic_industrial
	}

	if = {
		limit = {
			has_ethic = ethic_capitalism
		}
		country_remove_ethic = ethic_capitalism
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_capitalism
		}
		country_remove_ethic = ethic_fanatic_capitalism
	}
	if = {
		limit = {
			has_ethic = ethic_socialism
		}
		country_remove_ethic = ethic_socialism
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_socialism
		}
		country_remove_ethic = ethic_fanatic_socialism
	}

	if = {
		limit = {
			has_ethic = ethic_pluralist
		}
		country_remove_ethic = ethic_pluralist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_pluralist
		}
		country_remove_ethic = ethic_fanatic_pluralist
	}
	if = {
		limit = {
			has_ethic = ethic_elitist
		}
		country_remove_ethic = ethic_elitist
	}
	if = {
		limit = {
			has_ethic = ethic_fanatic_elitist
		}
		country_remove_ethic = ethic_fanatic_elitist
	}

	if = {
		limit = {
			has_ethic = ethic_gestalt_consciousness
		}
		country_remove_ethic = ethic_gestalt_consciousness
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_apathy
		}
		country_remove_ethic = ethic_gestalt_apathy
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_empathy
		}
		country_remove_ethic = ethic_gestalt_empathy
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_preservation
		}
		country_remove_ethic = ethic_gestalt_preservation
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_disregard
		}
		country_remove_ethic = ethic_gestalt_disregard
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_introspective
		}
		country_remove_ethic = ethic_gestalt_introspective
	}
	if = {
		limit = {
			has_ethic = ethic_gestalt_extrospective
		}
		country_remove_ethic = ethic_gestalt_extrospective
	}
}

# Ecumenopolis entity handler
tec_ecu_planet_entity = {
	optimize_memory
	set_planet_entity = {
		entity = "city_planet_entity"
		graphical_culture = owner
	}
	IF = {
		limit = { has_global_flag = planetarydiversity }
		IF = {
			limit = {
				owner = {
					has_trait = @trait_pc_aquatic_preference 
				}
			}
			set_planet_entity = {
				entity = "aquaticcity_planet_01_entity"
				picture = "pc_aquaticcity"
			}
		}
		IF = {
			limit = {
				owner = {
					has_trait = @trait_pc_ammonia_preference 
				}
			}
			IF = {
				limit = {
					NOT = {
						has_modifier = @pdammoniaatmosphere 
					}
				}
				add_modifier = { modifier = @pdammoniaatmosphere 
				}
			}
			remove_modifier = @ammonia
			set_planet_entity = {
				picture = pc_ammoniacity
				entity = ammonia_arc_planet_01_entity
			}
		}
		IF = {
			limit = {
				owner = {
					has_trait = @trait_pc_sulfur_preference 
				}
			}
			IF = {
				limit = {
					NOT = {
						has_modifier = @pdsulfuratmosphere
					}
				}
				add_modifier = {
					modifier = @pdsulfuratmosphere	
				}
			}
			remove_modifier = @pdsulfur
			set_planet_entity = {
				picture = pc_sulfurcity
				entity = sulfur_arc_planet_01_entity
			}
		}
		IF = {
			limit = {
				owner = {
					has_trait = @trait_pc_methane_preference
				}
			}
			IF = {
				limit = {
					NOT = {
						has_modifier = @pdmethaneatmosphere
					}
				}
				add_modifier = {
					modifier = @pdmethaneatmosphere 
				}
			}
			remove_modifier = @methane
			set_planet_entity = {
				picture = pc_methanecity
				entity = methane_arc_planet_01_entity
			}
		}
		IF = {
			limit = {
				owner = {
					has_trait = @trait_pc_ash_preference 
				}
			}
			IF = {
				limit = {
					NOT = {
						has_modifier = @pdashatmosphere
					}
				}
				add_modifier = {
					modifier = @pdashatmosphere
				}
			}
			remove_modifier = @ash
			set_planet_entity = {
				picture = pc_ashcity
				entity = ash_arc_planet_01_entity
			}
		}
	}
}

tec_ecu_ecological_resolution = {
	optimize_memory
	# Faction flags
	owner = {
		set_timed_country_flag = {
			flag = tec_recently_created_ecumenopolis
			years = 10
		}
		change_variable = {
			which = tec_created_ecus
			value = 1
		}
	}
	# Galcom Resolution
	if = {
		limit = {
			OR = {
				is_active_resolution = "resolution_ecology_environmental_control_board"
				is_active_resolution = "resolution_ecology_paradise_initiative"
			}
		}
		owner = {
			set_timed_country_flag = { flag = resolution_breached_terraformed days = 3600 }
		}
	}
}

tec_ecu_deposits_handler_before = {
	optimize_memory
	# PSIONIC DEPOSITS
		if = {
			limit = {
				has_deposit = d_tec_psionic_ascension_zone_1
			}
			while = {
				limit = {
					has_deposit = d_tec_psionic_ascension_zone_1
				}
				remove_deposit = d_tec_psionic_ascension_zone_1
				change_variable = {
					which = tec_temporal_psionic_d
					value = 1
				}
			}
		}
	# /
}

tec_ecu_deposits_handler_after = {
	optimize_memory
	# PSIONIC DEPOSITS
		if = {
			limit = {
				check_variable = {
					which = tec_temporal_psionic_d
					value > 0
				}
			}
			while = {
				limit = {
					check_variable = {
						which = tec_temporal_psionic_d
						value > 0
					}
				}
				add_deposit = d_tec_psionic_ascension_zone_1
				change_variable = {
					which = tec_temporal_psionic_d
					value = -1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = tec_temporal_psionic_d
						value = 0
					}
				}
				clear_variable = tec_temporal_psionic_d
			}
		}
	# /
}

# Habitat ecu handler
tec_set_ecu_hab_focus_flags_effect = {
	optimize_memory
	if = {
		limit = {
			has_designation = col_habitat_factory
		}
		set_planet_flag = factory_planet
	}
	else_if = {
		limit = {
			has_designation = col_habitat_foundry
		}
		set_planet_flag = foundry_planet
	}
}

tec_set_ecu_hab_conversion_effect = {
	optimize_memory
	export_trigger_value_to_variable = {
		trigger = num_districts
		parameters = {
			type = $DISTRICT$
		}
		variable = $VARIABLE$
	}
	divide_variable = { which = $VARIABLE$ value = 2 }
	floor_variable = $VARIABLE$
	while = {
		count = $VARIABLE$
		remove_district = $DISTRICT$
	}
	clear_variable = $VARIABLE$
}

tec_set_ecu_hab_industrial_districts_effect = {
	optimize_memory
	if = {
		limit = {
			has_planet_flag = factory_planet
		}
		remove_planet_flag = factory_planet
		swap_districts_effect = {
			DISTRICT1 = district_tec_hab_arcology_industry
			DISTRICT2 = district_tec_hab_arcology_foundry
		}
	}
	else_if = {
		limit = {
			has_planet_flag = foundry_planet
		}
		remove_planet_flag = foundry_planet
	}
	else = {
		split_districts_effect = {
			DISTRICT1 = district_tec_hab_arcology_foundry
			DISTRICT2 = district_tec_hab_arcology_industry
		}
	}
}

# -----------------------------------------------------
# test
tec_recalc_energy_country_modifiers = {
	optimize_memory
	export_modifier_to_variable = {	# Technician job mult
		modifier = planet_technician_produces_mult
		variable = tec_country_technician_produces_mult
	}
	export_modifier_to_variable = { # Global job production
		modifier = planet_technician_energy_produces_mult
		variable = tec_country_technician_energy_produces_mult
	}
	change_variable = {	# Base value of 100%
		which = tec_country_technician_produces_mult
		value = 1
	}
	# Merges both values
	change_variable = {
		which = tec_country_technician_produces_mult
		value = tec_country_jobs_produces_mult
	}
	change_variable = {	# This results in 1.X, the multiply of the planet value
		which = tec_country_technician_produces_mult
		value = tec_country_technician_energy_produces_mult
	}
}

tec_recalc_minerals_country_modifiers = {
	optimize_memory
	export_modifier_to_variable = { # Miner job output
		modifier = planet_miners_produces_mult
		variable = tec_country_miners_produces_mult
	}
	export_modifier_to_variable = { # Global job production
		modifier = planet_miners_minerals_produces_mult
		variable = tec_country_miners_minerals_produces_mult
	}
	change_variable = {	# Base value of 100%
		which = tec_country_miners_minerals_produces_mult
		value = 1
	}
	# Merges both values
	change_variable = {
		which = tec_country_miners_minerals_produces_mult
		value = tec_country_jobs_produces_mult
	}
	change_variable = {	# This results in 1.X, the multiply of the planet value
		which = tec_country_miners_produces_mult
		value = tec_country_miners_minerals_produces_mult
	}
}

tec_recalc_food_country_modifiers = {
	optimize_memory
	export_modifier_to_variable = { # Farmers output
		modifier = planet_farmers_produces_mult
		variable = tec_country_farmers_produces_mult
	}
	export_modifier_to_variable = { # Global job production
		modifier = planet_farmers_food_produces_mult
		variable = tec_country_farmers_food_produces_mult
	}
	change_variable = {	# Base value of 100%
		which = tec_country_farmers_food_produces_mult
		value = 1
	}
	# Merges both values
	change_variable = {
		which = tec_country_farmers_food_produces_mult
		value = tec_country_jobs_produces_mult
	}
	change_variable = {	# This results in 1.X, the multiply of the planet value
		which = tec_country_farmers_produces_mult
		value = tec_country_farmers_food_produces_mult
	}
}

# tec_p_t_p_m = tec_planet_technician_produces_mult
# tec_p_t_e_p_m = tec_planet_technician_energy_produces_mult
# tec_p_t_p_m = tec_planet_technician_produces_mult
# tec_p_t_p_a = = tec_planet_technician_energy_produces_add
tec_recalc_energy_planet_modifiers = {
	optimize_memory
	export_modifier_to_variable = {	# Technician job mult
		modifier = planet_technician_produces_mult
		variable = tec_p_t_p_m
	}
	export_modifier_to_variable = {	# Technician job energy add
		modifier = planet_technician_energy_produces_add
		variable = tec_p_t_e_p_a
	}
	export_modifier_to_variable = { # Technician job energy mult
		modifier = planet_technician_energy_produces_mult
		variable = tec_p_t_e_p_m
	}
	# machine empires little trick
	if = {
		limit = {
			owner = {
				is_robot_empire = yes
			}
		}
		change_variable = {
			which = tec_p_t_e_p_a
			value = 2
		}
	}
	if = {	# If the add is 0. the district never produces anything
		limit = {
			check_variable = {
				which = tec_p_t_e_p_a
				value = 0
			}
		}
		change_variable = {
			which = tec_p_t_e_p_a
			value = 1
		}
	}
	multiply_variable = {	# add converted to percent, because vars multiplied are bugged on resource
		which = tec_p_t_e_p_a
		value = 0.15
	} # 6 energy as base, so 0.15
	change_variable = {	# Base value of 100%
		which = tec_p_t_p_m
		value = 1
	}
	# Merge values
	change_variable = {	# produces mult and output mult
		which = tec_p_t_p_m
		value = tec_planet_jobs_produces_mult
	}
	change_variable = {	# sums multiplicatives
		which = tec_p_t_p_m
		value = tec_p_t_e_p_m
	}
	if = {
		limit = {
			check_variable = {
				which = tec_p_t_e_p_a
				value > 1
			}
		}
		multiply_variable = {	# This results in 1.X, the multiply of the planet value
			which = tec_p_t_p_m
			value = tec_p_t_e_p_a
		}
	}
	# cleanup
	clear_variable = tec_p_t_e_p_a
	clear_variable = tec_p_t_e_p_m
}

tec_recalc_minerals_planet_modifiers = {
	optimize_memory
	export_modifier_to_variable = {	# Technician job mult
		modifier = planet_miners_produces_mult
		variable = tec_p_m_p_m
	}
	export_modifier_to_variable = {	# Miner job minerals add
		modifier = planet_miners_minerals_produces_add
		variable = tec_p_m_m_p_a
	}
	export_modifier_to_variable = { # Miner job minerals mult
		modifier = planet_miners_minerals_produces_mult
		variable = tec_p_m_m_p_m
	}
	if = {	# If the add is 0. the district never produces anything
		limit = {
			check_variable = {
				which = tec_p_m_m_p_a
				value = 0
			}
		}
		change_variable = {
			which = tec_p_m_m_p_a
			value = 1
		}
	}
	multiply_variable = {	# add converted to percent, because vars multiplied are bugged on resource
		which = tec_p_m_m_p_a
		value = 0.25
	} # 4 minerals as base, so 0.25
	change_variable = {	# Base value of 100%
		which = tec_p_m_p_m
		value = 1
	}
	# Merge values
	change_variable = {	# produces mult and output mult
		which = tec_p_m_p_m
		value = tec_planet_jobs_produces_mult
	}
	change_variable = {	# sums multiplicatives
		which = tec_p_m_p_m
		value = tec_p_m_m_p_m
	}
	if = {
		limit = {
			check_variable = {
				which = tec_p_m_m_p_a
				value > 1
			}
		}
		multiply_variable = {	# This results in 1.X, the multiply of the planet value
			which = tec_p_m_p_m
			value = tec_p_m_m_p_a
		}
	}
	# cleanup
	clear_variable = tec_p_m_m_p_a
	clear_variable = tec_p_m_m_p_m
}

tec_recalc_food_planet_modifiers = {
	optimize_memory
	export_modifier_to_variable = {	# Farmer job mult
		modifier = planet_farmers_produces_mult
		variable = tec_p_f_p_m
	}
	export_modifier_to_variable = {	# Farmer job energy add
		modifier = planet_farmers_food_produces_add
		variable = tec_p_f_f_p_a
	}
	export_modifier_to_variable = { # Farmer job energy mult
		modifier = planet_farmers_food_produces_mult
		variable = tec_p_f_f_p_m
	}
	if = {	# If the add is 0. the district never produces anything
		limit = {
			check_variable = {
				which = tec_p_f_f_p_a
				value = 0
			}
		}
		change_variable = {
			which = tec_p_f_f_p_a
			value = 1
		}
	}
	# robot empires are less efficient
	if = {
		limit = {
			owner = {
				is_robot_empire = yes
			}
		}
		multiply_variable = {
			which = tec_p_f_f_p_a
			value = 0.66
		} # food base of 6, robots produce 4
	}
	multiply_variable = {	# add converted to percent, because vars multiplied are bugged on resource
		which = tec_p_f_f_p_a
		value = 0.15
	} # 6 food as base, so 0.15
	change_variable = {	# Base value of 100%
		which = tec_p_f_p_m
		value = 1
	}
	# Merge values
	change_variable = {	# produces mult and output mult
		which = tec_p_f_p_m
		value = tec_planet_jobs_produces_mult
	}
	change_variable = {	# sums multiplicatives
		which = tec_p_f_p_m
		value = tec_p_f_f_p_m
	}
	if = {
		limit = {
			check_variable = {
				which = tec_p_f_f_p_a
				value > 1
			}
		}
		multiply_variable = {	# This results in 1.X, the multiply of the planet value
			which = tec_p_f_p_m
			value = tec_p_f_f_p_a
		}
	}
	# cleanup
	clear_variable = tec_p_f_f_p_a
	clear_variable = tec_p_f_f_p_m
}

# effect tec_test_planet
tec_test_planet = {
	optimize_memory
	change_pc = pc_gaia
	set_planet_size = 25
	reroll_planet = yes
	add_modifier = {
		modifier = modifier_tec_debug_building
		days = -1
	}
	create_colony = {
		owner = From
	}
	while = {
		count = 20
		add_district_and_planet_size_if_needed_effect = {
			district = district_city
		}
	}
	while = {
		count = 8
		add_building = building_commercial_megaplex
	}
	remove_building = building_colony_shelter
	add_building = building_galactic_capital
}

tec_test_ascension_techs = {
	optimize_memory
	give_technology = {
		tech = tech_gene_tailoring
		message = no
	}

	give_technology = {
		tech = tech_robotic_workers
		message = no
	}
	give_technology = {
		tech = tech_droid_workers
		message = no
	}
	give_technology = {
		tech = tech_synthetic_workers
		message = no
	}
	give_technology = {
		tech = tech_synthetic_leaders
		message = no
	}

	give_technology = {
		tech = tech_psionic_theory
		message = no
	}

}

tec_test_mega_techs = {
	optimize_memory
	give_technology = {
		tech = tech_housing_1
		message = no
	}
	give_technology = {
		tech = tech_housing_2
		message = no
	}

	give_technology = {
		tech = tech_mega_engineering
		message = no
	}

	give_technology = {
		tech = tech_ring_world
		message = no
	}
	give_technology = {
		tech = tech_dyson_sphere
		message = no
	}
	give_technology = {
		tech = tech_matter_decompressor
		message = no
	}

}

tec_test_robot_tech = {
	optimize_memory
	give_technology = {
		tech = tech_robomodding
	}
}

tec_test_betharian = {	# ON PLANET!!!
	optimize_memory
	add_deposit = d_dust_desert
	add_deposit = d_dust_desert
	add_deposit = d_crystalline_caverns
	add_deposit = d_crystalline_caverns
	add_deposit = d_crystalline_caverns
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_bubbling_swamp
	add_deposit = d_betharian_deposit
	owner = {
		give_technology = {
			tech = tech_mine_betharian
		}
	}
}

tec_test_relations = {
	optimize_memory
	set_global_flag = tec_debug_opinion
	every_playable_country = {
		establish_communications_no_message = root
		add_opinion_modifier = {
			who = root
			modifier = opinion_tec_debug
		}
	}
}

tec_test_assimilations = {
	optimize_memory
	set_global_flag = tec_test_assimilations
	set_country_flag = tec_test_assimilations
}

tec_test_assimilations_off = {
	optimize_memory
	remove_global_flag = tec_test_assimilations
	remove_country_flag = tec_test_assimilations
}

tec_test_catalytic_artisan = {
	optimize_memory
	if = {
		limit = {
			NOT = {
				has_valid_civic = civic_catalytic_processing
			}
		}
		force_add_civic = civic_catalytic_processing
	}
	if = {
		limit = {
			NOT = {
				has_valid_civic = civic_crafters	
			}
		}
		force_add_civic = civic_crafters
	}
}

tec_yeet_catalytic_artisan = {
	optimize_memory
	if = {
		limit = {
			has_valid_civic = civic_catalytic_processing
		}
		force_remove_civic = civic_catalytic_processing
	}
	if = {
		limit = {
			has_valid_civic = civic_crafters
		}
		force_remove_civic = civic_crafters
	}
}

tec_spawn_cyborgs = {
	break = yes
}

tec_debug_count_buildings = {
	optimize_memory
	# USE ON COUNTRY
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_1
		}
		variable = tec_ai_power_add_1
	}
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_2
		}
		variable = tec_ai_power_add_2
	}
	export_trigger_value_to_variable = {
		trigger = num_buildings
		parameters = {
			type = building_research_lab_3
		}
		variable = tec_ai_power_add_4
	}
	


	#tec_ai_power = {
	#	base = 0
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_1 
	#		}
	#		mode = add
	#	}
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_2 
	#		}
	#		mode = add
	#		mult = 2
	#	}
	#	complex_trigger_modifier = {
	#		trigger = num_buildings
	#		parameters = {
	#			type = building_tec_aiauth_3 
	#		}
	#		mode = add
	#		mult = 4
	#	}
	#}
}


# D E B U G 

tec_fix_any_bugged_species = {

	owner_main_species = {
		save_event_target_as = changing_species

		create_species = {
			is_mod = yes
			name = this
			name_list = this
			plural = this
			class = MAM
			portrait = this
			can_be_modified = this
			gender = this
			homeworld = capital_scope
			traits = this
	
			effect = {
				save_event_target_as = last_created_species
			}
		}

		owner = {
			every_owned_pop = {
				limit = { is_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_leader = {
				limit = { is_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_pool_leader = {
				limit = { is_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_envoy = {
				limit = { is_same_species = event_target:changing_species }
				change_species = last_created_species
			}
			every_owned_army = {
				limit = {
					exists = species
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
			every_controlled_ship = {
				limit = {
					is_ship_class = shipclass_colonizer
					is_same_species = event_target:changing_species
				}
				change_species = last_created_species
			}
		}
	}
}