# common\megastructures\zzz_overwrite_habitats.txt

# With extra zs because gigas overwrite zz_habitats and zz_evolved is loaded first
# Slow and steady wins the race!
 # rod : begun the z wars have

# NOTE: Vars on its own file

habitat_central_complex = {
	entity = "habitat_phase_03_entity"
	construction_entity = "habitat_phase_03_entity"
	portrait = "GFX_megastructure_habitat_background"

	show_galactic_map_icon = no
	hide_name = yes
	show_in_outliner = no

	place_entity_on_planet_plane = no
	entity_offset = { x = 7 y = -7 }
	build_time = @tec_central_orbital_build_time

	construction_blocks_and_blocked_by = self_type
	custom_tooltip_requirements = "MEGASTRUCTURE_TOOLTIP_REQUIREMENTS_HABITAT_CENTRAL_COMPLEX"
	build_system_tooltip = habitat_tooltip

	resources = {
		category = megastructures_habitat
		cost = {
			alloys = @tec_central_orbital_alloy_cost
			influence = @tec_central_orbital_influence_cost
		}
	}

	potential = {
		# GIGAS COMP
			if = {
				limit = {
					has_global_flag = giga_game_started
				}
				giga_are_habitats_available = yes
			}
		# /
		else = {
			OR = {
				has_technology = tech_habitat_1
				has_civic = civic_diadochi
				has_civic = civic_great_khans_legacy
				has_country_flag = democratic_khanate_flag
			}
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_not_habitat_central_complex"
			NOT = {
				OR = {
					any_system_planet = {
						OR = {
							has_planet_flag = habitat
							has_planet_flag = hold_the_line_habitat
						}
					}
					has_megastructure = habitat_central_complex_ruined
				}
			}
		}
		custom_tooltip = {
			fail_text = "requires_no_orbital_debris"
			NOT = {
				any_system_planet = {
					has_planet_flag = has_orbital_debris
				}
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				OR = {
					# gigas comp # Caelum - need review
						if = {
							limit = {
								has_global_flag = giga_game_started
							}
							planet_has_no_megastructure = yes
						}
					# /
					else = {
						NOR = {
							has_planet_flag = megastructure
							#has_planet_flag = has_megastructure
							solar_system = {
								OR = {
									has_star_flag = ring_world_built
									has_star_flag = ithomes_gate
								}
							}
							is_planet_class = pc_ringworld_habitable
							is_planet_class = pc_ringworld_habitable_damaged
							is_planet_class = pc_ringworld_tech
							is_planet_class = pc_ringworld_tech_damaged
							is_planet_class = pc_ringworld_seam
							is_planet_class = pc_ringworld_seam_damaged
							is_planet_class = pc_habitat
							is_planet_class = pc_cosmogenesis_world
						}
					}
				}
			}

			# balance for habitats
			custom_tooltip = {
				fail_text = "requires_not_minor_planetary_body"
				NOR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}
			custom_tooltip = {
				fail_text = "requires_not_solarpunk"
				NOT = {
					solar_system = {
						has_star_flag = solarpunk_system_02
					}
				}
			}
			#if = {	# Some ai tweaks # Caelum - need review
				#limit = {
				#	from = {
				#		is_ai = yes
				#	}
				#}
				#from = {
				#	NOT = {
				#		has_country_flag = tec_ai_stop_spamming_habitats_please
				#	}
				#}
				#colonizable_planet = no
				#is_colony = no
				#NOR = {
				#	has_modifier = terraforming_candidate
				#	has_modifier = toxic_terraforming_candidate
				#	has_modifier = frozen_terraforming_candidate
				#}
				#OR = {
				#	has_deposit_for = shipclass_mining_station
				#	has_deposit_for = shipclass_research_station
				#}
			#}

			# Gigas comp # Caelum - need review
				#if = { 
				#	limit = {
				#		has_global_flag = giga_game_started
				#	}
				#	custom_tooltip = { fail_text = "requires_more_pops"
				#		OR = {
				#			has_global_flag = giga_habitats_system_3
				#			has_global_flag = giga_habitats_system_10
				#			has_global_flag = giga_habitats_system_25
				#			has_global_flag = giga_habitats_unlimited
				#			AND = {
				#				OR = {
				#					has_global_flag = giga_habitats_pop_25
				#					has_global_flag = giga_habitats_pop_50
				#					has_global_flag = giga_habitats_pop_100
				#				}
				#				from = { check_variable = { which = habitat_count value < allowed_habitats } }
				#			}
				#		}
				#	}
				#	custom_tooltip = { fail_text = "requires_more_systems"
				#		OR = {
				#			has_global_flag = giga_habitats_pop_25
				#			has_global_flag = giga_habitats_pop_50
				#			has_global_flag = giga_habitats_pop_100
				#			has_global_flag = giga_habitats_unlimited
				#			AND = {
				#				OR = {
				#					has_global_flag = giga_habitats_system_3
				#					has_global_flag = giga_habitats_system_10
				#					has_global_flag = giga_habitats_system_25
				#				}
				#				from = { check_variable = { which = habitat_count value < allowed_habitats } }
				#			}
				#		}
				#	}
				#}
			# /

		} # use these for all non-star megastructures
	}

	# root = system
	# from = country
	ai_weight = {
		factor = 5

		modifier = {
			# AI shouldn't build habitats if they have any uncolonised habitats.
			factor = 0
			owner = {
				any_planet_within_border = {
					tec_is_habitat = yes
					is_colony = no
				}
			}
		}

		modifier = {
			# AI shouldn't build habitats if they don't have starports in the system
			# unless they have either the Void Dwellers origin or Voidborn AP.
			factor = 0
			owner = {
				is_void_dweller_empire = no
			}
			starbase = { NOT = { has_starbase_size >= starbase_starport } }
		}

		modifier = {
			factor = 5
			exists = sector
			sector = { has_sector_type = core_sector }
		}

		modifier = {
			factor = 100
			OR = {
				has_star_flag = ideal_habitat_t1
				has_star_flag = ideal_habitat_t2
			}
		}

		modifier = {
			factor = value:num_orbital_sites
		}
	}

	on_build_start = { # Caelum - need review
		#from = {
		#	create_variable_if_not_exists = {
		#		VARIABLE = tec_ai_habitats_in_queue
		#		VALUE_IF_CREATED = 0
		#	}
		#	change_variable = {
		#		which = tec_ai_habitats_in_queue
		#		value = 1
		#	}
		#}
	}
	on_build_cancel = { # Caelum - need review
		#from = {
		#	change_variable = {
		#		which = tec_ai_habitats_in_queue
		#		value = -1
		#	}
		#}
	}

	on_build_complete = {
		fromfrom.planet = {
			save_event_target_as = target_planet
		}
		if = {
			limit = {
				fromfrom.planet = {
					is_star = yes
				}
			}
			spawn_habitat_effect = {
				DISTANCE = 19.798
			}
		}
		else = {
			spawn_habitat_effect = {
				DISTANCE = 9.899
			}
		}
		fromfrom.solar_system = {
			set_star_flag = has_habitat
		}
		if = {
			limit = {
				event_target:target_planet = {
					OR = {
						has_deposit_for = shipclass_research_station
						has_deposit_for = shipclass_mining_station
					}
				}
			}
			on_orbital_complete_effect = {
				BODY = major
				TYPE = resource
			}
			# EVOLVED To avoid overwriting the effect
				event_target:target_planet = {
					remove_planet_flag = has_megastructure
				}
			# /
		}

		else = {
			on_orbital_complete_effect = {
				BODY = major
				TYPE = generic
			}
			# EVOLVED To avoid overwriting the effect
				event_target:target_planet = {
					remove_planet_flag = has_megastructure
				}
			# /
		}
		# Food thingies
		if = {
			limit = {
				event_target:target_planet = {
					OR = {
						tec_has_orbital_food_deposit = yes
						is_planet_class = pc_gas_giant
						is_planet_class = pc_frozen
						is_planet_class = pc_ice_asteroid
					}
				}
			}
			random_system_planet = {
				limit = {
					uses_district_set = habitat
					NOT = {
						has_planet_flag = tec_food_habitat
					}
				}
				set_planet_flag = tec_food_habitat
			}
		}
		# This is necessary to avoid error log spam of missing set variable
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_built
					}
				}
				set_variable = {
					which = tec_subhabitats_built
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_extraction
					}
				}
				set_variable = {
					which = tec_subhabitats_extraction
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_energy
					}
				}
				set_variable = {
					which = tec_subhabitats_energy
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_minerals
					}
				}
				set_variable = {
					which = tec_subhabitats_minerals
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_food
					}
				}
				set_variable = {
					which = tec_subhabitats_food
					value = 0
				}
			}
			if = {
				limit = {
					NOT = {
						is_variable_set = tec_subhabitats_science
					}
				}
				set_variable = {
					which = tec_subhabitats_science
					value = 0
				}
			}
		# /
		# ! MUST BE UPDATED AT void_dweller_home_planet_setup
		# /
		remove_megastructure = fromfrom
		from = { country_event = { id = megastructures.10 } }

		# Old effects	# Caelum - need review
			#if = {
			#	limit = {
			#		always = no
			#	}
			#	fromfrom.planet = {
			#		set_planet_flag = has_megastructure
			#		save_event_target_as = habitat_planet
			#		if = {
			#			limit = { has_orbital_station = yes }
			#			orbital_station = {
			#				dismantle = yes
			#			}
			#		}
			#	}
			#	remove_megastructure = fromfrom
			#	from = {
			#		country_event = {
			#			id = utopia.61 
			#		}
			#		# Gigas comp
			#			if = {
			#				limit = {
			#					has_global_flag = giga_game_started
			#				}
			#				change_variable = { which = habitat_count value = 1 }
			#				set_timed_country_flag = { flag = has_recently_built_habitat years = 20 }
			#			}
			#		# /
			#	}
			#}
		# /
	}
}

# -------------- Orbitals --------------

# Major Orbital
major_orbital = {
	entity = "habitat_phase_02_entity"
	construction_entity = "habitat_phase_02_entity"
	portrait = "GFX_megastructure_habitat_background"
	place_entity_on_planet_plane = no
	show_galactic_map_icon = no
	hide_name = yes
	show_in_outliner = no
	entity_offset = { x = -7 y = -7 }
	build_time = @tec_major_orbital_build_time

	resources = {
		category = megastructures_habitat
		cost = {
			alloys = @tec_major_orbital_alloy_cost
		}
	}

	construction_blocks_and_blocked_by = none
	custom_tooltip_requirements = "MEGASTRUCTURE_TOOLTIP_REQUIREMENTS_MAJOR_ORBITAL"

	potential = {
		# GIGAS COMP
			if = {
				limit = {
					has_global_flag = giga_game_started
				}
				giga_are_habitats_available = yes
			}
		# /
		else = {
			OR = {
				has_technology = tech_habitat_1
				has_civic = civic_diadochi
				has_civic = civic_great_khans_legacy
				has_country_flag = democratic_khanate_flag
			}
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_habitat_central_complex"
			any_system_planet = {
				has_planet_flag = habitat
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				NOR = {
					has_planet_flag = megastructure
					# EVOLVED
						has_planet_flag = has_megastructure
						#has_planet_flag = tec_has_orbital
					# /
					# /
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_orbital_debris"
				NOR = {
					has_planet_flag = has_orbital_debris
				}
			}

			# balance for habitats
			custom_tooltip = {
				fail_text = "requires_not_minor_planetary_body"
				NOR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}
			custom_tooltip = {
				fail_text = "requires_not_solarpunk"
				NOT = {
					solar_system = {
						has_star_flag = solarpunk_system_02
					}
				}
			}
		} # use these for all non-star megastructures
	}

	# root = system
	# from = country
	ai_weight = {
		factor = 2

		# AI Void Dwellers shouldn't build orbitals until it has a few habitats
		modifier = {
			factor = 0.5
			from = {
				has_void_dweller_origin = yes
				count_owned_planet = {
					count < 3
					limit = {
						has_planet_flag = habitat
					}
				}
			}
		}

		modifier = {
			factor = 2
			any_system_planet = {
				has_planet_flag = habitat
				free_district_slots < 2
			}
		}

		modifier = {
			factor = 2
			any_system_planet = {
				has_planet_flag = habitat
				free_building_slots < 1
			}
		}
	}

	on_build_complete = {
		fromfrom.planet = {
			save_event_target_as = target_planet
		}
		if = {
			limit = {
				event_target:target_planet = {
					OR = {
						has_deposit_for = shipclass_research_station
						has_deposit_for = shipclass_mining_station
					}

				}
			}
			on_orbital_complete_effect = {
				BODY = major
				TYPE = resource
			}
			## EVOLVED To avoid overwriting the effect
			#	event_target:target_planet = {
			#		remove_planet_flag = has_megastructure
			#		set_planet_flag = tec_has_orbital
			#	}
			## /
		}

		else = {
			on_orbital_complete_effect = {
				BODY = major
				TYPE = generic
			}
			## EVOLVED To avoid overwriting the effect
			#	event_target:target_planet = {
			#		remove_planet_flag = has_megastructure
			#		set_planet_flag = tec_has_orbital
			#	}
			## /
		}
		event_target:target_habitat = {
			add_deposit_if_missing = {
				DEPOSIT = d_system_resources
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_research
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_energy
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_mining
			}
		}
		from = { country_event = { id = megastructures.11 } }
	}
}

# Minor Orbital
minor_orbital = {
	entity = "habitat_phase_01_entity"
	construction_entity = "habitat_phase_01_entity"
	portrait = "GFX_megastructure_habitat_background"
	place_entity_on_planet_plane = no
	show_galactic_map_icon = no
	hide_name = yes
	show_in_outliner = no
	entity_offset = { x = -7 y = -7 }
	build_time = @tec_minor_orbital_build_time

	resources = {
		category = megastructures_habitat
		cost = {
			alloys = @tec_minor_orbital_alloy_cost
		}
	}

	construction_blocks_and_blocked_by = none
	custom_tooltip_requirements = "MEGASTRUCTURE_TOOLTIP_REQUIREMENTS_MINOR_ORBITAL"

	potential = {
		# GIGAS COMP
			if = {
				limit = {
					has_global_flag = giga_game_started
				}
				giga_are_habitats_available = yes
			}
		# /
		else = {
			OR = {
				has_technology = tech_habitat_1
				has_civic = civic_diadochi
				has_civic = civic_great_khans_legacy
				has_country_flag = democratic_khanate_flag
			}
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_habitat_central_complex"
			any_system_planet = {
				has_planet_flag = habitat
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				NOR = {
					has_planet_flag = megastructure
					# EVOLVED
						has_planet_flag = has_megastructure
						#has_planet_flag = tec_has_orbital
					# /
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_orbital_debris"
				NOR = {
					has_planet_flag = has_orbital_debris
				}
			}
			custom_tooltip = {
				fail_text = "requires_is_minor_planetary_body"
				OR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_not_star"
				is_star = no
			}
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}
			custom_tooltip = {
				fail_text = "requires_not_solarpunk"
				NOT = {
					solar_system = {
						has_star_flag = solarpunk_system_02
					}
				}
			}
		} # use these for all non-star megastructures
	}

	# root = system
	# from = country
	ai_weight = {
		factor = 2

		# AI Void Dwellers shouldn't build orbitals until it has a few habitats
		modifier = {
			factor = 0.5
			from = {
				has_void_dweller_origin = yes
				count_owned_planet = {
					count < 3
					limit = {
						has_planet_flag = habitat
					}
				}
			}
		}

		modifier = {
			factor = 2
			any_system_planet = {
				has_planet_flag = habitat
				free_building_slots < 1
			}
		}
	}

	on_build_complete = {
		fromfrom.planet = {
			save_event_target_as = target_planet
		}
		if = {
			limit = {
				event_target:target_planet = {
					OR = {
						has_deposit_for = shipclass_research_station
						has_deposit_for = shipclass_mining_station
					}

				}
			}
			on_orbital_complete_effect = {
				BODY = minor
				TYPE = resource
			}
		}

		else = {
			on_orbital_complete_effect = {
				BODY = minor
				TYPE = generic
			}
			## EVOLVED To avoid overwriting the effect
			#	event_target:target_planet = {
			#		remove_planet_flag = has_megastructure
			#		set_planet_flag = tec_has_orbital
			#	}
			## /
		}
		event_target:target_habitat = {
			add_deposit_if_missing = {
				DEPOSIT = d_system_resources
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_research
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_energy
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_mining
			}
		}
		from = { country_event = { id = megastructures.11 } }
	}
}

# Knights of the Toxic God
major_orbital_knights = {
	entity = "habitat_phase_02_entity"
	construction_entity = "habitat_phase_02_entity"
	portrait = "GFX_megastructure_habitat_background"
	place_entity_on_planet_plane = no
	show_galactic_map_icon = no
	hide_name = yes
	show_in_outliner = no
	entity_offset = { x = -7 y = -7 }
	build_time = @tec_major_orbital_build_time

	resources = {
		category = megastructures_habitat
		cost = {
			alloys = @tec_major_orbital_alloy_cost
		}
	}

	construction_blocks_and_blocked_by = none
	custom_tooltip_requirements = "MEGASTRUCTURE_TOOLTIP_REQUIREMENTS_MAJOR_ORBITAL_KNIGHTS"

	potential = {
		owner = {
			has_origin = origin_toxic_knights
			has_relic = r_toxic_god
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
		custom_tooltip = {
			fail_text = "requires_habitat_central_complex"
			any_system_planet = {
				has_planet_flag = habitat
			}
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_knights_castle_or_keep"
				solar_system = {
					any_system_planet = {
						has_planet_flag = habitat
						OR = {
							has_building = building_order_castle
							has_building = building_order_keep
						}
					}
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_anomaly"
				NOT = { has_anomaly = yes }
			}
			custom_tooltip = {
				fail_text = "requires_no_existing_megastructure"
				#can_build_megastructure_on_planet = yes
				NOR = {
					has_planet_flag = megastructure
					# EVOLVED
						has_planet_flag = has_megastructure
						#has_planet_flag = tec_has_orbital
					# /
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
				}
			}
			custom_tooltip = {
				fail_text = "requires_no_orbital_debris"
				NOR = {
					has_planet_flag = has_orbital_debris
				}
			}

			# balance for habitats
			custom_tooltip = {
				fail_text = "requires_not_minor_planetary_body"
				NOR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
			custom_tooltip = {
				fail_text = "requires_not_star"
				is_star = no
			}
			custom_tooltip = {
				fail_text = "requires_not_astral_scar"
				is_astral_scar = no
			}
			custom_tooltip = {
				fail_text = "requires_not_solarpunk"
				NOT = {
					solar_system = {
						has_star_flag = solarpunk_system_02
					}
				}
			}
		} # use these for all non-star megastructures
	}

	# root = system
	# from = country
	ai_weight = {
		factor = 0	# Other Orbitals are better for the AI.
	}

	on_build_complete = {
		fromfrom.planet = {
			save_event_target_as = target_planet
		}
		on_orbital_complete_effect = {
			BODY = major
			TYPE = knights
		}
		## EVOLVED To avoid overwriting the effect
		#	event_target:target_planet = {
		#		remove_planet_flag = has_megastructure
		#		set_planet_flag = tec_has_orbital
		#	}
		## /
		event_target:target_habitat = {
			add_deposit_if_missing = {
				DEPOSIT = d_system_resources
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_research
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_energy
			}
			add_deposit_if_missing = {
				DEPOSIT = d_orbital_mining
			}
		}
		from = { country_event = { id = megastructures.11 } }
	}
}
# /

# -------------- discarded/unused --------------
# Ark ship etc
tec_arkship_0 = {
	entity = ""
	construction_entity = "colossus_ship_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = yes
	entity_offset = { x = 7 y = -7 }
	build_time = 1800

	resources = {
		category = megastructures_habitat
		cost = {
			alloys = 1500
			influence = 150
		}
	}
	construction_blocks_and_blocked_by = none

	potential = {
		OR = {
			has_global_flag = tec_test_arkships
		}
	}

	possible = {
		hidden_trigger = {
			exists = starbase
		}
		custom_tooltip = {
			fail_text = "requires_inside_border"
			is_inside_border = from
		}
	}

	placement_rules = {
		planet_possible = {
			custom_tooltip = {
				fail_text = "requires_surveyed_planet"
				is_surveyed = {			# prevent leaking habitability information
					who = prev.from
					status = yes
				}
			}
		}
	}

	# root = system
	# from = country
	ai_weight = {
		factor = 5

		modifier = {
			factor = 0
			starbase = { NOT = { has_starbase_size >= starbase_starport } }
		}

		modifier = {
			factor = 0
			any_system_planet = {
				is_planet_class = pc_habitat
				is_colony = no
			}
		}

		modifier = {
			factor = 3
			solar_system = {
				exists = owner
				is_same_value = owner.capital_scope.solar_system
			}
		}
		modifier = {
			factor = 2
			any_neighbor_system = {
				exists = owner
				is_same_value = owner.capital_scope.solar_system
			}
		}

		modifier = {
			factor = 0.1
			any_neighbor_system = {
				exists = owner
				owner = { NOT = { is_same_value = from } }
			}
		}
	}

	on_build_start = {}
	on_build_cancel = {}

	on_build_complete = {
		spawn_planet = {
			class = "pc_tec_arkship"
			location = fromfrom.planet
			orbit_location = yes
			orbit_angle_offset = 225 #45
			orbit_distance_offset = 20
			size = 4
			has_ring = no

			init_effect = {
				set_name = "TEC_ARK_PLANET_NAME"
				set_planet_entity = {
					picture = pc_habitat
					entity = "tec_arkship_entity"
					graphical_culture = from
				}
				set_surveyed = {
					surveyed = yes
					surveyor = FROM
				}
				set_all_comms_surveyed = yes
				clear_blockers = yes

				set_planet_flag = megastructure
				set_planet_flag = habitat
			}
		}
		fromfrom.planet = {
			set_planet_flag = tec_has_arkship
			save_event_target_as = habitat_planet

			if = {
				limit = { has_orbital_station = yes }
				orbital_station = {
					dismantle = yes
				}
			}
		}
		remove_megastructure = fromfrom
	}
}